<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ansible-cmdb使用手册</title>
    <url>/2020/03/21/Ansible-cmdb%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h1 id="Ansible-cmdb使用手册"><a href="#Ansible-cmdb使用手册" class="headerlink" title="Ansible-cmdb使用手册"></a>Ansible-cmdb使用手册</h1><hr>
<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><blockquote>
<p>Ansible-cmdb将Ansible 实际收集的输出信息转换为包含系统配置信息的静态HTML概述页面（以及其他内容）。它支持多种类型的输出（html，csv，sql等），并将由Ansible收集的信息与自定义数据进行扩展。对于每个主机，它还显示组，主机变量，自定义变量和机器本地事实;</p>
</blockquote>
<ul>
<li>工具地址：<a href="https://github.com/fboender/ansible-cmdb" target="_blank" rel="noopener">https://github.com/fboender/ansible-cmdb</a></li>
</ul>
<h2 id="2、插件安装"><a href="#2、插件安装" class="headerlink" title="2、插件安装"></a>2、插件安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mng-ops-47-200 tmp]# wget https://github.com/fboender/ansible-cmdb/releases/download/1.30/ansible-cmdb-1.30.tar.gz</span><br><span class="line">[root@mng-ops-47-200 tmp]# tar xzvf ansible-cmdb-1.30.tar.gz</span><br><span class="line">[root@mng-ops-47-200 tmp]# cd ansible-cmdb-1.30</span><br><span class="line">[root@mng-ops-47-200 ansible-cmdb-1.30]# pwd</span><br><span class="line">/tmp/ansible-cmdb-1.30</span><br><span class="line">[root@mng-ops-47-200 ansible-cmdb-1.30]# make install</span><br><span class="line">umask 0022 &amp;&amp; mkdir -p /usr/local/lib/ansible-cmdb</span><br><span class="line">umask 0022 &amp;&amp; mkdir -p /usr/local/man/man1</span><br><span class="line">umask 0022 &amp;&amp; cp -a * /usr/local/lib/ansible-cmdb/</span><br><span class="line">cp -a ansible-cmdb.man.1 /usr/local/man/man1/ansible-cmdb.1</span><br><span class="line">ln -s /usr/local/lib/ansible-cmdb/ansible-cmdb /usr/local/bin/ansible-cmdb</span><br><span class="line">if command -v mandb &gt;/dev/null; then mandb -p -q; fi</span><br></pre></td></tr></table></figure>
<ul>
<li>提示：需要Pythonv3.x的依赖环境</li>
</ul>
<h2 id="3、使用方法"><a href="#3、使用方法" class="headerlink" title="3、使用方法"></a>3、使用方法</h2><h3 id="3-1、添加需要ansible管控的主机"><a href="#3-1、添加需要ansible管控的主机" class="headerlink" title="3.1、添加需要ansible管控的主机"></a>3.1、添加需要ansible管控的主机</h3><ul>
<li>提示：添加的主机需对devops用户做免密配置，然后在<code>/etc/ansible/hosts</code>配置文件下添加如下信息：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[db]</span><br><span class="line">10.20.60.1 ansible_ssh_user=devops ansible_ssh_pass=DevOps@60.1 ansible_become=yes ansible_become_method=su ansible_become_user=root  ansible_become_pass=&apos;YuXin@60.1&apos;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-2、通过ansible-cmdb获取主机信息"><a href="#3-2、通过ansible-cmdb获取主机信息" class="headerlink" title="3.2、通过ansible-cmdb获取主机信息"></a>3.2、通过ansible-cmdb获取主机信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mng-ops-47-200 ansible-playbooks]# ansible -m setup --tree appinfo db</span><br><span class="line">10.20.60.1 | SUCCESS =&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;ansible_all_ipv4_addresses&quot;: [</span><br><span class="line">            &quot;10.96.50.51&quot;, </span><br><span class="line">            &quot;10.20.60.1&quot;</span><br><span class="line">        ], </span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="3-3、使用Ansible-CMDB生成CMDB-HTML"><a href="#3-3、使用Ansible-CMDB生成CMDB-HTML" class="headerlink" title="3.3、使用Ansible CMDB生成CMDB HTML"></a>3.3、使用Ansible CMDB生成CMDB HTML</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@mng-ops-47-200 ansible-playbooks]# ansible-cmdb appinfo &gt; cmdb_tree.html</span><br></pre></td></tr></table></figure>
<h2 id="4、前端展示"><a href="#4、前端展示" class="headerlink" title="4、前端展示"></a>4、前端展示</h2><p><img src="http://static.zybuluo.com/a807257775/660o7mswl4rb16bhvhm8xmnt/image_1dt0ehlv9jup19u42kt1ast1t6ep.png" alt="image_1dt0ehlv9jup19u42kt1ast1t6ep.png-140.6kB"></p>
]]></content>
      <categories>
        <category>Ansible相关</category>
      </categories>
      <tags>
        <tag>Ansible相关</tag>
      </tags>
  </entry>
  <entry>
    <title>CI/CD自动化运维实践</title>
    <url>/2024/05/21/CICD%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h1 id="CI-CD自动化运维实践"><a href="#CI-CD自动化运维实践" class="headerlink" title="CI/CD自动化运维实践"></a>CI/CD自动化运维实践</h1><h2 id="1、前言与介绍"><a href="#1、前言与介绍" class="headerlink" title="1、前言与介绍"></a>1、前言与介绍</h2><h3 id="1-1、技术预览"><a href="#1-1、技术预览" class="headerlink" title="1.1、技术预览"></a>1.1、技术预览</h3><ul>
<li><p>Semphore</p>
<blockquote>
<p>Semaphore 是一个具有基本CI/CD的Ansible脚本的Web界面，用于运行 Ansible 剧本、Terraform/OpenTofu 和 Pulumi 代码。使用Semaphore可以完成代码构建、部署、回滚。管理Ansible HOSTS环境、存储库、秘钥等信息。响应式UI方便运维人员快速上手，并允许在移动设备上运行。当前已支持CRON模式执行剧本。随时查看任何剧本运行的详细日志等功能。在实际项目应用中，Semaphore可以实现一个具有基本能力的CI/CD流水线，来实现产品的持续快速交付与部署，通过自动执行重复性任务，改变IT专业人员的工作重心，用更多的思考能力来改进产品、排查问题，不必担心集成进度。</p>
</blockquote>
</li>
<li><p>Ansible</p>
<blockquote>
<p>Ansible是近年来越来越火的一款运维自动化工具，其主要功能是帮助运维实现IT工作的自动化、降低认为操作失误、提高业务自动化率、提升运维工作效率，常用于软件部署自动化、配置自动化、管理自动化、持续集成、零宕机平滑升级等。它丰富的内置模块（如ACL、commonand、shell、cron、yum、copy、file、user等多达接近2000个模块）和开发的APT接口。而Ansible架构相对比较简单，仅需通过SSH连接客户机执行任务即可。</p>
</blockquote>
</li>
</ul>
<h2 id="2、最佳实践"><a href="#2、最佳实践" class="headerlink" title="2、最佳实践"></a>2、最佳实践</h2><h3 id="2-1、基于趣街的自动化运维实现"><a href="#2-1、基于趣街的自动化运维实现" class="headerlink" title="2.1、基于趣街的自动化运维实现"></a>2.1、基于趣街的自动化运维实现</h3><blockquote>
<p>须知：所有支持自动化更新的应用，均已替换成运维自主编写的JAVA应用管理脚本。此脚本中涵盖了应用备份、应用检查、应用启停等功能，并对执行结果和信息输出均做了判断和控制。涉及技术有Semphore、Ansible、Shell，自动化运行的逻辑是使用了Semphore图形化管理工具远程调用Ansible命令，对主机实现批量化管理，Semphore图形化工具包含了对anslbie的日常管理和任务执行工作，所有上线自动化操作均通过Semphore来完成；</p>
</blockquote>
<ul>
<li>架构图<br><img src="https://static.zybuluo.com/a807257775/rivscf8d1yird704vlyf5el9/%E8%B6%A3%E8%A1%97%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E7%BB%B4%E5%AE%9E%E8%B7%B5%20%281%29.jpg" alt="趣街自动化运维实践 (1).jpg-76.3kB"></li>
</ul>
]]></content>
      <categories>
        <category>Ansible相关</category>
      </categories>
      <tags>
        <tag>Ansible相关</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7操作系统常规设置</title>
    <url>/2020/12/09/Centos7%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B8%B8%E8%A7%84%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Centos7操作系统常规设置"><a href="#Centos7操作系统常规设置" class="headerlink" title="Centos7操作系统常规设置"></a>Centos7操作系统常规设置</h1><h2 id="1、网络类"><a href="#1、网络类" class="headerlink" title="1、网络类"></a>1、网络类</h2><h3 id="安装ifconfig、arp等mii-tool等命令"><a href="#安装ifconfig、arp等mii-tool等命令" class="headerlink" title="安装ifconfig、arp等mii-tool等命令"></a>安装ifconfig、arp等mii-tool等命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y net-tools</span><br></pre></td></tr></table></figure>
<h3 id="安装图形化网络配置"><a href="#安装图形化网络配置" class="headerlink" title="安装图形化网络配置"></a>安装图形化网络配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#nmtui 命令取代了 setup中的网络配置</span><br><span class="line">yum install NetworkManager-tui -y</span><br></pre></td></tr></table></figure>
<h3 id="安装nslookup命令"><a href="#安装nslookup命令" class="headerlink" title="安装nslookup命令"></a>安装nslookup命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install bind-utils -y</span><br></pre></td></tr></table></figure>
<h3 id="网卡及网络信息"><a href="#网卡及网络信息" class="headerlink" title="网卡及网络信息"></a>网卡及网络信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip n</span><br><span class="line">ip -s l</span><br><span class="line">ss -tlnup</span><br><span class="line">netstat -tlnup</span><br></pre></td></tr></table></figure>
<h3 id="查看MAC地址"><a href="#查看MAC地址" class="headerlink" title="查看MAC地址"></a>查看MAC地址</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arp -a</span><br><span class="line">ip addr show</span><br></pre></td></tr></table></figure>
<h3 id="查看路由"><a href="#查看路由" class="headerlink" title="查看路由"></a>查看路由</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">route -n</span><br><span class="line">ip route show</span><br><span class="line">ip -6 route show</span><br></pre></td></tr></table></figure>
<h2 id="2、系统类"><a href="#2、系统类" class="headerlink" title="2、系统类"></a>2、系统类</h2><h3 id="查看操作系统版本"><a href="#查看操作系统版本" class="headerlink" title="查看操作系统版本"></a>查看操作系统版本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat /etc/redhat-release</span><br></pre></td></tr></table></figure>
<h3 id="查看操作系统内核版本"><a href="#查看操作系统内核版本" class="headerlink" title="查看操作系统内核版本"></a>查看操作系统内核版本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure>
<h3 id="时区和时间设置"><a href="#时区和时间设置" class="headerlink" title="时区和时间设置"></a>时区和时间设置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#时区配置方法1</span><br><span class="line">timedatectl set-timezone Asia/Shanghai</span><br><span class="line">timedatectl status</span><br><span class="line">/etc/locale.conf</span><br><span class="line">#时区配置方法2</span><br><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line"></span><br><span class="line">#时间配置</span><br><span class="line">yum install dnf ntpdate -y</span><br><span class="line">dnf makecache</span><br><span class="line">ntpdate ntp.aliyun.com</span><br></pre></td></tr></table></figure>
<h3 id="语言设置"><a href="#语言设置" class="headerlink" title="语言设置"></a>语言设置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#方法1</span><br><span class="line">locale -a |grep CN</span><br><span class="line">vim /etc/locale.conf</span><br><span class="line">source /etc/locale.conf</span><br><span class="line"></span><br><span class="line">#方法2</span><br><span class="line">localectl set-locale LANG=zh_CN.utf8</span><br><span class="line">localectl status</span><br></pre></td></tr></table></figure>
<h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/hostname</span><br></pre></td></tr></table></figure>
<h3 id="服务的管理和控制"><a href="#服务的管理和控制" class="headerlink" title="服务的管理和控制"></a>服务的管理和控制</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#systemctl是最主要的工具。它融合service 和chkconfig的功能于一体</span><br><span class="line">systemctl --help</span><br><span class="line">#启动脚本存放目录</span><br><span class="line">/usr/lib/systemd/system</span><br></pre></td></tr></table></figure>
<h3 id="服务启动与停止"><a href="#服务启动与停止" class="headerlink" title="服务启动与停止"></a>服务启动与停止</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start service_name</span><br><span class="line">systemctl stop service_name</span><br><span class="line">systemctl restart/status/reload sshd</span><br></pre></td></tr></table></figure>
<h3 id="服务自启动"><a href="#服务自启动" class="headerlink" title="服务自启动"></a>服务自启动</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl enable service_name</span><br><span class="line">systemctl disable service_name</span><br></pre></td></tr></table></figure>
<h3 id="服务一览"><a href="#服务一览" class="headerlink" title="服务一览"></a>服务一览</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl list-unit-files</span><br><span class="line">systemctl --type service</span><br><span class="line">systemctl is-enabled sshd</span><br></pre></td></tr></table></figure>
<h3 id="重载服务配置文件"><a href="#重载服务配置文件" class="headerlink" title="重载服务配置文件"></a>重载服务配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure>
<h3 id="杀死服务"><a href="#杀死服务" class="headerlink" title="杀死服务"></a>杀死服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl kill --signal=9 sshd</span><br><span class="line">kill -9 &lt;PID&gt;</span><br></pre></td></tr></table></figure>
<h3 id="切换运行级别"><a href="#切换运行级别" class="headerlink" title="切换运行级别"></a>切换运行级别</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl isolate multi-user.target</span><br><span class="line">systemctl isolate graphical.target</span><br><span class="line">#默认</span><br><span class="line">systemctl set-default graphical.target</span><br><span class="line">systemctl set-default multi-user.target</span><br><span class="line">#当前</span><br><span class="line">systemctl get-default</span><br></pre></td></tr></table></figure>
<h3 id="关闭服务器"><a href="#关闭服务器" class="headerlink" title="关闭服务器"></a>关闭服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">init 0</span><br><span class="line">poweroff</span><br><span class="line">systemctl poweroff</span><br></pre></td></tr></table></figure>
<h3 id="重启服务器"><a href="#重启服务器" class="headerlink" title="重启服务器"></a>重启服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">init 6</span><br><span class="line">reboot</span><br><span class="line">systemctl reboot</span><br></pre></td></tr></table></figure>
<h3 id="单用户模式"><a href="#单用户模式" class="headerlink" title="单用户模式"></a>单用户模式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl rescue</span><br></pre></td></tr></table></figure>
<h3 id="查看开机时间"><a href="#查看开机时间" class="headerlink" title="查看开机时间"></a>查看开机时间</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看看机时间</span><br><span class="line">systemd-analyze time</span><br><span class="line">#查看占用开机时间的程序和服务</span><br><span class="line">systemd-analyze blame</span><br><span class="line">#将开机时间所占用的程序到出成图形化进行分析</span><br><span class="line">systemd-analyze plot &gt; bootime.svg</span><br></pre></td></tr></table></figure>
<h3 id="文件结构变化"><a href="#文件结构变化" class="headerlink" title="文件结构变化"></a>文件结构变化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">centos7的/bin, /sbin, /lib, and /lib64移到/usr下</span><br></pre></td></tr></table></figure>
<h3 id="通过repoquery查看rpm包中包含哪些文件"><a href="#通过repoquery查看rpm包中包含哪些文件" class="headerlink" title="通过repoquery查看rpm包中包含哪些文件"></a>通过repoquery查看rpm包中包含哪些文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install yum-utils</span><br><span class="line">repoquery -q -l &lt;包名&gt;</span><br></pre></td></tr></table></figure>
<h2 id="3、优化类"><a href="#3、优化类" class="headerlink" title="3、优化类"></a>3、优化类</h2><h3 id="内核参数配置文件"><a href="#内核参数配置文件" class="headerlink" title="内核参数配置文件"></a>内核参数配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#centos7采用文件夹引用方式加载配置</span><br><span class="line">/etc/sysctl.d/</span><br><span class="line">/usr/lib/sysctl.d/</span><br><span class="line">/run/sysctl.d/</span><br></pre></td></tr></table></figure>
<h3 id="内核参数优化"><a href="#内核参数优化" class="headerlink" title="内核参数优化"></a>内核参数优化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#filemax</span><br><span class="line">fs.file-max = 65535</span><br><span class="line">#关闭ipv6</span><br><span class="line">net.ipv6.conf.all.disable_ipv6 = 1</span><br><span class="line">net.ipv6.conf.default.disable_ipv6 = 1</span><br><span class="line"># 避免放大攻击</span><br><span class="line">net.ipv4.icmp_echo_ignore_broadcasts = 1</span><br><span class="line"># 开启恶意icmp错误消息保护</span><br><span class="line">net.ipv4.icmp_ignore_bogus_error_responses = 11</span><br><span class="line">#决定检查过期多久邻居条目</span><br><span class="line">net.ipv4.neigh.default.gc_stale_time=120</span><br><span class="line">#使用arp_announce / arp_ignore解决ARP映射问题</span><br><span class="line">net.ipv4.conf.default.arp_announce = 2</span><br><span class="line">net.ipv4.conf.all.arp_announce=2</span><br><span class="line">net.ipv4.conf.lo.arp_announce=2</span><br><span class="line">#处理无源路由的包</span><br><span class="line">net.ipv4.conf.all.accept_source_route = 0</span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line">kernel.sysrq = 0</span><br><span class="line">#core文件名中添加pid作为扩展名</span><br><span class="line">kernel.core_uses_pid = 1 </span><br><span class="line">#修改消息队列长度</span><br><span class="line">kernel.msgmnb = 65536</span><br><span class="line">kernel.msgmax = 65536</span><br><span class="line">#开机路由转发</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">#开启反向路径过滤</span><br><span class="line">net.ipv4.conf.all.rp_filter = 1</span><br><span class="line">net.ipv4.conf.default.rp_filter = 1</span><br><span class="line">#设置最大内存共享段大小bytes</span><br><span class="line">kernel.shmmax = 68719476736</span><br><span class="line">kernel.shmall = 4294967296</span><br><span class="line">#timewait的数量，默认180000</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 20000</span><br><span class="line">net.ipv4.tcp_sack = 1</span><br><span class="line">net.ipv4.tcp_window_scaling = 1</span><br><span class="line">net.ipv4.tcp_rmem = 4096 87380 4194304</span><br><span class="line">net.ipv4.tcp_wmem = 4096 16384 4194304</span><br><span class="line">net.core.wmem_default = 8388608</span><br><span class="line">net.core.rmem_default = 8388608</span><br><span class="line">net.core.rmem_max = 16777216</span><br><span class="line">net.core.wmem_max = 16777216</span><br><span class="line">#每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。</span><br><span class="line">net.core.netdev_max_backlog = 32768</span><br><span class="line">#记录的那些尚未收到客户端确认信息的连接请求的最大值。对于有128M内存的系统而言，缺省值是1024</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 65536</span><br><span class="line">#web应用中listen函数的backlog默认会给我们内核参数的net.core.somaxconn限制到128，而nginx定义的NGX_LISTEN_BACKLOG默认为511，所以有必要调整这个值。</span><br><span class="line">net.core.somaxconn = 32768</span><br><span class="line">#限制仅仅是为了防止简单的DoS 攻击</span><br><span class="line">net.ipv4.tcp_max_orphans = 3276800</span><br><span class="line">#未收到客户端确认信息的连接请求的最大值</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 262144</span><br><span class="line">net.ipv4.tcp_timestamps = 0</span><br><span class="line">#内核放弃建立连接之前发送SYNACK 包的数量</span><br><span class="line">net.ipv4.tcp_synack_retries = 1</span><br><span class="line">#内核放弃建立连接之前发送SYN 包的数量</span><br><span class="line">net.ipv4.tcp_syn_retries = 1</span><br><span class="line">#启用timewait 快速回收</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">#开启重用。允许将TIME-WAIT sockets 重新用于新的TCP 连接</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_mem = 94500000 915000000 927000000</span><br><span class="line">net.ipv4.tcp_fin_timeout = 1</span><br><span class="line"># 开启SYN洪水攻击保护(防范少量SYN攻击)</span><br><span class="line">net.ipv4.tcp_syncookies = 1 </span><br><span class="line">#允许系统打开的端口范围</span><br><span class="line">net.ipv4.ip_local_port_range = 32768 61000</span><br></pre></td></tr></table></figure>
<h3 id="开机启动脚本需加X权限"><a href="#开机启动脚本需加X权限" class="headerlink" title="开机启动脚本需加X权限"></a>开机启动脚本需加X权限</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>
<h3 id="安装系统基本管理工具"><a href="#安装系统基本管理工具" class="headerlink" title="安装系统基本管理工具"></a>安装系统基本管理工具</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum groupinstall &quot;Development Tools&quot; --setopt=group_package_types=mandatory,default,optional</span><br><span class="line">yum install tree net-tools bind-utils tree sysstat NetworkManager-tui ntp iftop vim telnet wget nethogs htop glances dstat traceroute lrzsz goaccess ntpdate dos2unix openssl-devel tcpdump lrzsz fio nss curl ca-certificates socat -y</span><br></pre></td></tr></table></figure>
<h3 id="优化SSH相关配置"><a href="#优化SSH相关配置" class="headerlink" title="优化SSH相关配置"></a>优化SSH相关配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br><span class="line">#AddressFamily any</span><br><span class="line">AddressFamily inet</span><br><span class="line">#注:(inet is ipv4 only; inet6 is ipv6 only)</span><br><span class="line"></span><br><span class="line">Port 60002</span><br><span class="line">#禁止root用户登录，根据需求设定</span><br><span class="line"># PermitRootLogin no</span><br><span class="line">#禁止空密码登录</span><br><span class="line">PermitEmptyPasswords no</span><br><span class="line">#不使用DNS解析，可以加快访问速度</span><br><span class="line">UseDNS no</span><br><span class="line"># 是一套类似Kerberos 5的通用网络安全系统接口。该接口是对各种不同的客户端服务器安全机制的封装，以消除安全接口的不同，降低编程难度。但该接口在目标机器无域名解析时会有问题</span><br><span class="line">GSSAPIAuthentication no</span><br></pre></td></tr></table></figure>
<h3 id="关闭防火强和setlinux"><a href="#关闭防火强和setlinux" class="headerlink" title="关闭防火强和setlinux"></a>关闭防火强和setlinux</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#停止防火墙服务并取消开机自启</span><br><span class="line">systemctl disable --now firewalld</span><br><span class="line"></span><br><span class="line">#关闭selinux</span><br><span class="line">setenforce 0</span><br><span class="line">sed -i &apos;s#SELINUX=enforcing#SELINUX=disabled#g&apos; /etc/selinux/config</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>ConfigMap详解与案例</title>
    <url>/2020/09/23/ConfigMap%E8%AF%A6%E8%A7%A3%E4%B8%8E%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h1 id="ConfigMap详解与案例"><a href="#ConfigMap详解与案例" class="headerlink" title="ConfigMap详解与案例"></a>ConfigMap详解与案例</h1><h2 id="1、ConfigMap使用场景"><a href="#1、ConfigMap使用场景" class="headerlink" title="1、ConfigMap使用场景"></a>1、ConfigMap使用场景</h2><ul>
<li>这里使用一张来源与网络的图来说明ConfigMap常见的使用场景之一：<br><img src="http://static.zybuluo.com/a807257775/4umeoyk7xvotov1y6yftgoeb/image_1eiqksubd1er5n8eig01pcp1m469.png" alt="image_1eiqksubd1er5n8eig01pcp1m469.png-154.7kB"></li>
</ul>
<h2 id="2、ConfigMap的概述"><a href="#2、ConfigMap的概述" class="headerlink" title="2、ConfigMap的概述"></a>2、ConfigMap的概述</h2><ul>
<li>ConfigMap供容器使用的典型用法如下。<ul>
<li>生成为容器内的环境变量。</li>
<li>设置容器启动命令的启动参数（需设置为环境变量）。</li>
<li>以Volume的形式挂载为容器内部的文件或目录。</li>
</ul>
</li>
</ul>
<blockquote>
<p>ConfigMap以一个或多个key:value的形式保存在Kubernetes系统中供应用使用，既可以用于表示一个变量的值（例如apploglevel=info），也可以用于表示一个完整配置文件的内容（例如server.xml=&lt;?xml…&gt;…）可以通过YAML配置文件或者直接使用kubectlcreateconfigmap命令行的方式来创建ConfigMap</p>
</blockquote>
<h2 id="3、创建ConfigMap"><a href="#3、创建ConfigMap" class="headerlink" title="3、创建ConfigMap"></a>3、创建ConfigMap</h2><ul>
<li>创建ConfigMap的方式有4种：<ul>
<li>通过直接在命令行中指定configmap参数创建，即–from-literal</li>
<li>通过指定文件创建，即将一个配置文件创建为一个ConfigMap–from-file=&lt;文件&gt;</li>
<li>通过指定目录创建，即将一个目录下的所有配置文件创建为一个ConfigMap，–from-file=&lt;目录&gt;</li>
<li>事先写好标准的configmap的yaml文件，然后kubectl create -f 创建</li>
</ul>
</li>
</ul>
<h2 id="4、ConfigMap的增删改查指令"><a href="#4、ConfigMap的增删改查指令" class="headerlink" title="4、ConfigMap的增删改查指令"></a>4、ConfigMap的增删改查指令</h2><h3 id="4-1、查询"><a href="#4-1、查询" class="headerlink" title="4.1、查询"></a>4.1、查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查询所有命令空间的ConfigMap信息</span><br><span class="line">[root@k8s-master nginx_deployment]# kubectl get configmap -A</span><br><span class="line">NAMESPACE              NAME                                 DATA   AGE</span><br><span class="line">default                nginx-config                         1      46m</span><br><span class="line">default                www-config                           1      66m</span><br><span class="line">kube-public            cluster-info                         1      5d2h</span><br><span class="line">kube-system            coredns                              1      5d2h</span><br><span class="line">kube-system            extension-apiserver-authentication   6      5d2h</span><br><span class="line">kube-system            kube-flannel-cfg                     2      5d2h</span><br><span class="line">kube-system            kube-proxy                           2      5d2h</span><br><span class="line">kube-system            kubeadm-config                       2      5d2h</span><br><span class="line">kube-system            kubelet-config-1.19                  1      5d2h</span><br><span class="line">kubernetes-dashboard   kubernetes-dashboard-settings        0      5d1h</span><br><span class="line">#查询缺省的default命名空间的ConfigMap信息</span><br><span class="line">[root@k8s-master nginx_deployment]# kubectl get cm</span><br><span class="line">[root@k8s-master nginx_deployment]# kubectl get configmap </span><br><span class="line">NAME           DATA   AGE</span><br><span class="line">nginx-config   1      43m</span><br><span class="line">www-config     1      64m</span><br><span class="line">[root@k8s-master nginx_deployment]# kubectl describe configmap nginx-config</span><br><span class="line">[root@k8s-master nginx_deployment]# kubectl get configmap nginx-config -o yaml</span><br><span class="line">#此处省略</span><br></pre></td></tr></table></figure>
<h3 id="4-2、修改"><a href="#4-2、修改" class="headerlink" title="4.2、修改"></a>4.2、修改</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl edit configmap [configmap名称]</span><br></pre></td></tr></table></figure>
<h3 id="4-3、删除"><a href="#4-3、删除" class="headerlink" title="4.3、删除"></a>4.3、删除</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl delete configmap [configmap名称]</span><br></pre></td></tr></table></figure>
<h3 id="4-3、增加"><a href="#4-3、增加" class="headerlink" title="4.3、增加"></a>4.3、增加</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl create configmap [configmap名称] --from-file=[目录]</span><br><span class="line">kubectl create configmap [configmap名称] --from-file=[文件]</span><br><span class="line">kubectl create configmap [configmap名称] --from-literal=[键值对]</span><br></pre></td></tr></table></figure>
<h2 id="5、为nginx-deployment创建configmap"><a href="#5、为nginx-deployment创建configmap" class="headerlink" title="5、为nginx-deployment创建configmap"></a>5、为nginx-deployment创建configmap</h2><h3 id="5-1、编写yml文件创建configmap"><a href="#5-1、编写yml文件创建configmap" class="headerlink" title="5.1、编写yml文件创建configmap"></a>5.1、编写yml文件创建configmap</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建nginx主配置文件的configmap</span><br><span class="line">[root@k8s-master nginx_deployment]# cat nginx-config.yml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-config</span><br><span class="line">data:</span><br><span class="line">  nginx.conf: |</span><br><span class="line">    user  nginx;</span><br><span class="line">    worker_processes  2;</span><br><span class="line">    error_log  /var/log/nginx/error.log warn;</span><br><span class="line">    pid        /var/run/nginx.pid;</span><br><span class="line">    events &#123;</span><br><span class="line">        worker_connections  1024;</span><br><span class="line">    &#125;</span><br><span class="line">    http &#123;</span><br><span class="line">        include       /etc/nginx/mime.types;</span><br><span class="line">        default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">        log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                          &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                          &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">        access_log  /var/log/nginx/lisiraccess.log  main;</span><br><span class="line">        sendfile        on;</span><br><span class="line">        #tcp_nopush     on;</span><br><span class="line">        keepalive_timeout  65;</span><br><span class="line">        #gzip  on;</span><br><span class="line">        include /etc/nginx/conf.d/*.conf;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建虚拟主机configmap    </span><br><span class="line">[root@k8s-master nginx_deployment]# cat www-config.yml </span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ConfigMap</span><br><span class="line">metadata:</span><br><span class="line">  name: www-config</span><br><span class="line">data:</span><br><span class="line"># 类文件键</span><br><span class="line">  default.conf: |</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        listen  [::]:80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /usr/share/nginx/html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /stub_status &#123;</span><br><span class="line">            allow 127.0.0.1;</span><br><span class="line">            stub_status on;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-2、通过kubectl生成configmap"><a href="#5-2、通过kubectl生成configmap" class="headerlink" title="5.2、通过kubectl生成configmap"></a>5.2、通过kubectl生成configmap</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl apply -f www-config.yml </span><br><span class="line">kubectl apply -f nginx-config.yml</span><br></pre></td></tr></table></figure>
<h3 id="5-3、创建nginx-deployment，挂载configmap"><a href="#5-3、创建nginx-deployment，挂载configmap" class="headerlink" title="5.3、创建nginx-deployment，挂载configmap"></a>5.3、创建nginx-deployment，挂载configmap</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line"> name: nginx-deployment</span><br><span class="line">spec:</span><br><span class="line"> selector:</span><br><span class="line">  matchLabels:</span><br><span class="line">   app: web_server</span><br><span class="line"> replicas: 2</span><br><span class="line"> template:</span><br><span class="line">  metadata:</span><br><span class="line">   labels:</span><br><span class="line">    app: web_server</span><br><span class="line">  spec:</span><br><span class="line">   containers:</span><br><span class="line">   - name: nginx</span><br><span class="line">     image: nginx:1.12.1</span><br><span class="line">     ports:</span><br><span class="line">     - containerPort: 80</span><br><span class="line">     env:</span><br><span class="line">     - name: TZ</span><br><span class="line">       value: Asia/Shanghai</span><br><span class="line">     #就是这一段使用configMap配置</span><br><span class="line">     volumeMounts:</span><br><span class="line">     - name: nginx-web1-storage</span><br><span class="line">       mountPath: /usr/share/nginx/html</span><br><span class="line">     #定义挂载名称与后面配置的volume相呼应</span><br><span class="line">     - name: www-config</span><br><span class="line">       #将配置文件挂载到哪里</span><br><span class="line">       mountPath: /etc/nginx/conf.d</span><br><span class="line">     - name: nginx-config</span><br><span class="line">       mountPath: /etc/nginx/nginx.conf</span><br><span class="line">       #使用 ConfigMap 作为 subPath 的数据卷将不会收到 ConfigMap 更新</span><br><span class="line">       #volumeMounts.subPath属性用于指定单个文件，而不是整个目录，如不指定则整个目录都发生变化</span><br><span class="line">       subPath: nginx.conf</span><br><span class="line">   volumes:</span><br><span class="line">   - name: nginx-web1-storage</span><br><span class="line">     persistentVolumeClaim:</span><br><span class="line">       claimName: nginx-pvc-web1</span><br><span class="line">   - name: www-config</span><br><span class="line">     configMap:</span><br><span class="line">       name: www-config</span><br><span class="line">   - name: nginx-config</span><br><span class="line">     configMap:</span><br><span class="line">       #提供你想要挂载的 ConfigMap 的名字     </span><br><span class="line">       name: nginx-config</span><br><span class="line">       #也可不指定items，那默认是nginx-config里的所有值都挂载</span><br><span class="line">       items:</span><br><span class="line">       #使用nginx-config配置的nginx.conf键里的内容</span><br><span class="line">       - key: nginx.conf</span><br><span class="line">         path: nginx.conf</span><br></pre></td></tr></table></figure>
<h3 id="5-4、访问测试"><a href="#5-4、访问测试" class="headerlink" title="5.4、访问测试"></a>5.4、访问测试</h3><p><img src="http://static.zybuluo.com/a807257775/rhctohxhjpw1za4lptb09aql/image_1eiqldopo16dns231e8j7bpeamm.png" alt="image_1eiqldopo16dns231e8j7bpeamm.png-8.6kB"></p>
<h2 id="6、注意事项"><a href="#6、注意事项" class="headerlink" title="6、注意事项"></a>6、注意事项</h2><ul>
<li><p>Kubelet的同步时间间隔</p>
<blockquote>
<p>设定参数：sync-frequency<br>缺省设定值：在1.17中缺省设定为1m0s，所以最大同步间隔为1分钟，之所以说最大，因为更新的时间点距其即将开始的同步的时间可能不同。</p>
</blockquote>
</li>
<li><p>包含subPath的configmap的pod无法实现热更新，可以通过<code>kubectl rollout restart deployment/nginx-deployment</code>重启deployment实现更新，更新前将修改的数据通过命令<code>kubectl apply -f nginx-config.yml</code>更新到etcd即可。</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-master ~]# kubectl exec -it pod/nginx-deployment-5c8f6b5d97-6cvmq -- cat /etc/nginx/nginx.conf</span><br><span class="line">user  nginx;</span><br><span class="line">worker_processes  2;</span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">    access_log  /var/log/nginx/lisiraccess.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    #gzip  on;</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常用命令手册</title>
    <url>/2020/12/11/Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h1 id="Docker常用命令手册"><a href="#Docker常用命令手册" class="headerlink" title="Docker常用命令手册"></a>Docker常用命令手册</h1><h2 id="1、docker常用基础命令"><a href="#1、docker常用基础命令" class="headerlink" title="1、docker常用基础命令"></a>1、docker常用基础命令</h2><blockquote>
<p>本文记录了在学习docker过程中所使用过，并可能会用到的命令，将命令进行解析和归集，方便日常工作使用，实时更新中</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker &lt;选项&gt;&lt;命令&gt;&lt;参数&gt;</span><br><span class="line">    --api-enable-cors=false </span><br><span class="line">        #使用API时，启用CORS（cross-origin resource sharing）</span><br><span class="line">    -b 、--bridge=&quot;&quot; </span><br><span class="line">        #使用事先创建的网桥接口。若设置为none，则不在容器内使用网络</span><br><span class="line">    --bip=&quot;&quot; </span><br><span class="line">        #使用CIDR标记法设置docker 的IP带宽。该选项不能与-b选项同时使用</span><br><span class="line">        #如：-bip=&quot;192.168.0.0/24&quot;</span><br><span class="line">    -D 、--debug </span><br><span class="line">        #启用调试模式</span><br><span class="line">    -d 、--deamon=false </span><br><span class="line">        #以守护进程模式运行</span><br><span class="line">    --dns </span><br><span class="line">        #设置docker要使用的DNS服务器</span><br><span class="line">    --dns-search=[] </span><br><span class="line">        #设置docker要使用的DNS搜索域。若设置为：example.com，则向服务器查询hello时，将首先查找hello.example.com</span><br><span class="line">    -e、--exec-drive=&quot;native&quot; </span><br><span class="line">        #设置docker运行驱动，可设置为Native与lxc</span><br><span class="line">    --fixed-cidr=&quot;&quot; </span><br><span class="line">        #固定分配IPv4地址的带宽。该IP地址必须在-b选项设置的网桥网络或--bip设置的IP网段内</span><br><span class="line">    -G、--group=&quot;docker&quot; </span><br><span class="line">        #以守护进程模式运行时，使用-H选项创建Unix套接字后，设置该Unix套接字所在的组。使用&quot;&quot;空字符串表示不设置分组</span><br><span class="line">    -g、 --graph=&quot;/var/lib/docker&quot; </span><br><span class="line">        #设置docker使用目录的顶层路径</span><br><span class="line">    -H、--host[] </span><br><span class="line">        #以守护进程模式运行时，设置套接字路径。</span><br><span class="line">    --icc=true </span><br><span class="line">        #开启容器间通信</span><br><span class="line">    --insecure-registry=[] </span><br><span class="line">        #使用私有证书搭建docker注册服务器时，设置docker注册服务器域名</span><br><span class="line">    --ip=0.0.0.0 </span><br><span class="line">        #使用docker run 命令时-p选项将端口暴露在外时，设置要绑定的默认IP地址</span><br><span class="line">    --ip-forward=true </span><br><span class="line">        #开启net.ipv4.ip_forward</span><br><span class="line">    --ip-masq=true </span><br><span class="line">        #为网桥上的IP地址开启IP伪装（masquerading）</span><br><span class="line">    --iptables=true </span><br><span class="line">        #开启iptables规则</span><br><span class="line">    --mtu=0 </span><br><span class="line">        #设置容器的网络最大传输单元（MTU, Maxmum transmission unit）若不设置，则使用路由器的默认MTU或者设置为1500</span><br><span class="line">    -p、--pidfile=&quot;/var/run/docker.pid&quot; </span><br><span class="line">        #设置PID文件路径</span><br><span class="line">    -registry-mirror=[] </span><br><span class="line">        #设置docker registry 的镜像地址</span><br><span class="line">    -s、--storage-driver=[] </span><br><span class="line">        #设置储存驱动，默认为auto，也可以设置为drivcemapper</span><br><span class="line">    --selinux-enabled=false </span><br><span class="line">        #开启SELinux SELinux尚不支持BTRFS储存驱动</span><br><span class="line">    --storage-opt </span><br><span class="line">        #设置存储驱动选项</span><br><span class="line">    --tls=false </span><br><span class="line">        #使用TLS</span><br><span class="line">    --tlscacert=&quot;/home/exapmleuser/.docker/ca.pem&quot; </span><br><span class="line">        #设置要在远程证书中使用的CA证书文件的路径</span><br><span class="line">    --tlscert=&quot;/home/exapmleuser/.docker/cert.pem&quot; </span><br><span class="line">        #设置证书文件路径</span><br><span class="line">    --tlskey=&quot;/home/exapmleuser/.docker/key.pem&quot; </span><br><span class="line">        #设置密匙文件路径</span><br><span class="line">    tlsverify=&quot;false&quot; </span><br><span class="line">        #使用TLS远程证书，守护进程与客户端全部使用证书验证</span><br><span class="line">    -v、--version=false </span><br><span class="line">        #打印版本信息</span><br></pre></td></tr></table></figure>
<h2 id="2、镜像操作命令总结"><a href="#2、镜像操作命令总结" class="headerlink" title="2、镜像操作命令总结"></a>2、镜像操作命令总结</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@docker ~]# docker image --help</span><br><span class="line">Usage:	docker image COMMAND</span><br><span class="line">Manage images</span><br><span class="line">Commands:</span><br><span class="line">  build       从Dockerfile构建镜像</span><br><span class="line">  history     用于显示镜像的历史。此处的历史依据Dockerfile文件中的设置创建</span><br><span class="line">  import      用于从压缩为tar文件（.tar .tar.gz .tgz .bzip .tar.xz .txz）的文件系统创建镜像</span><br><span class="line">  inspect     用于以JSON格式显示容器与镜像的详细信息</span><br><span class="line">  load        用于从tar文件创建镜像</span><br><span class="line">  ls          查看镜像列表更多用法参考如下笔记</span><br><span class="line">  prune       删除悬虚（dangling）镜像，添加-a参数则会移除没有被使用的镜像</span><br><span class="line">  pull        用于从镜像仓库拉取镜像</span><br><span class="line">  push        用于将镜像推送到Docker注册服务器</span><br><span class="line">  rm          删除一个或多个镜像</span><br><span class="line">  save        用于将镜像保存为tar包文件，-o、--output=&quot;&quot; 设置保存的文件名</span><br><span class="line">  tag         用于设置及修改镜像标签</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看所有镜像</span><br><span class="line">docker images -a</span><br><span class="line">#查看镜像摘要，用于区分同名镜像，可使用摘要信息拉取镜像保证准确唯一</span><br><span class="line">docker image ls --digests ubuntu</span><br><span class="line">#根据镜像nameID删除镜像，删除前首先停止镜像，并确保无其他依赖次镜像层的镜像</span><br><span class="line">docker image rm $&#123;ID&#125;</span><br><span class="line">#批量删除镜像-f参数为强制删除</span><br><span class="line">docker image rm $(docker image ls -q) -f</span><br><span class="line">#拉取镜像</span><br><span class="line">docker image pull &lt;repository&gt;:&lt;tag&gt;</span><br><span class="line">docker image pull nginx:1.19.0</span><br><span class="line">docker image pull richarvey/nginx-php-fpm:last</span><br><span class="line">#拉取nigelpoulton/tu-demo下所有镜像</span><br><span class="line">docker image pull -a nigelpoulton/tu-demo</span><br><span class="line">#查看悬虚（dangling）镜像</span><br><span class="line">docker image ls --filter dangling=true</span><br><span class="line">#删除悬虚（dangling）镜像，添加-a参数则会移除没有被使用的镜像</span><br><span class="line">docker image prune</span><br><span class="line">#使用reference过滤仅显示标签为latest的镜像</span><br><span class="line">docker image ls --filter=reference=&quot;*:1.19.0&quot;</span><br><span class="line">#使用--format参数通过GO模板对输出内容进行格式化，如下只返回镜像的大小属性</span><br><span class="line">docker image ls --format &quot;&#123;&#123;.Size&#125;&#125;&quot;</span><br><span class="line">#只显示仓库、标签和大小信息</span><br><span class="line">docker image ls --format &quot;&#123;&#123;.Repository&#125;&#125;: &#123;&#123;.Tag&#125;&#125;: &#123;&#123;.Size&#125;&#125;&quot;</span><br><span class="line">#通过CLI的方式搜索docker hub，通过NAME字段进行内容匹配</span><br><span class="line">docker search nginx</span><br><span class="line">#使用--filter &quot;is-official=true&quot;参数，使命令返回内容只显示官方镜像</span><br><span class="line">docker search nginx --filter &quot;is-official=true&quot;</span><br><span class="line">#使用--filter &quot;is-automated=true&quot;参数，只显示自动创建的仓库</span><br><span class="line">docker search nginx --filter &quot;is-automated=true&quot;</span><br><span class="line">#使用--limit增加放回内容的行数，最多为100行</span><br><span class="line">docker search nginx --limit 100</span><br><span class="line">#查看镜像分层内容，包括镜像层数据和元数据</span><br><span class="line">docker image inspect nginx:1.19.0</span><br><span class="line">#查看镜像的构建历史命令记录</span><br><span class="line">docker image history nginx:1.19.0</span><br><span class="line">#显示完整构建命令</span><br><span class="line">docker history --format &#123;&#123;.CreatedBy&#125;&#125; --no-trunc=true  nginx:latest</span><br><span class="line">#修改镜像tag和name</span><br><span class="line">docker image tag cd645f5a4769 portainer/portainer:1.24.0</span><br><span class="line"></span><br><span class="line">#区别，可以依据具体使用场景来选择命令，若是只想备份images，使用save、load即可，若是在启动容器后，容器内容有变化，需要备份，则使用export、import</span><br><span class="line">#使用load命令导入镜像-i指表示从文件输入。会成功导入镜像及相关元数据，包括tag信息</span><br><span class="line">docker load -i jms_core.tar</span><br><span class="line">#使用save命令导出镜像，其中-o和&gt;表示输出到文件，nginx.tar为目标文件，nginx:latest是源镜像名（name:tag）</span><br><span class="line">docker save -o jms_nginx.tar jumpserver/jms_nginx:v2.4.3</span><br><span class="line">#其中-o表示输出到文件，nginx-test.tar为目标文件，nginx-test是源容器名（name）</span><br><span class="line">docker export -o nginx-test.tar nginx-test</span><br><span class="line">#使用import导入镜像</span><br><span class="line">docker import nginx-test.tar nginx:imp</span><br></pre></td></tr></table></figure>
<h2 id="3、容器操作命令总结"><a href="#3、容器操作命令总结" class="headerlink" title="3、容器操作命令总结"></a>3、容器操作命令总结</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@docker ~]# docker container --help</span><br><span class="line">Usage:	docker container COMMAND</span><br><span class="line">Manage containers</span><br><span class="line">Commands:</span><br><span class="line">  attach      用于将标准输入（stdin）与标准输出（stdout）连接到正在运行的容器</span><br><span class="line">  commit      用于从容器的修改项提交新镜像版本到本地</span><br><span class="line">  cp          用于将容器的目录或文件复制的到主机。若将cp命令中的路径设置为目录，则将该目录下的所有内容复制到主机</span><br><span class="line">  create      使用指定的镜像创建容器。与run命令不同，使用create命令只能创建容器而并不启动</span><br><span class="line">  diff        用于检查容器文件系统的修改</span><br><span class="line">  exec        用于从外部运行容器内部的命令</span><br><span class="line">  export      将用于将容器的文件系统导出为tar文件包</span><br><span class="line">  inspect     用于以JSON格式显示容器与镜像的详细信息</span><br><span class="line">  kill        用于向容器发送KILL信号，从而关闭容器（推荐使用更优雅温和的 docker stop 命令)</span><br><span class="line">  logs        令用于输出容器日志</span><br><span class="line">  ls          命令用于查看所有运行的容器 -a则查看所有容器</span><br><span class="line">  pause       命令用于暂停容器中正在运行的所有进程</span><br><span class="line">  port        命令用于查看容器的某个端口是否处于开放状态</span><br><span class="line">  prune       移除所有停止的容器</span><br><span class="line">  rename      对容器重命名</span><br><span class="line">  restart     使容器重启可加-t命令设置重启等待时间</span><br><span class="line">  rm          移除一个或多个容器，docker rm `docker ps -aq`删除所有容器</span><br><span class="line">  run         用于指定镜像创建容器，run命令在创建容器后会启动容器</span><br><span class="line">  start       启动一个或多个已停止的容器，参考rm命令用法</span><br><span class="line">  stats       显示容器资源使用统计信息的实时流</span><br><span class="line">  stop        停止停止一个或多个正在运行的容器，参考rm命令用法</span><br><span class="line">  top         顶部显示容器正在运行的进程</span><br><span class="line">  unpause     取消暂停取消暂停一个或多个容器中的所有进程</span><br><span class="line">  update      更新一个或多个容器的更新配置</span><br><span class="line">  wait        等待容器终止，然后输出 Exit Code</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#用于列出所有在UP的容器，使用-a则可以看到处于exited的容器</span><br><span class="line">docker container ls</span><br><span class="line">#用于查看单独容器的日志</span><br><span class="line">docker logs $&#123;ID&#125;</span><br><span class="line">#新建nginx容器，后台运行+名称及端口</span><br><span class="line">docker container run -d --name nginx-A -p 80:80 nginx:1.19.0</span><br><span class="line">#构建一个退出终端则自动删除的容器进行测试</span><br><span class="line">docker container run --rm -p 80:80 nginx:1.19.0</span><br><span class="line">#连接至运行的容器</span><br><span class="line">docker exec -it $ID /bin/bash</span><br><span class="line">#组合键退出当前容器</span><br><span class="line">CTRL+PQ</span><br><span class="line">#查看当前运行容器</span><br><span class="line">docker ps</span><br><span class="line">#查看所有容器，包含未运行的容器</span><br><span class="line">docker ps -a</span><br><span class="line">#停止容器运行</span><br><span class="line">docker container stop $&#123;ID&#125;</span><br><span class="line">#删除已停止的容器</span><br><span class="line">docker container rm $&#123;ID&#125;</span><br><span class="line">#批量删除容器</span><br><span class="line">docker container rm $(docker container ls -aq) -f</span><br><span class="line">#参数--restart always，当daemon重启或服务器重启后，停止的容器也会跟着被启动</span><br><span class="line">docker container run -d --name nginx-A --restart always -p 80:80 nginx:1.19.0</span><br><span class="line">#根据运行的容器保存全新的镜像到本地-a创建者，-m日志信息，-p创建镜像是暂停容器</span><br><span class="line">docker commit -a lisir -m &quot;tools-devle&quot; -p 911a04c39577 centos_devel:20200726</span><br><span class="line">#运行一个mysql5.7容器实例</span><br><span class="line">docker container run -d --name Mysql-B --restart always -p 32805:3306 -e PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin -e GOSU_VERSION=1.12 -e MYSQL_MAJOR=8.0 -e MYSQL_VERSION=8.0.21-1debian10 -e MYSQL_ROOT_PASSWORD=qaz000123 mysql:latest</span><br><span class="line">#运行一个portaine容器实例</span><br><span class="line">docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br><span class="line">#运行一个centos6.7容器实例</span><br><span class="line">docker container run -it -d --name Centos6.7-A-devel --restart always -v /soft:/soft centos_devel:20200726 /bin/bash</span><br><span class="line">#运行一个nginx1.12.1容器实例</span><br><span class="line">docker container run -d --name nginx-lisir -p 83:80 --restart always nginx112:latest</span><br><span class="line">#-i -t -d参数详解</span><br><span class="line">-i 以交互模式运行容器，通常与 -t 同时使用；</span><br><span class="line">-t 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="line">-d 后台运行容器，并返回容器ID；</span><br><span class="line">#使用root用户登录容器</span><br><span class="line">docker exec -ti -u root 4650e8d1bcca bash</span><br></pre></td></tr></table></figure>
<h2 id="3、卷操作命令总结"><a href="#3、卷操作命令总结" class="headerlink" title="3、卷操作命令总结"></a>3、卷操作命令总结</h2><ul>
<li><p>挂载（bind mount）</p>
<blockquote>
<p>bind mount自docker早期便开始为人们使用了，用于将host机器的目录mount到container中。但是bind mount在不同的宿主机系统时不可移植的，比如Windows和Linux的目录结构是不一样的，bind mount所指向的host目录也不能一样。这也是为什么bind mount不能出现在Dockerfile中的原因，因为这样Dockerfile就不可移植了；</p>
</blockquote>
</li>
<li><p>卷（volume）</p>
<blockquote>
<p>volume也是绕过container的文件系统，直接将数据写到host机器上，只是volume是被docker管理的，docker下所有的volume都在host机器上的指定目录下/var/lib/docker/volumes；</p>
</blockquote>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看所有卷</span><br><span class="line">docker volume ls</span><br><span class="line">#创建卷</span><br><span class="line">docker volume create</span><br><span class="line">#查看卷详细信息</span><br><span class="line">docker volume inspect $&#123;VONAME&#125;</span><br><span class="line">#删除未被容器或副本使用的全部卷，谨慎使用</span><br><span class="line">docker volume prune</span><br><span class="line">#删除未被使用的指定卷</span><br><span class="line">docker volume rm</span><br><span class="line">#查看容器挂载的卷或本地目录</span><br><span class="line">docker inspect 2bfe5c73244b | grep Mounts -A 20</span><br><span class="line">#创建卷并进行挂载的案列</span><br><span class="line">[root@docker _data]# docker volume create hello</span><br><span class="line">[root@docker _data]# docker container run -it -d --name Centos6.7-A --restart always -v hello:/soft centos:centos6.7 /bin/bash</span><br><span class="line">cde91c0a176a0c2f6e5792fec16b499e083f3272f759d3a8be2b93df2d9c3e07</span><br><span class="line">[root@docker _data]# docker inspect cde91c0a176a | grep Mounts -A 20</span><br><span class="line">[root@cde91c0a176a soft]# touch 1</span><br><span class="line">[root@cde91c0a176a soft]# pwd</span><br><span class="line">/soft</span><br><span class="line">[root@cde91c0a176a soft]# exit</span><br><span class="line">[root@docker _data]# pwd</span><br><span class="line">/var/lib/docker/volumes/hello/_data</span><br><span class="line">[root@docker _data]# ls</span><br><span class="line">1</span><br><span class="line">[root@docker ~]# docker inspect cde91c0a176a | grep Mounts -A 20</span><br><span class="line">&quot;Mounts&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">        &quot;Name&quot;: &quot;hello&quot;,</span><br><span class="line">        &quot;Source&quot;: &quot;/var/lib/docker/volumes/hello/_data&quot;,</span><br><span class="line">        &quot;Destination&quot;: &quot;/soft&quot;,</span><br><span class="line">        &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">        &quot;Mode&quot;: &quot;z&quot;,</span><br><span class="line">        &quot;RW&quot;: true,</span><br><span class="line">        &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="4、docker-compose操作命令总结"><a href="#4、docker-compose操作命令总结" class="headerlink" title="4、docker-compose操作命令总结"></a>4、docker-compose操作命令总结</h2><ul>
<li>注意：以下操作命令需在有<code>docker-compose.yml</code>配置文件的目录下执行，否则需指定配置文件<code>-f</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建并启动服务</span><br><span class="line">docker-compose up</span><br><span class="line">#日志分离模式启动</span><br><span class="line">docker-compose up -d</span><br><span class="line">#停止服务</span><br><span class="line">docker-compose stop</span><br><span class="line">#启动已存在的服务</span><br><span class="line">docker-compose start</span><br><span class="line">#重启服务已存在的服务</span><br><span class="line">docker-compose restart</span><br><span class="line">#列出镜像</span><br><span class="line">docker-compose images</span><br><span class="line">#查看日志</span><br><span class="line">docker-compose logs</span><br><span class="line">docker-compose logs -f -t</span><br><span class="line">#查看进程</span><br><span class="line">docker-compose top</span><br><span class="line">#列出compose应用中各个容器的状态、命令以及网络端口</span><br><span class="line">docker-compose ps</span><br><span class="line">#查看compose版本</span><br><span class="line">docker-compose version</span><br><span class="line">#暂停服务</span><br><span class="line">docker-compose pause</span><br><span class="line">#终止暂停服务</span><br><span class="line">docker-compose unpause</span><br><span class="line">#查看配置</span><br><span class="line">docker-compose config </span><br><span class="line">#用于停止并删除运行中的应用，它会删除容器和网络，不会删除镜像和卷</span><br><span class="line">docker-compose down</span><br><span class="line">#用于删除已停止的应用，它会删除容器和网络，不会删除镜像和卷</span><br><span class="line">docker-compose rm</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>ECK-从Kafka实时抓取JAVA日志</title>
    <url>/2021/02/26/ECK-%E4%BB%8EKafka%E5%AE%9E%E6%97%B6%E6%8A%93%E5%8F%96JAVA%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h1 id="ECK-从Kafka实时抓取JAVA日志"><a href="#ECK-从Kafka实时抓取JAVA日志" class="headerlink" title="ECK-从Kafka实时抓取JAVA日志"></a>ECK-从Kafka实时抓取JAVA日志</h1><h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><blockquote>
<p>本篇博客完整的记录了zk及kafka完整安装过程，并协同开发将java应用日志，直接输出至kafka集群，随后通过logstash的kafka input插件进行主题消费，并通过正则进行数据结构化，最后输出到es集群（es集群通过k8s采用eck模式进行安装），数据结果则使用kibaka进行展示，默认关闭selinux及防火墙，系统优化已提前做完；</p>
</blockquote>
<h2 id="2、部署环境介绍"><a href="#2、部署环境介绍" class="headerlink" title="2、部署环境介绍"></a>2、部署环境介绍</h2><table>
<thead>
<tr>
<th>平台</th>
<th>IP</th>
<th>主机名</th>
<th>ECK版本</th>
<th>ZK版本</th>
<th>Kafka版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS Linux release 7.7.1908</td>
<td>192.168.6.10</td>
<td>DEVOPSSRV01</td>
<td>ELK:7.10.1</td>
<td>3.6.2</td>
<td>2.5.0</td>
<td></td>
</tr>
<tr>
<td>CentOS Linux release 7.7.1908</td>
<td>192.168.6.39</td>
<td>DBSRV01</td>
<td>ELK:7.10.1</td>
<td>3.6.2</td>
<td>2.5.0</td>
<td></td>
</tr>
<tr>
<td>CentOS Linux release 7.7.1908</td>
<td>192.168.6.45</td>
<td>TSSRV02</td>
<td>ELK:7.10.1</td>
<td>3.6.2</td>
<td>2.5.0</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="3、ZooKeeper集群安装与配置"><a href="#3、ZooKeeper集群安装与配置" class="headerlink" title="3、ZooKeeper集群安装与配置"></a>3、ZooKeeper集群安装与配置</h2><h3 id="3-1、安装并配置JDK1-8环境"><a href="#3-1、安装并配置JDK1-8环境" class="headerlink" title="3.1、安装并配置JDK1.8环境"></a>3.1、安装并配置JDK1.8环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#安装jdk1.8.0_261</span><br><span class="line">[root@DEVOPSSRV01 java]# pwd</span><br><span class="line">/opt/java</span><br><span class="line">[root@DEVOPSSRV01 java]# ls</span><br><span class="line">jdk1.8.0_261  jdk-8u261-linux-x64.tar.gz</span><br><span class="line">#配置jdk、zk、kafka环境变量</span><br><span class="line">[root@DEVOPSSRV01 ~]# cat /etc/profile</span><br><span class="line"># /etc/profile</span><br><span class="line"># Java Environment Config</span><br><span class="line">JAVA_HOME=/opt/java/jdk1.8.0_261</span><br><span class="line">JRE_HOME=/opt/java/jdk1.8.0_261/jre</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin:/usr/local/kafka-2.5.0/bin:/usr/local/zk-3.6.2/bin</span><br><span class="line">export PATH JAVA_HOME JRE_HOME CLASSPATH</span><br></pre></td></tr></table></figure>
<h3 id="3-2、下载并安装zk（免编译）"><a href="#3-2、下载并安装zk（免编译）" class="headerlink" title="3.2、下载并安装zk（免编译）"></a>3.2、下载并安装zk（免编译）</h3><blockquote>
<p>zk下载地址：<a href="https://zookeeper.apache.org/releases.html" target="_blank" rel="noopener">Apache ZooKeeper™ Releases</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#解压二进制安装文件至/usr/local</span><br><span class="line">[root@DEVOPSSRV01 soft]# tar xzvf apache-zookeeper-3.6.2-bin.tar.gz -C /usr/local/</span><br><span class="line">#切换至通用安装路径</span><br><span class="line">[root@DEVOPSSRV01 soft]# cd /usr/local/</span><br><span class="line">#修改zk文件夹名称</span><br><span class="line">[root@DEVOPSSRV01 local]# mv apache-zookeeper-3.6.2-bin /usr/local/zk-3.6.2</span><br></pre></td></tr></table></figure>
<h3 id="3-3、zk集群配置"><a href="#3-3、zk集群配置" class="headerlink" title="3.3、zk集群配置"></a>3.3、zk集群配置</h3><blockquote>
<p>提示：默认情况下只需要对dataDir进行配置，新增集群配置信息即可；</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@DEVOPSSRV01 ~]# cd /usr/local/zk-3.6.2/conf/</span><br><span class="line">[root@DEVOPSSRV01 conf]# cp zoo_sample.cfg zoo.cfg</span><br><span class="line">[root@DEVOPSSRV01 conf]# vim zoo.cfg</span><br><span class="line">#修改数据文件目录</span><br><span class="line">dataDir=/usr/local/zk-3.6.2/data</span><br><span class="line">...</span><br><span class="line">#调整集群配置</span><br><span class="line">server.0=192.168.6.10:2888:3888</span><br><span class="line">server.1=192.168.6.45:2888:3888</span><br><span class="line">server.2=192.168.6.39:2888:3888</span><br></pre></td></tr></table></figure>
<ul>
<li>附录：zoo.cfg配置文件详解</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 通信心跳数，Zookeeper服务器与客户端心跳时间，单位毫秒Zookeeper使用的基本时间，服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个tickTime时间就会发送一个心跳，时间单位为毫秒。 它用于心跳机制，并且设置最小的session超时时间为两倍心跳时间。（session的最小超时时间是2*tickTime）</span><br><span class="line">tickTime=2000</span><br><span class="line"># LF初始通信时限 集群中的Fo1lower跟随者服务器与Leader领导者服务器之间初始连接时能容忍的最多心跳数（tickTime的数量），用它来限定集群中的Zookeeper服务器连接到Leader的时限。</span><br><span class="line">initLimit=10</span><br><span class="line"># LF同步通信时限 集群中Leader与Fo1lower之间的最大响应时间单位，假如响应超过syncLimit*tickTime，Leader认为Fo11wer死掉，从服务器列表中删除Fo1lwer。</span><br><span class="line">syncLimit=5</span><br><span class="line"># 数据文件目录+数据持久化路径 主要用于保存Zookeeper中的数据。</span><br><span class="line">dataDir=/usr/local/zk-3.6.2/data</span><br><span class="line"># 客户端连接端口 监听客户端连接的端口。</span><br><span class="line">clientPort=2181</span><br><span class="line"># 客户端连接的最大连接数</span><br><span class="line">#maxClientCnxns=60</span><br><span class="line"># 要保留在dataDir中的快照数</span><br><span class="line">#autopurge.snapRetainCount=3</span><br><span class="line"># 清除任务间隔（小时）</span><br><span class="line"># 设置为“0”以禁用自动清除功能</span><br><span class="line">#autopurge.purgeInterval=1</span><br><span class="line">#server.x：x表示一个数字，这个数字表示第几个服务器，配置在myid的文件，3888：选举leader使用，2888：集群内机器通讯使用（Leader监听此端口）</span><br><span class="line">server.0=192.168.6.10:2888:3888</span><br><span class="line">server.1=192.168.6.45:2888:3888</span><br><span class="line">server.2=192.168.6.39:2888:3888</span><br></pre></td></tr></table></figure>
<h3 id="3-4、zk集群同步"><a href="#3-4、zk集群同步" class="headerlink" title="3.4、zk集群同步"></a>3.4、zk集群同步</h3><blockquote>
<p>提示：以上操作全部在三台服务器上进行，可使用scp进行快速多机拷贝，拷贝完成后，对<code>myid</code>进行修改，确保与<code>zoo.cfg</code>中<code>server.x</code>保持一直，并唯一；</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#DEVOPSSRV01主机的myid：0</span><br><span class="line">[root@DEVOPSSRV01 data]# cat myid </span><br><span class="line">0</span><br><span class="line">[root@DEVOPSSRV01 data]# pwd</span><br><span class="line">/usr/local/zk-3.6.2/data</span><br><span class="line"></span><br><span class="line">#TSSRV02主机的myid：1</span><br><span class="line">[root@TSSRV02 data]# cat myid </span><br><span class="line">1</span><br><span class="line">[root@TSSRV02 data]# pwd</span><br><span class="line">/usr/local/zk-3.6.2/data</span><br><span class="line"></span><br><span class="line">#DBSRV01主机的myid：2</span><br><span class="line">[root@DBSRV01 data]# cat myid </span><br><span class="line">2</span><br><span class="line">[root@DBSRV01 data]# pwd</span><br><span class="line">/usr/local/zk-3.6.2/data</span><br></pre></td></tr></table></figure>
<h3 id="3-5、zk集群管理"><a href="#3-5、zk集群管理" class="headerlink" title="3.5、zk集群管理"></a>3.5、zk集群管理</h3><blockquote>
<p>提示：配置jdk环境变量的时候，已经将zk和kafka的安装目录添加到了path中，可直接使用命令进行管理；</p>
</blockquote>
<h4 id="3-5-1、启动集群"><a href="#3-5-1、启动集群" class="headerlink" title="3.5.1、启动集群"></a>3.5.1、启动集群</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#三台机器共同执行zkServer.sh start</span><br><span class="line">#TSSRV02</span><br><span class="line">[root@TSSRV02 logs]# zkServer.sh start</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/zk-3.6.2/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">#DBSRV01</span><br><span class="line">[root@DBSRV01 logs]# zkServer.sh start</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/zk-3.6.2/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">#DEVOPSSRV01</span><br><span class="line">[root@DEVOPSSRV01 logs]# zkServer.sh start</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/zk-3.6.2/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure>
<h4 id="3-5-2、查看集群状态"><a href="#3-5-2、查看集群状态" class="headerlink" title="3.5.2、查看集群状态"></a>3.5.2、查看集群状态</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#三台机器共同执行zkServer.sh status</span><br><span class="line">#TSSRV02主机角色为follower</span><br><span class="line">[root@TSSRV02 logs]# zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/zk-3.6.2/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: false.</span><br><span class="line">Mode: follower</span><br><span class="line"></span><br><span class="line">#DBSRV01主机角色为leader，由于DBSRV01的myid是2，权重大，所以它是leader角色</span><br><span class="line">[root@DBSRV01 logs]# zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/zk-3.6.2/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: false.</span><br><span class="line">Mode: leader</span><br><span class="line"></span><br><span class="line">#DEVOPSSRV01主机角色为DEVOPSSRV01</span><br><span class="line">[root@DEVOPSSRV01 logs]# zkServer.sh status</span><br><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/zk-3.6.2/bin/../conf/zoo.cfg</span><br><span class="line">Client port found: 2181. Client address: localhost. Client SSL: false.</span><br><span class="line">Mode: follower</span><br></pre></td></tr></table></figure>
<ul>
<li>集群状态：<img src="http://static.zybuluo.com/a807257775/n8hjcab2779v8hxy6c6px8gg/image_1ev7300ac1b6f1ttk7ag1f451bd3p.png" alt="image_1ev7300ac1b6f1ttk7ag1f451bd3p.png-49.5kB"></li>
</ul>
<h4 id="3-5-3、停止与重启指令"><a href="#3-5-3、停止与重启指令" class="headerlink" title="3.5.3、停止与重启指令"></a>3.5.3、停止与重启指令</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#停止</span><br><span class="line">zkServer.sh stop</span><br><span class="line">#重启</span><br><span class="line">zkServer.sh restart</span><br></pre></td></tr></table></figure>
<h2 id="4、Kafka集群安装与配置"><a href="#4、Kafka集群安装与配置" class="headerlink" title="4、Kafka集群安装与配置"></a>4、Kafka集群安装与配置</h2><blockquote>
<p>提示：安装kafka集群前，确保已安装jdk1.8和zk集群，并配置好相关环境变量，请看第三章节；</p>
</blockquote>
<h3 id="4-1、下载并安装kafka（免编译）"><a href="#4-1、下载并安装kafka（免编译）" class="headerlink" title="4.1、下载并安装kafka（免编译）"></a>4.1、下载并安装kafka（免编译）</h3><blockquote>
<p>kafka下载地址：<a href="http://kafka.apache.org/downloads" target="_blank" rel="noopener">DOWNLOAD KAFKA</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#解压至指定目录</span><br><span class="line">[root@DEVOPSSRV01 soft]# tar xzvf kafka_2.12-2.5.0.tgz -C /usr/local/ &amp;&amp; cd /usr/local/</span><br><span class="line">#重命名</span><br><span class="line">[root@DEVOPSSRV01 local]# mv kafka_2.12-2.5.0 /usr/local/kafka-2.5.0</span><br><span class="line">#切换到kafaka二进制资源目录</span><br><span class="line">[root@DEVOPSSRV01 soft]# cd kafka-2.5.0/</span><br><span class="line">#创建日志目录</span><br><span class="line">[root@DEVOPSSRV01 local]# mkdir -pv /var/log/kafka</span><br><span class="line">#文件结构</span><br><span class="line">[root@DEVOPSSRV01 kafka-2.5.0]# ls</span><br><span class="line">bin  config  libs  LICENSE  logs  NOTICE  site-docs</span><br><span class="line">[root@DEVOPSSRV01 kafka-2.5.0]# pwd</span><br><span class="line">/usr/local/kafka-2.5.0</span><br></pre></td></tr></table></figure>
<h3 id="4-2、kafka集群配置"><a href="#4-2、kafka集群配置" class="headerlink" title="4.2、kafka集群配置"></a>4.2、kafka集群配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#切换至kafka配置文件目录</span><br><span class="line">[root@DEVOPSSRV01 ~]# cd /usr/local/kafka-2.5.0/config/</span><br><span class="line">#对broker的配置文件server.properties进行调整</span><br><span class="line">[root@DEVOPSSRV01 config]# vim server.properties</span><br><span class="line">broker.id=0</span><br><span class="line">listeners=PLAINTEXT://192.168.6.10:9092</span><br><span class="line">log.dirs=/var/log/kafka</span><br><span class="line">zookeeper.connect=192.168.6.10:2181,192.168.6.39:2181,192.168.6.45:2181</span><br></pre></td></tr></table></figure>
<ul>
<li>附录：broker的配置文件<code>server.properties</code>详解<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">############################# Server Basics #############################</span><br><span class="line">#每一个broker在集群中的唯一标示，要求是正数</span><br><span class="line">broker.id=0</span><br><span class="line"></span><br><span class="line">############################# Socket Server Settings #############################</span><br><span class="line">#服务端监听地址，可采用0.0.0.0，但如果服务器上部署了docker集群，建议绑定固定网卡IP</span><br><span class="line">listeners=PLAINTEXT://192.168.6.10:9092</span><br><span class="line"></span><br><span class="line">#处理网络请求的线程数量，也就是接收消息的线程数。</span><br><span class="line">#接收线程会将接收到的消息放到内存中，然后再从内存中写入磁盘</span><br><span class="line">num.network.threads=3</span><br><span class="line"></span><br><span class="line">#消息从内存中写入磁盘是时候使用的线程数量。</span><br><span class="line">#用来处理磁盘IO的线程数量</span><br><span class="line">num.io.threads=8</span><br><span class="line"></span><br><span class="line">#发送套接字的缓冲区大小</span><br><span class="line">socket.send.buffer.bytes=102400</span><br><span class="line"></span><br><span class="line">#接受套接字的缓冲区大小</span><br><span class="line">socket.receive.buffer.bytes=102400</span><br><span class="line"></span><br><span class="line">#请求套接字的缓冲区大小</span><br><span class="line">socket.request.max.bytes=104857600</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">############################# Log Basics #############################</span><br><span class="line">#kafka运行日志存放的路径</span><br><span class="line">log.dirs=/var/log/kafka</span><br><span class="line"></span><br><span class="line">#topic在当前broker上的分片个数</span><br><span class="line">num.partitions=1</span><br><span class="line"></span><br><span class="line">#我们知道segment文件默认会被保留7天的时间，超时的话就</span><br><span class="line">#会被清理，那么清理这件事情就需要有一些线程来做。这里就是</span><br><span class="line">#用来设置恢复和清理data下数据的线程数量</span><br><span class="line">num.recovery.threads.per.data.dir=1</span><br><span class="line"></span><br><span class="line">############################# Internal Topic Settings  #############################</span><br><span class="line"># The replication factor for the group metadata internal topics &quot;__consumer_offsets&quot; and &quot;__transaction_state&quot;</span><br><span class="line"># For anything other than development testing, a value greater than 1 is recommended to ensure availability such as 3.</span><br><span class="line">offsets.topic.replication.factor=1</span><br><span class="line">transaction.state.log.replication.factor=1</span><br><span class="line">transaction.state.log.min.isr=1</span><br><span class="line"></span><br><span class="line">############################# Log Flush Policy #############################</span><br><span class="line">#上面我们说过接收线程会将接收到的消息放到内存中，然后再从内存</span><br><span class="line">#写到磁盘上，那么什么时候将消息从内存中写入磁盘，就有一个</span><br><span class="line">#时间限制（时间阈值）和一个数量限制（数量阈值），这里设置的是</span><br><span class="line">#数量阈值，下一个参数设置的则是时间阈值。</span><br><span class="line">#partion buffer中，消息的条数达到阈值，将触发flush到磁盘。</span><br><span class="line">#log.flush.interval.messages=10000</span><br><span class="line"></span><br><span class="line">#消息buffer的时间，达到阈值，将触发将消息从内存flush到磁盘，</span><br><span class="line">#单位是毫秒。</span><br><span class="line">#log.flush.interval.ms=1000</span><br><span class="line"></span><br><span class="line">############################# Log Retention Policy #############################</span><br><span class="line">#segment文件保留的最长时间，默认保留7天（168小时），</span><br><span class="line">#超时将被删除，也就是说7天之前的数据将被清理掉。</span><br><span class="line">log.retention.hours=720</span><br><span class="line"></span><br><span class="line">#topic每个分区的最大文件大小，一个topic的大小限制 = 分区数*log.retention.bytes 。-1没有大小限制</span><br><span class="line">#log.retention.bytes和log.retention.minutes任意一个达到要求，都会执行删除，会被topic创建时的指定参数覆盖</span><br><span class="line">#log.retention.bytes=1073741824</span><br><span class="line"></span><br><span class="line">#日志文件中每个segment的大小，默认为1G</span><br><span class="line">log.segment.bytes=1073741824</span><br><span class="line"></span><br><span class="line">#上面的参数设置了每一个segment文件的大小是1G，那么</span><br><span class="line">#就需要有一个东西去定期检查segment文件有没有达到1G，</span><br><span class="line">#多长时间去检查一次，就需要设置一个周期性检查文件大小</span><br><span class="line">#的时间（单位是毫秒）</span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line"></span><br><span class="line">############################# Zookeeper #############################</span><br><span class="line">#zookeeper集群的地址，可以是多个，多个之间用逗号分割</span><br><span class="line">#hostname1:port1,hostname2:port2,hostname3:port3</span><br><span class="line">zookeeper.connect=192.168.6.10:2181,192.168.6.39:2181,192.168.6.45:2181</span><br><span class="line"></span><br><span class="line">#zookeeper链接超时时间</span><br><span class="line">#单位是毫秒。</span><br><span class="line">zookeeper.connection.timeout.ms=18000</span><br><span class="line"></span><br><span class="line">############################# Group Coordinator Settings #############################</span><br><span class="line">#当Consumer Group新增或减少Consumer时，重新分配Topic Partition的延迟时间</span><br><span class="line">group.initial.rebalance.delay.ms=0</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4-2、kafka集群同步"><a href="#4-2、kafka集群同步" class="headerlink" title="4.2、kafka集群同步"></a>4.2、kafka集群同步</h3><blockquote>
<p>提示：以上操作全部在三台服务器上进行，可使用scp进行快速多机拷贝，拷贝完成后，对<code>broker.id</code>、<code>listeners</code>、<code>log.dirs</code>、<code>zookeeper.connect</code>关键参数进行修改；</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#修改完成后切换至配置文件目录</span><br><span class="line">[root@TSSRV02 ~]# cd /usr/local/kafka-2.5.0/config</span><br><span class="line">#使用grep命令进行配置过滤和比对，如下图</span><br><span class="line">[root@TSSRV02 config]# egrep -v &apos;^#|^$&apos; server.properties</span><br></pre></td></tr></table></figure>
<ul>
<li>配置文件比对：<img src="http://static.zybuluo.com/a807257775/um0dbgndmhh7ygmotxs096j1/image_1ev8r1cpd1f2apm73dt1cbstbs9.png" alt="image_1ev8r1cpd1f2apm73dt1cbstbs9.png-71kB"></li>
</ul>
<h3 id="4-3、kafka集群管理"><a href="#4-3、kafka集群管理" class="headerlink" title="4.3、kafka集群管理"></a>4.3、kafka集群管理</h3><blockquote>
<p>提示：配置jdk环境变量的时候，已经将zk和kafka的安装目录添加到了path中，可直接使用命令进行管理，<br>启动kafka集群前必须先确保zk服务正常；</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#非交互式启动集群</span><br><span class="line">bin/kafka-server-start.sh -daemon config/server.properties</span><br><span class="line">#停止kafka集群</span><br><span class="line">bin/kafka-server-stop.sh stop</span><br><span class="line">#查看主题列表</span><br><span class="line">kafka-topics.sh --zookeeper 0.0.0.0:2181 --list</span><br><span class="line">#创建主题logStash，有3个分区，1个副本</span><br><span class="line">kafka-topics.sh --zookeeper 0.0.0.0:2181 --create --topic logStash --replication-factor 1 --partitions 3</span><br><span class="line">#查看指定topic详情</span><br><span class="line">kafka-topics.sh --zookeeper 0.0.0.0:2181 --describe --topic logStash</span><br><span class="line">#查看某一topic数据</span><br><span class="line">kafka-console-consumer.sh --bootstrap-server 0.0.0.0:9092 --topic logStash --from-beginning</span><br><span class="line">##查看当前消费者</span><br><span class="line">kafka-consumer-groups.sh --bootstrap-server 0.0.0.0:9092 --list</span><br><span class="line">##查看指定消费者消费信息，其中依次展示group名称、消费的topic名称、partition id、consumer group最后一次提交的offset、最后提交的生产消息offset、消费offset与生产offset之间的差值、当前消费topic-partition的group成员id(不一定包含hostname)</span><br><span class="line">kafka-consumer-groups.sh --bootstrap-server 0.0.0.0:9092 --describe --group logstashSZZT</span><br></pre></td></tr></table></figure>
<h2 id="5、Logstash的安装与配置"><a href="#5、Logstash的安装与配置" class="headerlink" title="5、Logstash的安装与配置"></a>5、Logstash的安装与配置</h2><blockquote>
<p>本篇仅记录抓取java日志的全过程，Logstash的安装请参考：<a href="http://www.lisirlife.cn/2019/10/30/ELFK-%E5%AE%9E%E6%97%B6%E6%8A%93%E5%8F%96HAPROXY%E6%97%A5%E5%BF%97/">ELFK-实时抓取HAPROXY日志</a></p>
</blockquote>
<h3 id="5-1、java样本数据分析与正则编写"><a href="#5-1、java样本数据分析与正则编写" class="headerlink" title="5.1、java样本数据分析与正则编写"></a>5.1、java样本数据分析与正则编写</h3><ul>
<li><p>样本数据：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gateway:10.244.1.207:10000 2021-01-27 16:15:12.845 INFO main c.a.n.c.c.i.CacheData.addListener [fixed-nacos-headless.nacos-production.svc_8848-a8522218-4630-4adc-ab9f-5bb725fb9866] [a dd-listener] ok, tenant=a8522218-4630-4adc-ab9f-5bb725fb9866, dataId=router.json, group=DEFAULT_GROUP, cnt=1</span><br></pre></td></tr></table></figure>
</li>
<li><p>正则分拆：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">APP [a-zA-Z]+-?[a-zA-Z]+</span><br><span class="line">IP (?&lt;![0-9])(?:(?:[0-1]?[0-9]&#123;1,2&#125;|2[0-4][0-9]|25[0-5])[.](?:[0-1]?[0-9]&#123;1,2&#125;|2[0-4][0-9]|25[0-5])[.](?:[0-1]?[0-9]&#123;1,2&#125;|2[0-4][0-9]|25[0-5])[.](?:[0-1]?[0-9]&#123;1,2&#125;|2[0-4][0-9]|25[0-5]))(?![0-9])</span><br><span class="line">PORT \b(?:[1-9][0-9]*)\b</span><br><span class="line">TOMCAT_DATESTAMP 20(?&gt;\d\d)&#123;1,2&#125;-(?:0?[1-9]|1[0-2])-(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9]) (?:2[0123]|[01]?[0-9]):?(?:[0-5][0-9])(?::?(?:(?:[0-5]?[0-9]|60)(?:[:.,][0-9]+)?))</span><br><span class="line">LOG_LEVEL ([Aa]lert|ALERT|[Tt]race|TRACE|[Dd]ebug|DEBUG|[Nn]otice|NOTICE|[Ii]nfo|INFO|[Ww]arn?(?:ing)?|WARN?(?:ING)?|[Ee]rr?(?:or)?|ERR?(?:OR)?|[Cc]rit?(?:ical)?|CRIT?(?:ICAL)?|[Ff]atal|FATAL|[Ss]evere|SEVERE|EMERG(?:ENCY)?|[Ee]merg(?:ency)?)\s?</span><br><span class="line">THREAD \S+</span><br></pre></td></tr></table></figure>
</li>
<li><p>Kibana Grok Debug：</p>
</li>
</ul>
<blockquote>
<p>Simulate后，如无报错则表示规则生效，数据结构化详情见<code>Structured Data</code>一栏</p>
</blockquote>
<p><img src="http://static.zybuluo.com/a807257775/rq59e89ecw5weq56ah5mi4hf/image_1ev9b36kklc9l0a1ruk71m99f13.png" alt="image_1ev9b36kklc9l0a1ruk71m99f13.png-83.6kB"></p>
<h3 id="5-2、导入java-patterns规则库"><a href="#5-2、导入java-patterns规则库" class="headerlink" title="5.2、导入java_patterns规则库"></a>5.2、导入java_patterns规则库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@DEVOPSSRV01 logstash]# cd /usr/share/logstash/patterns/</span><br><span class="line">[root@DEVOPSSRV01 patterns]# cat java_patterns </span><br><span class="line">#JAVA LOGS PATTTERNS</span><br><span class="line">APP [a-zA-Z]+-?[a-zA-Z]+</span><br><span class="line">IP (?&lt;![0-9])(?:(?:[0-1]?[0-9]&#123;1,2&#125;|2[0-4][0-9]|25[0-5])[.](?:[0-1]?[0-9]&#123;1,2&#125;|2[0-4][0-9]|25[0-5])[.](?:[0-1]?[0-9]&#123;1,2&#125;|2[0-4][0-9]|25[0-5])[.](?:[0-1]?[0-9]&#123;1,2&#125;|2[0-4][0-9]|25[0-5]))(?![0-9])</span><br><span class="line">PORT \b(?:[1-9][0-9]*)\b</span><br><span class="line">TOMCAT_DATESTAMP 20(?&gt;\d\d)&#123;1,2&#125;-(?:0?[1-9]|1[0-2])-(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9]) (?:2[0123]|[01]?[0-9]):?(?:[0-5][0-9])(?::?(?:(?:[0-5]?[0-9]|60)(?:[:.,][0-9]+)?))</span><br><span class="line">LOG_LEVEL ([Aa]lert|ALERT|[Tt]race|TRACE|[Dd]ebug|DEBUG|[Nn]otice|NOTICE|[Ii]nfo|INFO|[Ww]arn?(?:ing)?|WARN?(?:ING)?|[Ee]rr?(?:or)?|ERR?(?:OR)?|[Cc]rit?(?:ical)?|CRIT?(?:ICAL)?|[Ff]atal|FATAL|[Ss]evere|SEVERE|EMERG(?:ENCY)?|[Ee]merg(?:ency)?)\s?</span><br><span class="line">THREAD \S+</span><br><span class="line">MESSAGE .*</span><br></pre></td></tr></table></figure>
<h3 id="5-3、导入java-log-conf配置文件"><a href="#5-3、导入java-log-conf配置文件" class="headerlink" title="5.3、导入java_log.conf配置文件"></a>5.3、导入java_log.conf配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@DEVOPSSRV01 conf.d]# pwd</span><br><span class="line">/etc/logstash/conf.d</span><br><span class="line">[root@DEVOPSSRV01 conf.d]# cat java_log.conf</span><br><span class="line">input &#123;</span><br><span class="line">  kafka &#123;</span><br><span class="line">    bootstrap_servers =&gt; &quot;192.168.6.10:9092,192.168.6.39:9092,192.168.6.45:9092&quot;</span><br><span class="line">    topics =&gt; [&quot;logStash&quot;]</span><br><span class="line">    consumer_threads =&gt; 3</span><br><span class="line">    decorate_events =&gt; true</span><br><span class="line">    auto_offset_reset =&gt; &quot;earliest&quot;</span><br><span class="line">    client_id =&gt; &quot;logstash610&quot;</span><br><span class="line">    group_id =&gt; &quot;logstashSZZT&quot;</span><br><span class="line">    value_deserializer_class =&gt; &quot;org.apache.kafka.common.serialization.ByteArrayDeserializer&quot;</span><br><span class="line">    key_deserializer_class =&gt; &quot;org.apache.kafka.common.serialization.ByteArrayDeserializer&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line">    patterns_dir =&gt; [&quot;/usr/share/logstash/patterns&quot;]</span><br><span class="line">    match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;APP:app&#125;:%&#123;IP:ip&#125;:%&#123;PORT:port&#125; %&#123;TOMCAT_DATESTAMP:tomcat_datestamp&#125; %&#123;LOG_LEVEL:log_level&#125; %&#123;THREAD:thread&#125; %&#123;MESSAGE:message&#125;&quot; &#125;</span><br><span class="line">    overwrite =&gt; [ &quot;message&quot; ]</span><br><span class="line">  &#125;</span><br><span class="line">  date &#123;</span><br><span class="line">    match =&gt; [ &quot;tomcat_datestamp&quot;, &quot;yyyy-MM-dd HH:mm:ss.SSS&quot; ]</span><br><span class="line">    target =&gt; &quot;@timestamp&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  ruby &#123;</span><br><span class="line">    code =&gt; &quot;event.set(&apos;timestamp&apos;, event.get(&apos;@timestamp&apos;).time.localtime + 8*60*60)&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  mutate &#123;</span><br><span class="line">    convert =&gt; [&quot;timestamp&quot;, &quot;string&quot;]</span><br><span class="line">    gsub =&gt; [ &quot;message&quot;, &quot;\r&quot;, &quot;&quot; ]</span><br><span class="line">    gsub =&gt; [&quot;timestamp&quot;, &quot;T([\S\s]*?)Z&quot;, &quot;&quot;]</span><br><span class="line">    gsub =&gt; [&quot;timestamp&quot;, &quot;-&quot;, &quot;.&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;https://192.168.6.10:30679&quot;] </span><br><span class="line">    ssl =&gt; true</span><br><span class="line">    cacert =&gt; &quot;/data/share/elastic-pv/http-certs/tls.crt&quot;</span><br><span class="line">    user =&gt; &quot;elastic&quot;</span><br><span class="line">    index =&gt; &quot;unifed-auth-center-%&#123;timestamp&#125;&quot;</span><br><span class="line">    password =&gt; &quot;fWX7545K62Kr40Q0KOmT2GlD&quot;</span><br><span class="line">    ssl_certificate_verification =&gt; false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-4、重启logstash"><a href="#5-4、重启logstash" class="headerlink" title="5.4、重启logstash"></a>5.4、重启logstash</h3><blockquote>
<p>提示：日志如无ERROR级别的日志，表示数据已开始向ES导入，随后请登录kibana查看数据情况</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@DEVOPSSRV01 logstash]# systemctl restart logstash.serivce</span><br><span class="line">[root@DEVOPSSRV01 logstash]# tail -f /var/log/logstash/logstash-plain.log</span><br></pre></td></tr></table></figure>
<h3 id="5-5、登录kibana创建索引查看数据"><a href="#5-5、登录kibana创建索引查看数据" class="headerlink" title="5.5、登录kibana创建索引查看数据"></a>5.5、登录kibana创建索引查看数据</h3><ul>
<li><p>输入es用户名和密码<br><img src="http://static.zybuluo.com/a807257775/mjp4a3c0yj85s7r6h4jx42dn/image_1ev92mvs176um508ov1adjb819.png" alt="image_1ev92mvs176um508ov1adjb819.png-64.8kB"></p>
</li>
<li><p>创建索引<br><img src="http://static.zybuluo.com/a807257775/14f74ts9olez1jqo8bqmdyaw/image_1ev9b7r6ldlafocrhh5mk1pb81g.png" alt="image_1ev9b7r6ldlafocrhh5mk1pb81g.png-133.5kB"></p>
</li>
<li><p>返回首页，打开Discover查看数据<br><img src="http://static.zybuluo.com/a807257775/mhmvtggs0vq58oficf4iea5n/image_1ev92p1451r3mph0a9sev1j05m.png" alt="image_1ev92p1451r3mph0a9sev1j05m.png-298.8kB"></p>
</li>
</ul>
<h2 id="6、其他资料"><a href="#6、其他资料" class="headerlink" title="6、其他资料"></a>6、其他资料</h2><ul>
<li>阿里资料：<a href="https://help.aliyun.com/document_detail/165190.html?spm=a2c4g.11186623.2.6.39ed7ddcQ7XOVl" target="_blank" rel="noopener">消息队列Kafka版可以作为Input接入Logstash</a></li>
<li>Logstash Reference：<a href="https://www.elastic.co/guide/en/logstash/7.10/index.html" target="_blank" rel="noopener">官方logstash资料</a></li>
</ul>
]]></content>
      <categories>
        <category>ELK文档</category>
      </categories>
      <tags>
        <tag>ELK文档</tag>
      </tags>
  </entry>
  <entry>
    <title>ELFK-实时抓取HAPROXY日志</title>
    <url>/2019/10/30/ELFK-%E5%AE%9E%E6%97%B6%E6%8A%93%E5%8F%96HAPROXY%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h1 id="ELFK-实时抓取HAPROXY日志"><a href="#ELFK-实时抓取HAPROXY日志" class="headerlink" title="ELFK-实时抓取HAPROXY日志"></a>ELFK-实时抓取HAPROXY日志</h1><h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><blockquote>
<p>本篇博客仅记录haproxy日志，通过logstash正则进行数据结构化，输出到elasticsearch中，最后通过kibaka进行展示的完整过程，EK的安装及配置方法，请参考：<a href="https://www.lisirlife.com/2019/05/06/ELK-Stack%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/" target="_blank" rel="noopener">ELK-Stack简介及安装手册</a></p>
</blockquote>
<h3 id="1-1、Logstash简介"><a href="#1-1、Logstash简介" class="headerlink" title="1.1、Logstash简介"></a>1.1、Logstash简介</h3><blockquote>
<p>Logstash 能够动态地采集、转换和传输数据，不受格式或复杂度的影响。利用 Grok 从非结构化数据中派生出结构，从 IP 地址解码出地理坐标，匿名化或排除敏感字段，并简化整体处理过程。数据往往以各种各样的形式，或分散或集中地存在于很多系统中。 Logstash 支持 各种输入选择 ，可以在同一时间从众多常用来源捕捉事件。能够以连续的流式传输方式，轻松地从您的日志、指标、Web 应用、数据存储以及各种 AWS 服务采集数据。如下图：</p>
</blockquote>
<ul>
<li>图一：<img src="http://static.zybuluo.com/a807257775/cgwm8hf3o9hkfvz5bj6a5sry/image_1dod7098hm0q1u501sr91lvhe7jp.png" alt="image_1dod7098hm0q1u501sr91lvhe7jp.png-41.8kB"></li>
</ul>
<h2 id="2、部署环境介绍"><a href="#2、部署环境介绍" class="headerlink" title="2、部署环境介绍"></a>2、部署环境介绍</h2><table>
<thead>
<tr>
<th>平台</th>
<th>IP</th>
<th>用途</th>
<th>E版本</th>
<th>L版本</th>
<th>K版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS 6.7 64Bit</td>
<td>192.168.1.241</td>
<td>ES+Cerebro+Kibana</td>
<td>6.7.0</td>
<td></td>
<td>6.7.0</td>
</tr>
<tr>
<td>CentOS 6.7 64Bit</td>
<td>192.168.1.43</td>
<td>Logstash</td>
<td></td>
<td>6.7.0</td>
</tr>
</tbody>
</table>
<h2 id="2、Logstash的安装与配置"><a href="#2、Logstash的安装与配置" class="headerlink" title="2、Logstash的安装与配置"></a>2、Logstash的安装与配置</h2><h3 id="2-1、配置EPEL源-K源（all-logstash）"><a href="#2-1、配置EPEL源-K源（all-logstash）" class="headerlink" title="2.1、配置EPEL源+K源（all_logstash）"></a>2.1、配置EPEL源+K源（all_logstash）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/Packages/e/epel-release-6-8.noarch.rpm</span><br><span class="line">[root@localhost ~]# yum install vim telnet wget nethogs htop glances dstat traceroute lrzsz goaccess ntpdate dos2unix openssl-devel tcpdump lrzsz fio nss curl -y</span><br><span class="line">[root@localhost ~]# yum groupinstall &quot;Development Tools&quot; -y</span><br><span class="line">[root@localhost ~]# vim /etc/yum.repos.d/logstash.repo</span><br><span class="line">[logstash-6.x]</span><br><span class="line">name=Elastic repository for 6.x packages</span><br><span class="line">baseurl=https://artifacts.elastic.co/packages/6.x/yum</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">enabled=1</span><br><span class="line">autorefresh=1</span><br><span class="line">type=rpm-md</span><br></pre></td></tr></table></figure>
<h3 id="2-2、安装JDK及配置系统环境（all-logstash）"><a href="#2-2、安装JDK及配置系统环境（all-logstash）" class="headerlink" title="2.2、安装JDK及配置系统环境（all_logstash）"></a>2.2、安装JDK及配置系统环境（all_logstash）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test1 ~]# echo &quot;* - nofile 65536&quot; &gt;&gt; /etc/security/limits.conf</span><br><span class="line">[root@test1 ~]# sed -i &quot;s/1024/65536/g&quot; /etc/security/limits.d/90-nproc.conf</span><br><span class="line">[root@test1 ~]# echo &quot;fs.file-max = 65536&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">[root@test1 ~]# wget http://192.168.1.231/soft/jdk-8u131-linux-x64.tar.gz</span><br><span class="line">[root@test1 ~]# mkdir -pv /usr/java/</span><br><span class="line">[root@test1 ~]# tar xzvf jdk-8u131-linux-x64.tar.gz -C /usr/java/</span><br><span class="line">[root@test1 ~]# ln -s /usr/java/jdk1.8.0_131/bin/java /usr/sbin/</span><br><span class="line">[root@test1 ~]# vim /etc/profile</span><br><span class="line">    JAVA_HOME=/usr/java/jdk1.8.0_131</span><br><span class="line">    export JAVA_HOME</span><br><span class="line">    CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">    export CLASSPATH</span><br><span class="line">    PATH=$JAVA_HOME/bin:$PATH:$HOME/bin:$JAVA_HOME/bin</span><br><span class="line">    export PATH</span><br><span class="line">    export LANG=zh_CN.UTF-8</span><br><span class="line">[root@test1 ~]# reboot</span><br></pre></td></tr></table></figure>
<h3 id="2-3、Logstash安装（all-logstash）"><a href="#2-3、Logstash安装（all-logstash）" class="headerlink" title="2.3、Logstash安装（all_logstash）"></a>2.3、Logstash安装（all_logstash）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test1 ~]# yum install logstash-6.7.0</span><br><span class="line">[root@test1 ~]# chkconfig logstash on</span><br><span class="line">[root@test1 ~]# rpm -ql logstash</span><br><span class="line">    #配置文件路径</span><br><span class="line">    /etc/logstash/conf.d</span><br><span class="line">    /etc/logstash/jvm.options</span><br><span class="line">    /etc/logstash/log4j2.properties</span><br><span class="line">    /etc/logstash/logstash-sample.conf</span><br><span class="line">    /etc/logstash/logstash.yml</span><br><span class="line">    /etc/logstash/pipelines.yml</span><br><span class="line">    /etc/logstash/startup.options</span><br><span class="line">    #缓存数据路径</span><br><span class="line">    /var/lib/logstash/</span><br><span class="line">    #主程序路径</span><br><span class="line">    /usr/share/logstash</span><br><span class="line">    #日志路径</span><br><span class="line">    /var/log/logstash</span><br></pre></td></tr></table></figure>
<h3 id="2-4、导入haproxy-patterns规则库"><a href="#2-4、导入haproxy-patterns规则库" class="headerlink" title="2.4、导入haproxy_patterns规则库"></a>2.4、导入haproxy_patterns规则库</h3><blockquote>
<p>此规则库来自官方GITHUB，详见：<a href="https://www.lisirlife.com/2019/05/06/ELK-GROK%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener">ELK_GROK学习笔记</a></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@atmpos patterns]# pwd</span><br><span class="line">/usr/share/logstash/patterns</span><br><span class="line">[root@atmpos patterns]# cat haproxy_patterns </span><br><span class="line">HAPROXYTIME (?!&lt;[0-9])%&#123;HOUR:haproxy_hour&#125;:%&#123;MINUTE:haproxy_minute&#125;(?::%&#123;SECOND:haproxy_second&#125;)(?![0-9])</span><br><span class="line">HAPROXYDATE %&#123;MONTHDAY:haproxy_monthday&#125;/%&#123;MONTH:haproxy_month&#125;/%&#123;YEAR:haproxy_year&#125;:%&#123;HAPROXYTIME:haproxy_time&#125;.%&#123;INT:haproxy_milliseconds&#125;</span><br><span class="line"></span><br><span class="line">HAPROXYCAPTUREDREQUESTHEADERS %&#123;DATA:captured_request_headers&#125;</span><br><span class="line">HAPROXYCAPTUREDRESPONSEHEADERS %&#123;DATA:captured_response_headers&#125;</span><br><span class="line"></span><br><span class="line"># parse a haproxy &apos;httplog&apos; line</span><br><span class="line">HAPROXYHTTPBASE %&#123;IP:client_ip&#125;:%&#123;INT:client_port&#125; \[%&#123;HAPROXYDATE:accept_date&#125;\] %&#123;NOTSPACE:frontend_name&#125; %&#123;NOTSPACE:backend_name&#125;/%&#123;NOTSPACE:server_name&#125; %&#123;INT:time_request&#125;/%&#123;INT:time_queue&#125;/%&#123;INT:time_backend_connect&#125;/%&#123;INT:time_backend_response&#125;/%&#123;NOTSPACE:time_duration&#125; %&#123;INT:http_status_code&#125; %&#123;NOTSPACE:bytes_read&#125; %&#123;DATA:captured_request_cookie&#125; %&#123;DATA:captured_response_cookie&#125; %&#123;NOTSPACE:termination_state&#125; %&#123;INT:actconn&#125;/%&#123;INT:feconn&#125;/%&#123;INT:beconn&#125;/%&#123;INT:srvconn&#125;/%&#123;NOTSPACE:retries&#125; %&#123;INT:srv_queue&#125;/%&#123;INT:backend_queue&#125; (\&#123;%&#123;HAPROXYCAPTUREDREQUESTHEADERS&#125;\&#125;)?( )?(\&#123;%&#123;HAPROXYCAPTUREDRESPONSEHEADERS&#125;\&#125;)?( )?&quot;(&lt;BADREQ&gt;|(%&#123;WORD:http_verb&#125; (%&#123;URIPROTO:http_proto&#125;://)?(?:%&#123;USER:http_user&#125;(?::[^@]*)?@)?(?:%&#123;URIHOST:http_host&#125;)?(?:%&#123;URIPATHPARAM:http_request&#125;)?( HTTP/%&#123;NUMBER:http_version&#125;)?))?&quot;?</span><br><span class="line"></span><br><span class="line">HAPROXYHTTP (?:%&#123;SYSLOGTIMESTAMP:syslog_timestamp&#125;|%&#123;TIMESTAMP_ISO8601:timestamp8601&#125;) %&#123;IPORHOST:syslog_server&#125; %&#123;SYSLOGPROG&#125;: %&#123;HAPROXYHTTPBASE&#125;</span><br><span class="line"></span><br><span class="line"># parse a haproxy &apos;tcplog&apos; line</span><br><span class="line">HAPROXYTCP (?:%&#123;SYSLOGTIMESTAMP:syslog_timestamp&#125;|%&#123;TIMESTAMP_ISO8601:timestamp8601&#125;) %&#123;IPORHOST:syslog_server&#125; %&#123;SYSLOGPROG&#125;: %&#123;IP:client_ip&#125;:%&#123;INT:client_port&#125; \[%&#123;HAPROXYDATE:accept_date&#125;\] %&#123;NOTSPACE:frontend_name&#125; %&#123;NOTSPACE:backend_name&#125;/%&#123;NOTSPACE:server_name&#125; %&#123;INT:time_queue&#125;/%&#123;INT:time_backend_connect&#125;/%&#123;NOTSPACE:time_duration&#125; %&#123;NOTSPACE:bytes_read&#125; %&#123;NOTSPACE:termination_state&#125; %&#123;INT:actconn&#125;/%&#123;INT:feconn&#125;/%&#123;INT:beconn&#125;/%&#123;INT:srvconn&#125;/%&#123;NOTSPACE:retries&#125; %&#123;INT:srv_queue&#125;/%&#123;INT:backend_queue&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-5、导入haproxy-conf配置文件"><a href="#2-5、导入haproxy-conf配置文件" class="headerlink" title="2.5、导入haproxy.conf配置文件"></a>2.5、导入haproxy.conf配置文件</h3><blockquote>
<p>提示：首先根据你HAPROXY的使用类型，来引用对应规则库，目前官方规则库支持httplog、tcplog日志格式</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@atmpos conf.d]# pwd</span><br><span class="line">/etc/logstash/conf.d</span><br><span class="line">[root@atmpos conf.d]# cat haproxy.conf </span><br><span class="line"># Sample Logstash configuration for creating a simple</span><br><span class="line"># Beats -&gt; Logstash -&gt; Elasticsearch pipeline.</span><br><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; &quot;/var/log/haproxy.log&quot;</span><br><span class="line">    type =&gt; &quot;haproxy-access-log&quot;</span><br><span class="line">    exclude =&gt; &quot;*.gz&quot;</span><br><span class="line">      start_position =&gt; &quot;beginning&quot;</span><br><span class="line">      stat_interval =&gt; &quot;1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  if [type] == &quot;haproxy-access-log&quot; &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">        match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;HAPROXYTCP&#125;&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    date &#123;</span><br><span class="line">        match =&gt; [&quot;accept_date&quot;,&quot;dd/MMM/yyyy:HH:mm:ss.SSS&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">    mutate &#123; </span><br><span class="line">        rename =&gt; &#123; &quot;host&quot; =&gt; &quot;host.name&quot; &#125;</span><br><span class="line">        remove_field =&gt;[&quot;message&quot;]</span><br><span class="line">        remove_field =&gt;[&quot;host.name&quot;]</span><br><span class="line">        add_field =&gt; &#123; &quot;server_ip&quot; =&gt; &quot;192.168.1.43&quot; &#125;</span><br><span class="line">        remove_field =&gt; [&quot;accept_date&quot;]</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  if [type] == &quot;haproxy-access-log&quot; &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;192.168.1.241:9200&quot;]</span><br><span class="line">    index =&gt; &quot;haproxy-43-log-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-6、重启logstash"><a href="#2-6、重启logstash" class="headerlink" title="2.6、重启logstash"></a>2.6、重启logstash</h3><blockquote>
<p>提示：日志如无ERROR级别的日志，表示数据已开始向ES导入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@atmpos logstash]# service logstash restart</span><br><span class="line">[root@atmpos logstash]# tail -f /var/log/logstash/logstash-plain.log</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="2-7、登录Cerebro查看ES索引及数据情况"><a href="#2-7、登录Cerebro查看ES索引及数据情况" class="headerlink" title="2.7、登录Cerebro查看ES索引及数据情况"></a>2.7、登录Cerebro查看ES索引及数据情况</h3><blockquote>
<p>ES管理工具下载地址，需JDK1.8环境：<a href="https://github.com/lmenezes/cerebro" target="_blank" rel="noopener">https://github.com/lmenezes/cerebro</a></p>
</blockquote>
<p><img src="http://static.zybuluo.com/a807257775/nuvwbn8mnaxku2mdm0d7qw75/image_1dodc61ti1okj35u1avph7d16p5m.png" alt="image_1dodc61ti1okj35u1avph7d16p5m.png-47.3kB"><br><img src="http://static.zybuluo.com/a807257775/gpn41askuskw0hmqu04ku7zl/image_1dodcu1h61bfpmq31voksh0lir9.png" alt="image_1dodcu1h61bfpmq31voksh0lir9.png-104.1kB"></p>
<h3 id="2-8、登录kibana查看ES索引及数据情况"><a href="#2-8、登录kibana查看ES索引及数据情况" class="headerlink" title="2.8、登录kibana查看ES索引及数据情况"></a>2.8、登录kibana查看ES索引及数据情况</h3><p><img src="http://static.zybuluo.com/a807257775/fdhjozgxsl5bt2q4tqfnnjp7/image_1dodd5v5r1gbe1e4gac5pvc10a1m.png" alt="image_1dodd5v5r1gbe1e4gac5pvc10a1m.png-118.5kB"></p>
]]></content>
      <categories>
        <category>ELK文档</category>
      </categories>
      <tags>
        <tag>ELK文档</tag>
      </tags>
  </entry>
  <entry>
    <title>ELFK-实时抓取JAVA日志</title>
    <url>/2019/10/30/ELFK-%E5%AE%9E%E6%97%B6%E6%8A%93%E5%8F%96JAVA%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h1 id="ELFK-实时抓取JAVA日志"><a href="#ELFK-实时抓取JAVA日志" class="headerlink" title="ELFK-实时抓取JAVA日志"></a>ELFK-实时抓取JAVA日志</h1><h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><blockquote>
<p>本篇博客仅记录java应用日志，通过logstash正则进行数据结构化，输出到elasticsearch中，最后通过kibaka进行展示的完整过程，EK的安装及配置方法，请参考：<a href="https://www.lisirlife.com/2019/10/30/ELFK-%E5%AE%9E%E6%97%B6%E6%8A%93%E5%8F%96HAPROXY%E6%97%A5%E5%BF%97/" target="_blank" rel="noopener">ELK-Stack简介及安装手册</a></p>
</blockquote>
<h2 id="2、部署环境介绍"><a href="#2、部署环境介绍" class="headerlink" title="2、部署环境介绍"></a>2、部署环境介绍</h2><table>
<thead>
<tr>
<th>平台</th>
<th>IP</th>
<th>用途</th>
<th>E版本</th>
<th>L版本</th>
<th>K版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS 6.7 64Bit</td>
<td>192.168.2.245</td>
<td>ES+Cerebro+Kibana</td>
<td>6.7.0</td>
<td></td>
<td>6.7.0</td>
</tr>
<tr>
<td>CentOS 6.7 64Bit</td>
<td>192.168.2.15</td>
<td>Logstash</td>
<td></td>
<td>6.7.0</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="3、Logstash的安装与配置"><a href="#3、Logstash的安装与配置" class="headerlink" title="3、Logstash的安装与配置"></a>3、Logstash的安装与配置</h2><blockquote>
<p>本篇仅记录抓取java日志的全过程，Logstash的安装请参考：<a href="https://www.lisirlife.com/2019/10/30/ELFK-%E5%AE%9E%E6%97%B6%E6%8A%93%E5%8F%96HAPROXY%E6%97%A5%E5%BF%97/" target="_blank" rel="noopener">ELFK-实时抓取HAPROXY日志</a></p>
</blockquote>
<h3 id="3-1、java样本数据分析与正则编写"><a href="#3-1、java样本数据分析与正则编写" class="headerlink" title="3.1、java样本数据分析与正则编写"></a>3.1、java样本数据分析与正则编写</h3><ul>
<li><p>样本数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019-10-30 12:20:00,190 [pool-15038-thread-1] INFO  [com.ebring.jfpt.core.service.jfmanage.AutoBankCheckService] - 根据清算平台对账交易，该交易流水支付状态为未支付，交易流水号： 6666666666666</span><br></pre></td></tr></table></figure>
</li>
<li><p>正则分拆：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(?&lt;TOMCAT_DATESTAMP&gt;20(?&gt;\d\d)&#123;1,2&#125;-(?:0?[1-9]|1[0-2])-(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9]) (?:2[0123]|[01]?[0-9]):?(?:[0-5][0-9])(?::?(?:(?:[0-5]?[0-9]|60)(?:[:.,][0-9]+)?))) (?&lt;THREAD&gt;\S+) (?&lt;LOG_LEVEL&gt;([Aa]lert|ALERT|[Tt]race|TRACE|[Dd]ebug|DEBUG|[Nn]otice|NOTICE|[Ii]nfo|INFO|[Ww]arn?(?:ing)?|WARN?(?:ING)?|[Ee]rr?(?:or)?|ERR?(?:OR)?|[Cc]rit?(?:ical)?|CRIT?(?:ICAL)?|[Ff]atal|FATAL|[Ss]evere|SEVERE|EMERG(?:ENCY)?|[Ee]merg(?:ency)?)\s?) (?&lt;COM_RONGLIAN&gt;\S+) - (?&lt;MESSAGE&gt;.*)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Kibana Grok Debug：</p>
</li>
</ul>
<blockquote>
<p>Simulate后，如无报错则表示规则生效，数据结构化详情见<code>Structured Data</code>一栏</p>
</blockquote>
<p><img src="http://static.zybuluo.com/a807257775/g1b2p2w3uz45n8agl1jkixkr/image_1dodpa7111j3v1dcn1jshjlhrp8p.png" alt="image_1dodpa7111j3v1dcn1jshjlhrp8p.png-79.6kB"></p>
<h3 id="3-2、导入java-patterns规则库"><a href="#3-2、导入java-patterns规则库" class="headerlink" title="3.2、导入java_patterns规则库"></a>3.2、导入java_patterns规则库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost patterns]# pwd</span><br><span class="line">/usr/share/logstash/patterns</span><br><span class="line">[root@localhost patterns]# cat java_patterns </span><br><span class="line">#JAVA LOGS PATTTERNS</span><br><span class="line">TOMCAT_DATESTAMP 20(?&gt;\d\d)&#123;1,2&#125;-(?:0?[1-9]|1[0-2])-(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9]) (?:2[0123]|[01]?[0-9]):?(?:[0-5][0-9])(?::?(?:(?:[0-5]?[0-9]|60)(?:[:.,][0-9]+)?))</span><br><span class="line">THREAD \S+</span><br><span class="line">LOG_LEVEL ([Aa]lert|ALERT|[Tt]race|TRACE|[Dd]ebug|DEBUG|[Nn]otice|NOTICE|[Ii]nfo|INFO|[Ww]arn?(?:ing)?|WARN?(?:ING)?|[Ee]rr?(?:or)?|ERR?(?:OR)?|[Cc]rit?(?:ical)?|CRIT?(?:ICAL)?|[Ff]atal|FATAL|[Ss]evere|SEVERE|EMERG(?:ENCY)?|[Ee]merg(?:ency)?)\s?</span><br><span class="line">COM_RONGLIAN \S+</span><br><span class="line">UNKNOWN \S+</span><br><span class="line">MESSAGE .*</span><br></pre></td></tr></table></figure>
<h3 id="3-3、导入java-log-conf配置文件"><a href="#3-3、导入java-log-conf配置文件" class="headerlink" title="3.3、导入java_log.conf配置文件"></a>3.3、导入java_log.conf配置文件</h3><blockquote>
<p>提示：本次收集JAVA日志规则库，均为自行编写，配置文件篇幅过长，由于我司TOMCAT应用，字符集配置不一致导致数据抓取会出现乱码，所以我们最终是按照统一字符集进行收集分析。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost conf.d]# pwd</span><br><span class="line">/etc/logstash/conf.d</span><br><span class="line">[root@localhost conf.d]# cat java_log.conf </span><br><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; &quot;/data/java_log/*&quot;</span><br><span class="line">    type =&gt; &quot;java-log-utf-8&quot;</span><br><span class="line">    exclude =&gt; &quot;*.gz&quot;</span><br><span class="line">      start_position =&gt; &quot;beginning&quot;</span><br><span class="line">      stat_interval =&gt; &quot;1&quot;</span><br><span class="line">      codec =&gt; multiline &#123;</span><br><span class="line">      charset =&gt; &quot;UTF-8&quot; </span><br><span class="line">      pattern =&gt; &quot;^%&#123;TIMESTAMP_ISO8601&#125; &quot;</span><br><span class="line">      negate =&gt; true</span><br><span class="line">      what =&gt; &quot;previous&quot;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; &quot;/data/java_log_gbk18030/*&quot;</span><br><span class="line">    type =&gt; &quot;java-log-gbk18030&quot;</span><br><span class="line">    exclude =&gt; &quot;*.gz&quot;</span><br><span class="line">      start_position =&gt; &quot;beginning&quot;</span><br><span class="line">      stat_interval =&gt; &quot;1&quot;</span><br><span class="line">      codec =&gt; multiline &#123;</span><br><span class="line">      charset =&gt; &quot;GB18030&quot; </span><br><span class="line">      pattern =&gt; &quot;^%&#123;TIMESTAMP_ISO8601&#125; &quot;</span><br><span class="line">      negate =&gt; true</span><br><span class="line">      what =&gt; &quot;previous&quot;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; &quot;/data/java_log_binary/*&quot;</span><br><span class="line">    type =&gt; &quot;java-log-binary&quot;</span><br><span class="line">    exclude =&gt; &quot;*.gz&quot;</span><br><span class="line">      start_position =&gt; &quot;beginning&quot;</span><br><span class="line">      stat_interval =&gt; &quot;1&quot;</span><br><span class="line">      codec =&gt; multiline &#123;</span><br><span class="line">      charset =&gt; &quot;BINARY&quot; </span><br><span class="line">      pattern =&gt; &quot;^%&#123;TIMESTAMP_ISO8601&#125; &quot;</span><br><span class="line">      negate =&gt; true</span><br><span class="line">      what =&gt; &quot;previous&quot;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; &quot;/data/java_log_iso-8859-1/*&quot;</span><br><span class="line">    type =&gt; &quot;java-log-iso-8859-1&quot;</span><br><span class="line">    exclude =&gt; &quot;*.gz&quot;</span><br><span class="line">      start_position =&gt; &quot;beginning&quot;</span><br><span class="line">      stat_interval =&gt; &quot;1&quot;</span><br><span class="line">      codec =&gt; multiline &#123;</span><br><span class="line">      charset =&gt; &quot;ISO-8859-1&quot; </span><br><span class="line">      pattern =&gt; &quot;^%&#123;TIMESTAMP_ISO8601&#125; &quot;</span><br><span class="line">      negate =&gt; true</span><br><span class="line">      what =&gt; &quot;previous&quot;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; &quot;/data/java_log_gb2312/*&quot;</span><br><span class="line">    type =&gt; &quot;java-log-gb2312&quot;</span><br><span class="line">    exclude =&gt; &quot;*.gz&quot;</span><br><span class="line">      start_position =&gt; &quot;beginning&quot;</span><br><span class="line">      stat_interval =&gt; &quot;1&quot;</span><br><span class="line">      codec =&gt; multiline &#123;</span><br><span class="line">      charset =&gt; &quot;GB2312&quot; </span><br><span class="line">      pattern =&gt; &quot;^%&#123;TIMESTAMP_ISO8601&#125; &quot;</span><br><span class="line">      negate =&gt; true</span><br><span class="line">      what =&gt; &quot;previous&quot;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  grok &#123;</span><br><span class="line">    patterns_dir =&gt; [&quot;/usr/share/logstash/patterns&quot;]</span><br><span class="line">    match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;TOMCAT_DATESTAMP:tomcat_datestamp&#125; %&#123;THREAD:thread&#125; %&#123;LOG_LEVEL:log_level&#125; %&#123;COM_RONGLIAN:com_ronglian&#125; %&#123;UNKNOWN:unknown&#125; %&#123;MESSAGE:message&#125;&quot; &#125;</span><br><span class="line">    overwrite =&gt; [ &quot;message&quot; ]</span><br><span class="line">  &#125;</span><br><span class="line">  date &#123;</span><br><span class="line">    match =&gt; [ &quot;tomcat_datestamp&quot;, &quot;yyyy-MM-dd HH:mm:ss,SSS&quot; ]</span><br><span class="line">    target =&gt; &quot;@timestamp&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  ruby &#123; </span><br><span class="line">    code =&gt; &quot;event.set(&apos;timestamp&apos;, event.get(&apos;@timestamp&apos;).time.localtime + 8*60*60)&quot; </span><br><span class="line">  &#125; </span><br><span class="line">  mutate &#123; </span><br><span class="line">    add_field =&gt; &#123; &quot;remote_ip&quot; =&gt; &quot;192.168.2.15&quot; &#125;</span><br><span class="line">    convert =&gt; [&quot;timestamp&quot;, &quot;string&quot;] </span><br><span class="line">    gsub =&gt; [ &quot;message&quot;, &quot;\r&quot;, &quot;&quot; ]  </span><br><span class="line">    gsub =&gt; [&quot;timestamp&quot;, &quot;T([\S\s]*?)Z&quot;, &quot;&quot;] </span><br><span class="line">    gsub =&gt; [&quot;timestamp&quot;, &quot;-&quot;, &quot;.&quot;] </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  if [type] == &quot;java-log-utf-8&quot; &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;192.168.2.245:9200&quot;]</span><br><span class="line">    index =&gt; &quot;java-log-utf-8-%&#123;timestamp&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if [type] == &quot;java-log-gbk18030&quot; &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;192.168.2.245:9200&quot;]</span><br><span class="line">    index =&gt; &quot;java-log-gb18030-%&#123;timestamp&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if [type] == &quot;java-log-binary&quot; &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;192.168.2.245:9200&quot;]</span><br><span class="line">    index =&gt; &quot;java-log-binary-%&#123;timestamp&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if [type] == &quot;java-log-iso-8859-1&quot; &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;192.168.2.245:9200&quot;]</span><br><span class="line">    index =&gt; &quot;java-log-iso-8859-1-%&#123;timestamp&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  if [type] == &quot;java-log-gb2312&quot; &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;192.168.2.245:9200&quot;]</span><br><span class="line">    index =&gt; &quot;java-log-gb2312-%&#123;timestamp&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4、重启logstash"><a href="#3-4、重启logstash" class="headerlink" title="3.4、重启logstash"></a>3.4、重启logstash</h3><blockquote>
<p>提示：日志如无ERROR级别的日志，表示数据已开始向ES导入，随后请登录kibana查看数据情况<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@elk logstash]# service logstash restart</span><br><span class="line">[root@elk logstash]# tail -f /var/log/logstash/logstash-plain.log</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="4、问题收集与解决方案"><a href="#4、问题收集与解决方案" class="headerlink" title="4、问题收集与解决方案"></a>4、问题收集与解决方案</h2><ul>
<li><a href="https://www.lisirlife.com/2019/05/06/ELK-logstash%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener">ELK-logstash笔记</a></li>
<li><a href="https://www.lisirlife.com/2019/06/27/ELK%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/" target="_blank" rel="noopener">ELK使用问题汇总</a></li>
</ul>
]]></content>
      <categories>
        <category>ELK文档</category>
      </categories>
      <tags>
        <tag>ELK文档</tag>
      </tags>
  </entry>
  <entry>
    <title>ELFK-实时抓取NGINX日志</title>
    <url>/2019/10/30/ELFK-%E5%AE%9E%E6%97%B6%E6%8A%93%E5%8F%96NGINX%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h1 id="ELFK-实时抓取NGINX日志"><a href="#ELFK-实时抓取NGINX日志" class="headerlink" title="ELFK-实时抓取NGINX日志"></a>ELFK-实时抓取NGINX日志</h1><h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><blockquote>
<p>本篇博客记录nginx访问日志、错误日志，通过filebeat进行数据结构化处理，输出到elasticsearch中，最后通过kibaka进行展示的完整过程，EK的安装及配置方法，请参考：<a href="https://www.lisirlife.com/2019/05/06/ELK-Stack%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/" target="_blank" rel="noopener">ELK-Stack简介及安装手册</a></p>
</blockquote>
<h2 id="2、部署环境介绍"><a href="#2、部署环境介绍" class="headerlink" title="2、部署环境介绍"></a>2、部署环境介绍</h2><table>
<thead>
<tr>
<th>平台</th>
<th>IP</th>
<th>用途</th>
<th>E版本</th>
<th>F版本</th>
<th>K版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS 6.7 64Bit</td>
<td>192.168.1.241</td>
<td>ES+Cerebro+Kibana</td>
<td>6.7.0</td>
<td></td>
<td>6.7.0</td>
</tr>
<tr>
<td>CentOS 6.7 64Bit</td>
<td>192.168.1.130</td>
<td>Filebeat</td>
<td></td>
<td>6.7.0</td>
</tr>
</tbody>
</table>
<h2 id="3、Filebeat的安装与主配置文件详解"><a href="#3、Filebeat的安装与主配置文件详解" class="headerlink" title="3、Filebeat的安装与主配置文件详解"></a>3、Filebeat的安装与主配置文件详解</h2><h3 id="3-1、安装Filebeat"><a href="#3-1、安装Filebeat" class="headerlink" title="3.1、安装Filebeat"></a>3.1、安装Filebeat</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test1 ~]# curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.3.0-x86_64.rpm</span><br><span class="line">[root@test1 ~]# rpm -vi filebeat-6.3.0-x86_64.rpm</span><br><span class="line">[root@test1 ~]# chkconfig filebeat on</span><br><span class="line">[root@test1 ~]# rpm -ql filebeat</span><br><span class="line">    #filebeat启动脚本</span><br><span class="line">    /usr/bin/filebeat</span><br><span class="line">    /etc/init.d/filebeat</span><br><span class="line">    #主程序路径</span><br><span class="line">    /usr/share/filebeat/</span><br><span class="line">    #filebeat模块配置文件路径</span><br><span class="line">    /usr/share/filebeat/module</span><br><span class="line">    #主程序安装路径</span><br><span class="line">    /usr/share/kibana/</span><br><span class="line">    #主配置文件路径</span><br><span class="line">    /etc/filebeat</span><br><span class="line">    #模块配置文件夹引用路径</span><br><span class="line">    /etc/filebeat/modules.d/</span><br></pre></td></tr></table></figure>
<h3 id="3-2、主配置文件详解：-etc-filebeat-filebeat-yml"><a href="#3-2、主配置文件详解：-etc-filebeat-filebeat-yml" class="headerlink" title="3.2、主配置文件详解：/etc/filebeat/filebeat.yml"></a>3.2、主配置文件详解：/etc/filebeat/filebeat.yml</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#============================= Filebeat modules ===============================</span><br><span class="line"></span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  # Glob pattern for configuration loading</span><br><span class="line">  path: $&#123;path.config&#125;/modules.d/*.yml</span><br><span class="line">  # Set to true to enable config reloading</span><br><span class="line">  reload.enabled: false</span><br><span class="line">  # Period on which files under path should be checked for changes</span><br><span class="line">  reload.period: 10s</span><br><span class="line">#==================== Elasticsearch template setting ==========================</span><br><span class="line">#如修改了默认索引名，此处必须配置</span><br><span class="line">setup.template.name: &quot;nginx&quot;</span><br><span class="line">setup.template.pattern: &quot;nginx-*&quot;</span><br><span class="line">setup.template.fields: &quot;/etc/filebeat/fields.yml&quot;</span><br><span class="line">setup.template.overwrite: &quot;true&quot;</span><br><span class="line">#kiabna展示默认索引名</span><br><span class="line">setup.dashboards.index: &quot;nginx-*&quot;</span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 2</span><br><span class="line">  #index.codec: best_compression</span><br><span class="line">  #_source.enabled: false</span><br><span class="line">#============================== Kibana =====================================</span><br><span class="line">setup.kibana:</span><br><span class="line">  host: &quot;192.168.1.241:5601&quot;</span><br><span class="line">#================================ Outputs =====================================</span><br><span class="line">#-------------------------- Elasticsearch output ------------------------------</span><br><span class="line">#when.contains配置判断输入字段是否包含特定内容，并创建特定的索引，主要用来区分日志</span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;192.168.1.241:9200&quot;]</span><br><span class="line">  index: &quot;defaults-logs-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">  indices:</span><br><span class="line">    - index: &quot;nginx-130-errorlogs-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">      when.contains:</span><br><span class="line">        fileset.name: &quot;error&quot;</span><br><span class="line">    - index: &quot;nginx-130-accesslogs-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">      when.contains:</span><br><span class="line">        fileset.name: &quot;access&quot;</span><br><span class="line">  # Optional protocol and basic auth credentials.</span><br><span class="line">  #protocol: &quot;https&quot;</span><br><span class="line">  #username: &quot;elastic&quot;</span><br><span class="line">  #password: &quot;changeme&quot;</span><br><span class="line">#多个工作线程开启负载模式  </span><br><span class="line">  worker: &quot;2&quot;</span><br></pre></td></tr></table></figure>
<h3 id="3-3、开启filebeat-nginx-模块，支持过滤日志"><a href="#3-3、开启filebeat-nginx-模块，支持过滤日志" class="headerlink" title="3.3、开启filebeat nginx 模块，支持过滤日志"></a>3.3、开启filebeat nginx 模块，支持过滤日志</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test1 ~]# filebeat modules enable nginx</span><br></pre></td></tr></table></figure>
<h3 id="3-4、载入filebeat自带的仪表盘和可视化代码，通过kibana展示"><a href="#3-4、载入filebeat自带的仪表盘和可视化代码，通过kibana展示" class="headerlink" title="3.4、载入filebeat自带的仪表盘和可视化代码，通过kibana展示"></a>3.4、载入filebeat自带的仪表盘和可视化代码，通过kibana展示</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test1 ~]# filebeat setup --dashboards</span><br></pre></td></tr></table></figure>
<h3 id="3-5、修改filebeat-nginx模块配置文件，input数据"><a href="#3-5、修改filebeat-nginx模块配置文件，input数据" class="headerlink" title="3.5、修改filebeat nginx模块配置文件，input数据"></a>3.5、修改filebeat nginx模块配置文件，input数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test1 ~]# vim /etc/filebeat/modules.d/nginx.yml</span><br><span class="line">- module: nginx</span><br><span class="line">  # Access logs</span><br><span class="line">  access:</span><br><span class="line">    enabled: true</span><br><span class="line">    #新建access目录用来区分日志</span><br><span class="line">    var.paths: [&quot;/usr/local/nginx/logs/access/*&quot;]</span><br><span class="line"></span><br><span class="line">  error:</span><br><span class="line">    enabled: true</span><br><span class="line">    #新建error目录用来区分日志</span><br><span class="line">    var.paths: [&quot;/usr/local/nginx/logs/error/*&quot;]</span><br></pre></td></tr></table></figure>
<h3 id="3-6、修改filebeat-nginx模块access默认配置文件用来匹配自定义日志"><a href="#3-6、修改filebeat-nginx模块access默认配置文件用来匹配自定义日志" class="headerlink" title="3.6、修改filebeat nginx模块access默认配置文件用来匹配自定义日志"></a>3.6、修改filebeat nginx模块access默认配置文件用来匹配自定义日志</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#获取自定义NGINX日志格式</span><br><span class="line">     log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$server_name&quot; &quot;$request&quot; &apos;</span><br><span class="line">          &apos;$status $body_bytes_sent &quot;$request_body&quot; &quot;$http_referer&quot; &apos;</span><br><span class="line">          &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &apos;</span><br><span class="line">          &apos;$connection $upstream_addr &apos;</span><br><span class="line">          &apos;$upstream_response_time $request_time &apos;;</span><br><span class="line">          </span><br><span class="line">#对模块源码进行调整，匹配自定义NGINX格式，注意数据类型</span><br><span class="line">[root@test1 ~]# vim /usr/share/filebeat/module/nginx/access/ingest/default.json</span><br><span class="line">&quot;patterns&quot;:[</span><br><span class="line">            &quot;\&quot;?%&#123;IP_LIST:nginx.access.remote_ip_list&#125; - %&#123;DATA:nginx.access.user_name&#125; \\[%&#123;HTTPDATE:nginx.access.time&#125;\\] \&quot;%&#123;DATA:nginx.access.servername&#125;\&quot; \&quot;%&#123;GREEDYDATA:nginx.access.info&#125;\&quot; %&#123;NUMBER:nginx.access.response_code&#125; %&#123;NUMBER:nginx.access.body_sent.bytes&#125; \&quot;%&#123;DATA:nginx.access.request_body&#125;\&quot; \&quot;%&#123;DATA:nginx.access.referrer&#125;\&quot; \&quot;%&#123;DATA:nginx.access.agent&#125;\&quot; \&quot;%&#123;DATA:nginx.access.http_x_forwarded_for&#125;\&quot; %&#123;NUMBER:nginx.access.connection&#125; %&#123;DATA:nginx.access.upstream_addr&#125; %&#123;DATA:nginx.access.upstream_response_time&#125; %&#123;DATA:nginx.access.request_time&#125;&quot;]</span><br><span class="line"></span><br><span class="line">#默认的nginx模块只支持默认日志格式，如有变动需要在此处新增字段名，文章过长，只展示新增部分</span><br><span class="line">[root@test1 ~]# vim /etc/filebeat/fields.yml</span><br><span class="line">- key: nginx</span><br><span class="line">  title: &quot;Nginx&quot;</span><br><span class="line">  description: &gt;</span><br><span class="line">    Module for parsing the Nginx log files.</span><br><span class="line">  short_config: true</span><br><span class="line">  fields:</span><br><span class="line">    ......</span><br><span class="line">            - name: servername</span><br><span class="line">              type: keyword</span><br><span class="line">              description: &gt;</span><br><span class="line">                The http servername</span><br><span class="line">            - name: request_body</span><br><span class="line">              type: text</span><br><span class="line">              format: bytes</span><br><span class="line">              description: &gt;</span><br><span class="line">                The http request_body   </span><br><span class="line">            - name: referrer</span><br><span class="line">              type: keyword</span><br><span class="line">              description: &gt;</span><br><span class="line">                The HTTP referrer.</span><br><span class="line">            - name: http_x_forwarded_for</span><br><span class="line">              type: text</span><br><span class="line">              description: &gt;</span><br><span class="line">                The http http_x_forwarded_for  </span><br><span class="line">            - name: connection</span><br><span class="line">              type: keyword</span><br><span class="line">              example: GET</span><br><span class="line">              description: &gt;</span><br><span class="line">                The http connection</span><br><span class="line">            - name: upstream_addr</span><br><span class="line">              type: keyword</span><br><span class="line">              example: GET</span><br><span class="line">              description: &gt;</span><br><span class="line">                The http upstream_addr</span><br><span class="line">            - name: upstream_response_time</span><br><span class="line">              type: keyword</span><br><span class="line">              example: GET</span><br><span class="line">              description: &gt;</span><br><span class="line">                The http upstream_response_time</span><br><span class="line">            - name: request_time</span><br><span class="line">              type: keyword</span><br><span class="line">              example: GET</span><br><span class="line">              description: &gt;</span><br><span class="line">                The http request_time              </span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<h3 id="3-7、修改filebeat-nginx模块error默认配置文件用来解决时区问题"><a href="#3-7、修改filebeat-nginx模块error默认配置文件用来解决时区问题" class="headerlink" title="3.7、修改filebeat nginx模块error默认配置文件用来解决时区问题"></a>3.7、修改filebeat nginx模块error默认配置文件用来解决时区问题</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test1 ~]#vim /usr/share/filebeat/module/nginx/error/ingest</span><br><span class="line">    &quot;date&quot;: &#123;</span><br><span class="line">      &quot;field&quot;: &quot;nginx.error.time&quot;,</span><br><span class="line">      &quot;target_field&quot;: &quot;@timestamp&quot;,</span><br><span class="line">      &quot;formats&quot;: [&quot;YYYY/MM/dd H:m:s&quot;],</span><br><span class="line">      &quot;timezone&quot;: &quot;Asia/Shanghai&quot;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-8、启动filebeat，观察日志"><a href="#3-8、启动filebeat，观察日志" class="headerlink" title="3.8、启动filebeat，观察日志"></a>3.8、启动filebeat，观察日志</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test1 ~]# service filebeat start</span><br><span class="line">[root@test1 ~]# filebeat -e #开启debug模式</span><br></pre></td></tr></table></figure>
<h2 id="4、查看Dashboard仪表板"><a href="#4、查看Dashboard仪表板" class="headerlink" title="4、查看Dashboard仪表板"></a>4、查看Dashboard仪表板</h2><ul>
<li><p><strong>[Filebeat Nginx] [ML] Remote IP Count Explorer</strong><br><img src="http://static.zybuluo.com/a807257775/gfajwj1its1fs8as9zc75jvp/image_1dodo27eulao1ouf1mmp1p2nqg42t.png" alt="image_1dodo27eulao1ouf1mmp1p2nqg42t.png-219.3kB"><br><img src="http://static.zybuluo.com/a807257775/u4r1t79aamdeb4r3sd7r82dm/image_1dodo8f7o111j1q1cddk12poc6m3a.png" alt="image_1dodo8f7o111j1q1cddk12poc6m3a.png-293.2kB"></p>
</li>
<li><p><strong>[Filebeat Nginx] Overview</strong><br><img src="http://static.zybuluo.com/a807257775/ymwnm09ujds96iflktdx8e1b/image_1dodocumo1fe7695pka1khmuen47.png" alt="image_1dodocumo1fe7695pka1khmuen47.png-154.5kB"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>ELK文档</category>
      </categories>
      <tags>
        <tag>ELK文档</tag>
      </tags>
  </entry>
  <entry>
    <title>ELFK-实时抓取WAF硬件设备日志</title>
    <url>/2019/10/30/ELFK-%E5%AE%9E%E6%97%B6%E6%8A%93%E5%8F%96WAF%E7%A1%AC%E4%BB%B6%E8%AE%BE%E5%A4%87%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<h1 id="ELFK-实时抓取WAF硬件设备日志"><a href="#ELFK-实时抓取WAF硬件设备日志" class="headerlink" title="ELFK-实时抓取WAF硬件设备日志"></a>ELFK-实时抓取WAF硬件设备日志</h1><h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><blockquote>
<p>本篇博客记录我司一台山石waf设备，由于日志查看过于繁琐，需反复登录设备，缺少实时分析和预警功能，后开启设备syslog udp：514端口，通过logstash正则进行数据结构化处理，输出到elasticsearch中，最后通过kibaka进行展示的完整过程，EK的安装及配置方法，请参考：<a href="https://www.lisirlife.com/2019/05/06/ELK-Stack%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/" target="_blank" rel="noopener">ELK-Stack简介及安装手册</a></p>
</blockquote>
<h2 id="2、部署环境介绍"><a href="#2、部署环境介绍" class="headerlink" title="2、部署环境介绍"></a>2、部署环境介绍</h2><table>
<thead>
<tr>
<th>平台</th>
<th>IP</th>
<th>用途</th>
<th>E版本</th>
<th>L版本</th>
<th>K版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS 6.7 64Bit</td>
<td>192.168.1.241</td>
<td>ES+Cerebro+Kibana+Logstash</td>
<td>6.7.0</td>
<td>6.7.0</td>
<td>6.7.0</td>
</tr>
</tbody>
</table>
<h2 id="3、配置硬件WAF"><a href="#3、配置硬件WAF" class="headerlink" title="3、配置硬件WAF"></a>3、配置硬件WAF</h2><h4 id="3-1、开启山石WAF日志服务器"><a href="#3-1、开启山石WAF日志服务器" class="headerlink" title="3.1、开启山石WAF日志服务器"></a>3.1、开启山石WAF日志服务器</h4><blockquote>
<p>此处填写ES的地址，我们只针对“网页安全日志”进行收集分析</p>
</blockquote>
<p><img src="http://static.zybuluo.com/a807257775/k1do3dlz84smufa1vt69u4qh/image_1dodk7i0n1b811sr21lh114chr9m9.png" alt="image_1dodk7i0n1b811sr21lh114chr9m9.png-41.2kB"></p>
<h2 id="4、Logstash的配置"><a href="#4、Logstash的配置" class="headerlink" title="4、Logstash的配置"></a>4、Logstash的配置</h2><blockquote>
<p>本篇仅记录抓取syslog的全过程，Logstash的安装请参考：<a href="https://www.lisirlife.com/2019/10/30/ELFK-%E5%AE%9E%E6%97%B6%E6%8A%93%E5%8F%96HAPROXY%E6%97%A5%E5%BF%97/" target="_blank" rel="noopener">ELFK-实时抓取HAPROXY日志</a></p>
</blockquote>
<h3 id="4-1、waf样本数据分析与正则编写"><a href="#4-1、waf样本数据分析与正则编写" class="headerlink" title="4.1、waf样本数据分析与正则编写"></a>4.1、waf样本数据分析与正则编写</h3><ul>
<li><p>样本数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Jun 15 22:39:26 261030KSA3454057(root) 4144c203 Web-security@SYS: CRITICAL! From 36.110.101.2:59780 to 192.168.1.133:443, site name: 130-ejf123-443, policy name: 禁止爬虫部分开启SQL, protection type: 104, protection subtype: 10400, action: pass, followed_action: NONE, block_time: N/A, rule ID: 1040010022, rule name: infoleak_srverr:http_stu, vul_id: N/A, severity: 2, domain name: ccbxjmob.ejf123.com, HTTP method: GET, HTTP url: /jfpt/static/html/template_ccbxjmob/1.0/20180718140822/images/favicon.ico, source country/region: CN, message: HTTP Status Code: Server Return HTTP Status Code 404 (Not Found), Matched Data: 404 found within RESPONSE_STATUS: 404, attack count: 1</span><br></pre></td></tr></table></figure>
</li>
<li><p>正则分拆：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(?:%&#123;SYSLOGTIMESTAMP:syslog_timestamp&#125;|%&#123;TIMESTAMP_ISO8601:timestamp8601&#125;) (?&lt;服务器信息&gt;\S+ \S+ \S+:) (?&lt;告警级别&gt;\S+\!?) (?&lt;A&gt;\S+) (?&lt;客户端IP&gt;%&#123;IP&#125;):(?&lt;客户端端口&gt;%&#123;INT&#125;) (?&lt;B&gt;\S+) (?&lt;服务端IP&gt;%&#123;IP&#125;):(?&lt;服务端端口&gt;%&#123;INT&#125;), (?&lt;C&gt;\S+ \S+) (?&lt;站点名称&gt;\S+) (?&lt;D&gt;\S+ \S+) (?&lt;策略名称&gt;\S+) (?&lt;E&gt;\S+ \S+) (?&lt;防护类型&gt;\S+) (?&lt;F&gt;\S+ \S+) (?&lt;防护子类型&gt;\S+) (?&lt;G&gt;\S+) (?&lt;动作&gt;\S+) (?&lt;H&gt;\S+) (?&lt;后续动作&gt;\S+) (?&lt;J&gt;\S+) (?&lt;阻塞时间&gt;\S+) (?&lt;K&gt;\S+ \S+) (?&lt;规则ID&gt;\S+) (?&lt;L&gt;\S+ \S+) (?&lt;规则名称&gt;\S+) (?&lt;M&gt;\S+) (?&lt;漏洞ID&gt;\S+) (?&lt;I&gt;\S+ \S+) (?&lt;O&gt;\S+ \S+) (?&lt;域名&gt;%&#123;HOSTNAME&#125;\S+) (?&lt;Q&gt;\S+ \S+) (?&lt;HTTP请求方法&gt;\S+) (?&lt;P&gt;\S+ \S+) (?&lt;HTTPURL&gt;\S+) (?&lt;R&gt;\S+ \S+) (?&lt;攻击源&gt;\S+) (?&lt;X&gt;\S+) (?&lt;消息&gt;.*,) (?&lt;T&gt;\S+ \S+) (?&lt;攻击次数&gt;%&#123;BASE16NUM&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>Kibana Grok Debug：</p>
</li>
</ul>
<blockquote>
<p>Simulate后，如无报错则表示规则生效，数据结构化详情见<code>Structured Data</code>一栏</p>
</blockquote>
<p><img src="http://static.zybuluo.com/a807257775/g3f8eg2la7dbec5cya27rcq3/image_1dodl7665p2n1ta1ol63utvag9.png" alt="image_1dodl7665p2n1ta1ol63utvag9.png-102kB"></p>
<h3 id="4-2、导入waf-patterns规则库"><a href="#4-2、导入waf-patterns规则库" class="headerlink" title="4.2、导入waf_patterns规则库"></a>4.2、导入waf_patterns规则库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@elk patterns]# pwd</span><br><span class="line">/usr/share/logstash/patterns</span><br><span class="line">[root@elk patterns]# cat waf_patterns </span><br><span class="line">#20190615 wafaccess log from 192.168.1.133</span><br><span class="line">WAFACCESS (?:%&#123;SYSLOGTIMESTAMP:syslog_timestamp&#125;|%&#123;TIMESTAMP_ISO8601:timestamp8601&#125;) (?&lt;服务器信息&gt;\S+ \S+ \S+:) (?&lt;告警级别&gt;\S+\!?) (?&lt;A&gt;\S+) (?&lt;客户端IP&gt;%&#123;IP&#125;):(?&lt;客户端端口&gt;%&#123;INT&#125;) (?&lt;B&gt;\S+) (?&lt;服务端IP&gt;%&#123;IP&#125;):(?&lt;服务端端口&gt;%&#123;INT&#125;), (?&lt;C&gt;\S+ \S+) (?&lt;站点名称&gt;\S+) (?&lt;D&gt;\S+ \S+) (?&lt;策略名称&gt;\S+) (?&lt;E&gt;\S+ \S+) (?&lt;防护类型&gt;\S+) (?&lt;F&gt;\S+ \S+) (?&lt;防护子类型&gt;\S+) (?&lt;G&gt;\S+) (?&lt;动作&gt;\S+) (?&lt;H&gt;\S+) (?&lt;后续动作&gt;\S+) (?&lt;J&gt;\S+) (?&lt;阻塞时间&gt;\S+) (?&lt;K&gt;\S+ \S+) (?&lt;规则ID&gt;\S+) (?&lt;L&gt;\S+ \S+) (?&lt;规则名称&gt;\S+) (?&lt;M&gt;\S+) (?&lt;漏洞ID&gt;\S+) (?&lt;I&gt;\S+ \S+) (?&lt;O&gt;\S+ \S+) (?&lt;域名&gt;%&#123;HOSTNAME&#125;\S+) (?&lt;Q&gt;\S+ \S+) (?&lt;HTTP请求方法&gt;\S+) (?&lt;P&gt;\S+ \S+) (?&lt;HTTPURL&gt;\S+) (?&lt;R&gt;\S+ \S+) (?&lt;攻击源&gt;\S+) (?&lt;X&gt;\S+) (?&lt;消息&gt;.*,) (?&lt;T&gt;\S+ \S+) (?&lt;攻击次数&gt;%&#123;BASE16NUM&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="4-3、导入waf-conf配置文件"><a href="#4-3、导入waf-conf配置文件" class="headerlink" title="4.3、导入waf.conf配置文件"></a>4.3、导入waf.conf配置文件</h3><blockquote>
<p>提示：本次收集山石WAF的日志规则库，均为自行编写，时间字段为logstsh自带正则实现；</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@elk conf.d]# pwd</span><br><span class="line">/etc/logstash/conf.d</span><br><span class="line">[root@elk conf.d]# cat waf.conf </span><br><span class="line"># Sample Logstash configuration for creating a simple</span><br><span class="line"># Beats -&gt; Logstash -&gt; Elasticsearch pipeline.</span><br><span class="line">input &#123;</span><br><span class="line"> syslog &#123;</span><br><span class="line">    type =&gt; &quot;waf-accesslog&quot;</span><br><span class="line">    host =&gt; &quot;192.168.1.241&quot;</span><br><span class="line">    port =&gt; &quot;514&quot;</span><br><span class="line">#    tags =&gt; &quot;waf&quot;</span><br><span class="line">    facility_labels =&gt; &quot;local5&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  if [type] == &quot;waf-accesslog&quot; &#123;</span><br><span class="line">    grok &#123;</span><br><span class="line">        patterns_dir =&gt; [&quot;/usr/share/logstash/patterns&quot;]</span><br><span class="line">        match =&gt; &#123; &quot;message&quot; =&gt; &quot;%&#123;WAFACCESS&#125;&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ruby &#123; </span><br><span class="line">        code =&gt; &quot;event.set(&apos;timestamp&apos;, event.get(&apos;@timestamp&apos;))&quot; </span><br><span class="line">    &#125; </span><br><span class="line">    mutate &#123;</span><br><span class="line">      rename =&gt; &#123; &quot;host&quot; =&gt; &quot;host.name&quot; &#125;</span><br><span class="line">      remove_field =&gt; [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;,&quot;E&quot;,&quot;F&quot;,&quot;G&quot;,&quot;H&quot;,&quot;I&quot;,&quot;J&quot;,&quot;K&quot;,&quot;L&quot;,&quot;M&quot;,&quot;O&quot;,&quot;P&quot;,&quot;Q&quot;,&quot;R&quot;,&quot;T&quot;,&quot;X&quot;]</span><br><span class="line">      remove_field =&gt; [&quot;message&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  if [type] == &quot;waf-accesslog&quot; &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;192.168.1.241:9200&quot;]</span><br><span class="line">    index =&gt; &quot;waf-accesslog-%&#123;+YYYY.MM.dd&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-4、重启logstash"><a href="#4-4、重启logstash" class="headerlink" title="4.4、重启logstash"></a>4.4、重启logstash</h3><blockquote>
<p>提示：日志如无ERROR级别的日志，表示数据已开始向ES导入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@elk logstash]# service logstash restart</span><br><span class="line">[root@elk logstash]# ss -tlnup | grep 514</span><br><span class="line">udp    UNCONN     0      0          192.168.1.241:514                   *:*      users:((&quot;java&quot;,10643,101))</span><br><span class="line">tcp    LISTEN     0      50         192.168.1.241:514                   *:*      users:((&quot;java&quot;,10643,86))</span><br><span class="line">[root@elk logstash]# tail -f /var/log/logstash/logstash-plain.log</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="4-5、登录kibana查看数据情况"><a href="#4-5、登录kibana查看数据情况" class="headerlink" title="4.5、登录kibana查看数据情况"></a>4.5、登录kibana查看数据情况</h3><ul>
<li><p>建立WAF索引<br><img src="http://static.zybuluo.com/a807257775/exfxe8fijjo2g0ojjbt4fyjl/image_1dodm1cgoqomu1lghs1vmpbv41f.png" alt="image_1dodm1cgoqomu1lghs1vmpbv41f.png-126.2kB"></p>
</li>
<li><p>通过fields及filter对数据进行过滤展示<br><img src="http://static.zybuluo.com/a807257775/5d9pjlby7h9ljl2z53olab8i/image_1dodm06q43eohbb6e97bnehq12.png" alt="image_1dodm06q43eohbb6e97bnehq12.png-125.4kB"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>ELK文档</category>
      </categories>
      <tags>
        <tag>ELK文档</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK_GROK学习笔记</title>
    <url>/2019/05/06/ELK-GROK%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="ELK-GROK学习笔记"><a href="#ELK-GROK学习笔记" class="headerlink" title="ELK_GROK学习笔记"></a>ELK_GROK学习笔记</h1><p><a href="https://github.com/kkos/oniguruma/blob/master/doc/RE" target="_blank" rel="noopener">oniguruma正则表达式速查表</a></p>
<p><a href="https://www.elastic.co/guide/en/logstash/6.3/plugins-filters-grok.html" target="_blank" rel="noopener">logstash grok插件介绍</a></p>
<p><a href="https://github.com/logstash-plugins/logstash-patterns-core/tree/master/patterns" target="_blank" rel="noopener">logstash自带正则表达式速查表</a></p>
<p><a href="http://tool.oschina.net/uploads/apidocs/jquery/regexp.html" target="_blank" rel="noopener">中文表达式全集速查表</a></p>
]]></content>
      <categories>
        <category>ELK文档</category>
      </categories>
      <tags>
        <tag>ELK文档</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK-Stack简介及安装手册</title>
    <url>/2019/05/06/ELK-Stack%E7%AE%80%E4%BB%8B%E5%8F%8A%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h1 id="ELK-Stack简介及安装手册"><a href="#ELK-Stack简介及安装手册" class="headerlink" title="ELK Stack简介及安装手册"></a>ELK Stack简介及安装手册</h1><h2 id="1、ELK-Stack-简介"><a href="#1、ELK-Stack-简介" class="headerlink" title="1、ELK Stack 简介"></a>1、ELK Stack 简介</h2><ul>
<li><p>ELK是Elasticsearch、Logstash、Kibana的简称，这三者是核心套件，但并非全部，而且还可以添加Redis，kafka，filebeat等软件，后文的四种基本架构中将逐一介绍应用到的其它套件。</p>
</li>
<li><p>Elasticsearch：是一个分布式的实时全文搜索和分析引擎，提供搜集、分析、存储数据三大功能；是一套开放REST和JAVA API等结构提供高效搜索功能，可扩展的分布式系统。它构建于Apache Lucene搜索引擎库之上。</p>
</li>
<li><p>Logstash：是一个用来搜集、分析、过滤日志的工具。它支持几乎任何类型的日志，包括系统日志、错误日志和自定义应用程序日志。它可以从许多来源接收日志，这些来源包括 syslog、消息传递（例如 RabbitMQ）和JMX，它能够以多种方式输出数据，包括电子邮件、websockets和Elasticsearch。</p>
</li>
<li><p>Kibana：是一个基于Web的图形界面，用于搜索、分析和可视化存储在 Elasticsearch指标中的日志数据。它利用Elasticsearch的REST接口来检索数据，不仅允许用户创建他们自己的数据的定制仪表板视图，还允许他们以特殊的方式查询和过滤数据。</p>
</li>
<li><p>Filebeat：ELK 协议栈的新成员，一个轻量级开源日志文件数据搜集器，基于 Logstash-Forwarder 源代码开发，是对它的替代。在需要采集日志数据的 server 上安装 Filebeat，并指定日志目录或日志文件后，Filebeat 就能读取数据，迅速发送到 Logstash 进行解析，亦或直接发送到 Elasticsearch 进行集中式存储和分析。</p>
</li>
</ul>
<h2 id="2、ELK-常用架构及使用场景介绍"><a href="#2、ELK-常用架构及使用场景介绍" class="headerlink" title="2、ELK 常用架构及使用场景介绍"></a>2、ELK 常用架构及使用场景介绍</h2><h3 id="2-1、架构一：基础ELK架构"><a href="#2-1、架构一：基础ELK架构" class="headerlink" title="2.1、架构一：基础ELK架构"></a>2.1、架构一：基础ELK架构</h3><blockquote>
<p>我们先谈谈第一种ELK架构，如图1，这是最简单的一种ELK架构方式。优点是搭建简单，易于上手。缺点是Logstash耗资源较大，运行占用CPU和内存高。另外没有消息队列缓存，存在数据丢失隐患。建议供学习者和小规模集群使用。此架构首先由Logstash分布于各个节点上搜集相关日志、数据，并经过分析、过滤后发送给远端服务器上的Elasticsearch进行存储。Elasticsearch将数据以分片的形式压缩存储并提供多种API供用户查询，操作。用户亦可以更直观的通过配置Kibana Web Portal方便的对日志查询，并根据数据生成报表</p>
</blockquote>
<h4 id="2-1-1、图一："><a href="#2-1-1、图一：" class="headerlink" title="2.1.1、图一："></a>2.1.1、图一：<img src="http://static.zybuluo.com/a807257775/mirce8aemgzpudlyma3bzb7w/image001.png" alt="image001.png-19kB"></h4><h3 id="2-2、架构二：基于消息队列的架构"><a href="#2-2、架构二：基于消息队列的架构" class="headerlink" title="2.2、架构二：基于消息队列的架构"></a>2.2、架构二：基于消息队列的架构</h3><blockquote>
<p>位于各个节点上的Logstash Agent先将数据/日志传递给Kafka（或者Redis），并将队列中消息或数据间接传递给Logstash，Logstash过滤、分析后将数据传递给Elasticsearch存储。最后由Kibana将日志和数据呈现给用户。因为引入了Kafka（或者Redis）,所以即使远端Logstash，server因故障停止运行，数据将会先被存储下来，从而避免数据丢失。这种架构适合于较大集群的解决方案，但由于Logstash中心节点和Elasticsearch的负荷会比较重，可将他们配置为集群模式，以分担负荷，这种架构的优点在于引入了消息队列机制，均衡了网络传输，从而降低了网络闭塞尤其是丢失数据的可能性，但依然存在Logstash占用系统资源过多的问题。</p>
</blockquote>
<h4 id="2-2-2、图二："><a href="#2-2-2、图二：" class="headerlink" title="2.2.2、图二："></a>2.2.2、图二：<img src="http://static.zybuluo.com/a807257775/tmeh8k4a4qm0qcf7trutwhpt/image004.png" alt="image004.png-30.6kB"></h4><h3 id="2-3、架构三：基于Filebeat架构"><a href="#2-3、架构三：基于Filebeat架构" class="headerlink" title="2.3、架构三：基于Filebeat架构"></a>2.3、架构三：基于Filebeat架构</h3><blockquote>
<p>前面提到 Filebeat 已经完全替代了 Logstash-Forwarder 成为新一代的日志采集器，同时鉴于它轻量、安全等特点，越来越多人开始使用它。这个章节将详细讲解如何部署基于 Filebeat 的 ELK 集中式日志解决方案，具体架构见图 三。因为免费的 ELK 没有任何安全机制，所以这里使用了 Nginx 作反向代理，避免用户直接访问 Kibana 服务器。加上配置 Nginx 实现简单的用户认证，一定程度上提高安全性。另外，Nginx 本身具有负载均衡的作用，能够提高系统访问性能。</p>
</blockquote>
<h4 id="2-3-3、图三："><a href="#2-3-3、图三：" class="headerlink" title="2.3.3、图三："></a>2.3.3、图三：<img src="http://static.zybuluo.com/a807257775/y2w6x64b5agplfltki2egbbe/image005.png" alt="image005.png-37.4kB"></h4><h3 id="2-4、总结："><a href="#2-4、总结：" class="headerlink" title="2.4、总结："></a>2.4、总结：</h3><ul>
<li>不管采用上面哪种ELK架构，都包含了其核心组件，即：Logstash、Elasticsearch 和Kibana。当然这三个组件并非不能被替换，只是就性能和功能性而言，这三个组件已经配合的很完美，是密不可分的。各系统运维中究竟该采用哪种架构，可根据现实情况和架构优劣而定</li>
</ul>
<h2 id="3、ELK主要解决了哪些生产问题？"><a href="#3、ELK主要解决了哪些生产问题？" class="headerlink" title="3、ELK主要解决了哪些生产问题？"></a>3、ELK主要解决了哪些生产问题？</h2><blockquote>
<p>ELK在大数据运维系统中的应用，ELK组件各个功能模块如图四所示，它运行于分布式系统之上，通过搜集、过滤、传输、储存，对海量系统和组件日志进行集中管理和准实时搜索、分析，使用搜索、监控、事件消息和报表等简单易用的功能，帮助运维人员进行线上业务的准实时监控、业务异常时及时定位原因、排除故障、程序研发时跟踪分析Bug、业务趋势分析、安全与合规审计，深度挖掘日志的大数据价值。同时Elasticsearch提供多种API（REST JAVA PYTHON等API）供用户扩展开发，以满足其不同需求</p>
</blockquote>
<h3 id="3-1、图四："><a href="#3-1、图四：" class="headerlink" title="3.1、图四："></a>3.1、图四：<img src="http://static.zybuluo.com/a807257775/6eqc92cxvye248zaqiof5a7o/20160205205702084.png" alt="20160205205702084.png-72kB"></h3><h3 id="3-2、总结："><a href="#3-2、总结：" class="headerlink" title="3.2、总结："></a>3.2、总结：</h3><ul>
<li>日志查询，问题排查，上线检查</li>
<li>服务器监控，应用监控，错误报警，Bug管理</li>
<li>性能分析，用户行为分析，安全漏洞分析，时间管理</li>
<li>综上，ELK组件在大数据运维中的应用是一套必不可少的且方便、易用的开源解决方案。</li>
</ul>
<h2 id="4、EFK实战之监控自定义NGINX日志"><a href="#4、EFK实战之监控自定义NGINX日志" class="headerlink" title="4、EFK实战之监控自定义NGINX日志"></a>4、EFK实战之监控自定义NGINX日志</h2><h3 id="4-1、实验环境："><a href="#4-1、实验环境：" class="headerlink" title="4.1、实验环境："></a>4.1、实验环境：</h3><table>
<thead>
<tr>
<th>平台</th>
<th>IP</th>
<th>用途</th>
<th>E版本</th>
<th>F版本</th>
<th>K版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS 6.7 64Bit</td>
<td>192.168.2.245</td>
<td>Elasticsearch+Head+Kibana</td>
<td>6.3.1</td>
<td></td>
<td>6.3.0</td>
</tr>
<tr>
<td>CentOS 6.7 64Bit</td>
<td>192.168.2.246</td>
<td>Elasticsearch+Head</td>
<td>6.3.1</td>
</tr>
<tr>
<td>CentOS 6.7 64Bit</td>
<td>192.168.2.11</td>
<td>Filebeat</td>
<td></td>
<td>6.3.0</td>
</tr>
</tbody>
</table>
<h4 id="4-1-1、配置EPEL源-ELK源"><a href="#4-1-1、配置EPEL源-ELK源" class="headerlink" title="4.1.1、配置EPEL源+ELK源"></a>4.1.1、配置EPEL源+ELK源</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/Packages/e/epel-release-6-8.noarch.rpm</span><br><span class="line">[root@localhost ~]# yum install vim telnet wget nethogs htop glances dstat traceroute lrzsz goaccess ntpdate dos2unix openssl-devel tcpdump lrzsz fio nss curl -y</span><br><span class="line">[root@localhost ~]# yum groupinstall &quot;Development Tools&quot; -y</span><br><span class="line">[root@localhost ~]# vim /etc/yum.repos.d/elasticsearch.repo</span><br><span class="line">    [elasticsearch-6.x]</span><br><span class="line">    name=Elasticsearch repository for 6.x packages</span><br><span class="line">    baseurl=https://artifacts.elastic.co/packages/6.x/yum</span><br><span class="line">    gpgcheck=1</span><br><span class="line">    gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">    enabled=1</span><br><span class="line">    autorefresh=1</span><br><span class="line">    type=rpm-md</span><br><span class="line">[root@localhost ~]# vim /etc/yum.repos.d/kibana.repo</span><br><span class="line">    [kibana-6.x]</span><br><span class="line">    name=Kibana repository for 6.x packages</span><br><span class="line">    baseurl=https://artifacts.elastic.co/packages/6.x/yum</span><br><span class="line">    gpgcheck=1</span><br><span class="line">    gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">    enabled=1</span><br><span class="line">    autorefresh=1</span><br><span class="line">    type=rpm-md</span><br><span class="line">[root@localhost ~]# vim /etc/yum.repos.d/logstash.repo</span><br><span class="line">    [logstash-6.x]</span><br><span class="line">    name=Elastic repository for 6.x packages</span><br><span class="line">    baseurl=https://artifacts.elastic.co/packages/6.x/yum</span><br><span class="line">    gpgcheck=1</span><br><span class="line">    gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">    enabled=1</span><br><span class="line">    autorefresh=1</span><br><span class="line">    type=rpm-md</span><br></pre></td></tr></table></figure>
<h4 id="4-1-2、安装及配置系统环境（all-es）"><a href="#4-1-2、安装及配置系统环境（all-es）" class="headerlink" title="4.1.2、安装及配置系统环境（all_es）"></a>4.1.2、安装及配置系统环境（all_es）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test1 ~]# echo &quot;* - nofile 65536&quot; &gt;&gt; /etc/security/limits.conf</span><br><span class="line">[root@test1 ~]# sed -i &quot;s/1024/65536/g&quot; /etc/security/limits.d/90-nproc.conf</span><br><span class="line">[root@test1 ~]# echo &quot;fs.file-max = 65536&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">[root@test1 ~]# wget http://192.168.1.231/soft/jdk-8u131-linux-x64.tar.gz</span><br><span class="line">[root@test1 ~]# mkdir -pv /usr/java/</span><br><span class="line">[root@test1 ~]# tar xzvf jdk-8u131-linux-x64.tar.gz -C /usr/java/</span><br><span class="line">[root@test1 ~]# ln -s /usr/java/jdk1.8.0_131/bin/java /usr/sbin/</span><br><span class="line">[root@test1 ~]# vim /etc/profile</span><br><span class="line">    JAVA_HOME=/usr/java/jdk1.8.0_131</span><br><span class="line">    export JAVA_HOME</span><br><span class="line">    CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">    export CLASSPATH</span><br><span class="line">    PATH=$JAVA_HOME/bin:$PATH:$HOME/bin:$JAVA_HOME/bin</span><br><span class="line">    export PATH</span><br><span class="line">    export LANG=zh_CN.UTF-8</span><br><span class="line">[root@test1 ~]# reboot</span><br></pre></td></tr></table></figure>
<h4 id="4-1-3、安装Elasticsearch（all-es）"><a href="#4-1-3、安装Elasticsearch（all-es）" class="headerlink" title="4.1.3、安装Elasticsearch（all_es）"></a>4.1.3、安装Elasticsearch（all_es）</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test1 ~]# yum install nss curl ca-certificates -y</span><br><span class="line">[root@test1 ~]# rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch</span><br><span class="line">[root@test1 ~]# yum install elasticsearch -y</span><br><span class="line">    #主配置文件</span><br><span class="line">    /etc/elasticsearch/elasticsearch.yml</span><br><span class="line">    #JAVA启动配置文件</span><br><span class="line">    /etc/elasticsearch/jvm.options</span><br><span class="line">    #ES日志配置文件</span><br><span class="line">    /etc/elasticsearch/log4j2.properties</span><br><span class="line">    #ES启动脚本</span><br><span class="line">    /etc/init.d/elasticsearch</span><br><span class="line">    #ES主程序安装目录</span><br><span class="line">    /usr/share/elasticsearch/</span><br><span class="line">    /usr/share/elasticsearch/plugins</span><br><span class="line">    #ES日志输出目录</span><br><span class="line">    /var/log/elasticsearch</span><br><span class="line">    #ES运行PID文件目录</span><br><span class="line">    /var/run/elasticsearch</span><br><span class="line">[root@test1 ~]# /usr/share/elasticsearch/bin/elasticsearch-plugin install ingest-user-agent</span><br><span class="line">[root@test1 ~]# /usr/share/elasticsearch/bin/elasticsearch-plugin install ingest-geoip</span><br><span class="line">[root@test1 ~]# mkdir -p /data/es-data</span><br><span class="line">[root@test1 ~]# chown -R elasticsearch:elasticsearch /data/es-data</span><br><span class="line">[root@test1 ~]# chown -R elasticsearch:elasticsearch /var/log/elasticsearch/</span><br><span class="line">[root@test1 ~]# chkconfig elasticsearch on</span><br></pre></td></tr></table></figure>
<h4 id="4-1-4、核心配置文件详解"><a href="#4-1-4、核心配置文件详解" class="headerlink" title="4.1.4、核心配置文件详解"></a>4.1.4、核心配置文件详解</h4><ul>
<li><p>/etc/elasticsearch/elasticsearch.yml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ======================== Elasticsearch Configuration =========================</span><br><span class="line">#</span><br><span class="line"># NOTE: Elasticsearch comes with reasonable defaults for most settings.</span><br><span class="line">#       Before you set out to tweak and tune the configuration, make sure you</span><br><span class="line">#       understand what are you trying to accomplish and the consequences.</span><br><span class="line">#</span><br><span class="line"># The primary way of configuring a node is via this file. This template lists</span><br><span class="line"># the most important settings you may want to configure for a production cluster.</span><br><span class="line">#</span><br><span class="line"># Please consult the documentation for further information on configuration options:</span><br><span class="line"># https://www.elastic.co/guide/en/elasticsearch/reference/index.html</span><br><span class="line">#</span><br><span class="line"># ---------------------------------- Cluster -----------------------------------</span><br><span class="line">#集群名称，所有节点的集群名称需要一致</span><br><span class="line">cluster.name: lisir</span><br><span class="line">#本机节点名称</span><br><span class="line">node.name: efk-one</span><br><span class="line"># ----------------------------------- Paths ------------------------------------</span><br><span class="line">#数据存放目录</span><br><span class="line">path.data: /data/es-data</span><br><span class="line">#日志存放目录</span><br><span class="line">path.logs: /var/log/elasticsearch</span><br><span class="line"># ----------------------------------- Memory -----------------------------------</span><br><span class="line">#配置内存使用用交换分区</span><br><span class="line">bootstrap.memory_lock: false</span><br><span class="line"># ---------------------------------- Network -----------------------------------</span><br><span class="line">#监听的网络地址</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line">#开启监听的端口</span><br><span class="line">http.port: 9200</span><br><span class="line"># --------------------------------- Discovery ----------------------------------</span><br><span class="line">#集群内其他节点IP地址，（9300端口是节点内选举所用端口）</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;192.168.2.245:9300&quot;, &quot;192.168.2.246:9300&quot;]</span><br><span class="line">#为了防止数据丢失，配置discovery.zen.minimum_master_nodes非常重要，使每个适合主的节点都知道要形成集群必须可见的适合主的节点的最小数目：(master_eligible_nodes / 2) + 1，换句话说，如果有三个主合格节点，那么最小主节点应该设置为(3/2)+1或2:</span><br><span class="line">discovery.zen.minimum_master_nodes: 2</span><br><span class="line"># ---------------------------------- outher -----------------------------------</span><br><span class="line">#如果要使用head，那么需要增加新的参数,使head插件可以访问es</span><br><span class="line">#开启跨域访问支持，默认为false</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">#跨域访问允许的域名地址，(允许所有域名)以上使用正则</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line">#此配置解决报错“system call filters failed”</span><br><span class="line">bootstrap.system_call_filter: false</span><br></pre></td></tr></table></figure>
</li>
<li><p>/etc/elasticsearch/jvm.options</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## JVM configuration</span><br><span class="line"></span><br><span class="line">################################################################</span><br><span class="line">## IMPORTANT: JVM heap size</span><br><span class="line">################################################################</span><br><span class="line">##</span><br><span class="line">## You should always set the min and max JVM heap</span><br><span class="line">## size to the same value. For example, to set</span><br><span class="line">## the heap to 4 GB, set:</span><br><span class="line">##</span><br><span class="line">## -Xms4g</span><br><span class="line">## -Xmx4g</span><br><span class="line">##</span><br><span class="line">## See https://www.elastic.co/guide/en/elasticsearch/reference/current/heap-size.html</span><br><span class="line">## for more information</span><br><span class="line">##</span><br><span class="line">################################################################</span><br><span class="line">#在默认情况下，Elasticsearch告诉JVM使用最小和最大大小为1GB的堆，在迁移到生产时，重要的是配置堆大小以确保Elasticsearch有足够的可用堆。</span><br><span class="line">#Elasticsearch将在jvm.options中通过Xms(最小堆大小)和Xmx(最大堆大小)的设置分配指定的整个堆。</span><br><span class="line">#这些设置的值取决于服务器上可用RAM的数量，好的经验法则是:</span><br><span class="line">#设置最小堆大小(Xms)和最大堆大小(Xmx)彼此相等</span><br><span class="line">#对Elasticsearch可用的堆越多，它用于缓存的内存就越多，但是请注意，过多的堆可能会使您陷入长时间的垃圾收集停顿</span><br><span class="line">#将Xmx设置为不超过物理RAM的50%，以确保有足够的物理RAM留给内核文件系统缓存</span><br><span class="line">-Xms2g</span><br><span class="line">-Xmx2g</span><br></pre></td></tr></table></figure>
<ul>
<li>/etc/elasticsearch/log4j2.properties</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#配置RollingFile输出源</span><br><span class="line">appender.rolling.type = RollingFile</span><br><span class="line">appender.rolling.name = rolling</span><br><span class="line">#日志到/var/log/elasticsearch/production.log</span><br><span class="line">appender.rolling.fileName = $&#123;sys:es.logs.base_path&#125;$&#123;sys:file.separator&#125;$&#123;sys:es.logs.cluster_name&#125;.log</span><br><span class="line">appender.rolling.layout.type = PatternLayout</span><br><span class="line">appender.rolling.layout.pattern = [%d&#123;ISO8601&#125;][%-5p][%-25c&#123;1.&#125;] %marker%.-10000m%n</span><br><span class="line">#滚动日志到/var/log/elasticsearch/production-yyyy-MM-dd-i.log，日志将被压缩在每个滚动上，并且i将被递增。</span><br><span class="line">appender.rolling.filePattern = $&#123;sys:es.logs.base_path&#125;$&#123;sys:file.separator&#125;$&#123;sys:es.logs.cluster_name&#125;-%d&#123;yyyy-MM-dd&#125;-%i.log.gz</span><br><span class="line">appender.rolling.policies.type = Policies</span><br><span class="line">#使用基于时间的滚动策略</span><br><span class="line">appender.rolling.policies.time.type = TimeBasedTriggeringPolicy</span><br><span class="line">#每天滚动日志</span><br><span class="line">appender.rolling.policies.time.interval = 1</span><br><span class="line">#在一天的边界上对齐滚动条(而不是每24小时滚动一次)</span><br><span class="line">appender.rolling.policies.time.modulate = true</span><br><span class="line">#使用基于大小的滚动策略</span><br><span class="line">appender.rolling.policies.size.type = SizeBasedTriggeringPolicy</span><br><span class="line">#在128MB后滚动日志</span><br><span class="line">appender.rolling.policies.size.size = 128MB</span><br><span class="line">#配置DefaultRolloverStrategy</span><br><span class="line">appender.rolling.strategy.type = DefaultRolloverStrategy</span><br><span class="line">appender.rolling.strategy.fileIndex = nomax</span><br><span class="line">#在滚动日志时使用删除操作</span><br><span class="line">appender.rolling.strategy.action.type = Delete</span><br><span class="line">#Elasticsearch日志的基本路径</span><br><span class="line">appender.rolling.strategy.action.basepath = $&#123;sys:es.logs.base_path&#125;</span><br><span class="line">#只删除匹配文件模式的日志</span><br><span class="line">appender.rolling.strategy.action.condition.type = IfFileName</span><br><span class="line">#模式是只删除主日志</span><br><span class="line">appender.rolling.strategy.action.condition.glob = $&#123;sys:es.logs.cluster_name&#125;-*</span><br><span class="line">#只有当我们积累了太多的压缩日志时才删除</span><br><span class="line">appender.rolling.strategy.action.condition.nested_condition.type = IfAccumulatedFileSize</span><br><span class="line">#压缩日志的大小条件是2GB</span><br><span class="line">appender.rolling.strategy.action.condition.nested_condition.exceeds = 2GB</span><br></pre></td></tr></table></figure>
<h4 id="4-1-5、安装elasticsearch-head"><a href="#4-1-5、安装elasticsearch-head" class="headerlink" title="4.1.5、安装elasticsearch-head"></a>4.1.5、安装elasticsearch-head</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test1 ~]# yum install -y npm</span><br><span class="line">[root@test1 ~]# git clone git://github.com/mobz/elasticsearch-head.git</span><br><span class="line">[root@test1 ~]# cd elasticsearch-head</span><br><span class="line">[root@test1 ~]# npm config set strict-ssl false</span><br><span class="line">[root@test1 ~]# npm install</span><br><span class="line">[root@test1 ~]# npm run start &amp;</span><br></pre></td></tr></table></figure>
<h4 id="4-1-6、安装kibana"><a href="#4-1-6、安装kibana" class="headerlink" title="4.1.6、安装kibana"></a>4.1.6、安装kibana</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test1 ~]# yum install kibana</span><br><span class="line">[root@test1 ~]# chkconfig kibana on</span><br><span class="line">[root@test1 ~]# rpm -ql kibana</span><br><span class="line">    #kibana启动脚本</span><br><span class="line">    /etc/init.d/kibana</span><br><span class="line">    #配置文件</span><br><span class="line">    /etc/kibana/kibana.yml</span><br><span class="line">    #主程序安装路径</span><br><span class="line">    /usr/share/kibana/</span><br></pre></td></tr></table></figure>
<h4 id="4-1-7、kibana核心配置文件详解"><a href="#4-1-7、kibana核心配置文件详解" class="headerlink" title="4.1.7、kibana核心配置文件详解"></a>4.1.7、kibana核心配置文件详解</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 默认值 : 5601 Kibana 由后端服务器提供服务。此设置指定要使用的端口</span><br><span class="line">server.port: 5601</span><br><span class="line"># 默认值 : “localhost” 此设置指定后端服务器的主机默认值 : “localhost” 此设置指定后端服务器的主机</span><br><span class="line">server.host: &quot;0.0.0.0&quot;</span><br><span class="line"># 使您能够指定如果您在代理后运行的 Kibana 的路径。这只影响 Kibana 生成的 URL，您的代理应该在转发请求到 Kibana 之前删除 basePath 值。此设置不能以斜杠（/）结尾。</span><br><span class="line">#server.basePath: &quot;&quot;</span><br><span class="line"># 默认值 : 1048576 传入服务器请求的最大有效负载大小（以字节为单位）。</span><br><span class="line">#server.maxPayloadBytes: 1048576f you are running behind a proxy. This only affects</span><br><span class="line"># 默认值 : “your-hostname” 用于标识此 Kibana 实例的可读的显示名称。</span><br><span class="line">#server.name: &quot;your-hostname&quot;</span><br><span class="line"># 默认值 : “http://localhost:9200” 要用于所有查询的 Elasticsearch 实例的 URL。</span><br><span class="line">elasticsearch.url: &quot;http://localhost:9200&quot;</span><br><span class="line"># 默认值 : true 当此设置的值为 true 时，Kibana 使用 server.host 设置中指定的主机名。当此设置的值为 false 时，Kibana 使用连接到此 Kibana 实例的主机的主机名。</span><br><span class="line">#elasticsearch.preserveHost: true</span><br><span class="line"># 默认值 : “.kibana”Kibana 使用 Elasticsearch 中的索引来存储保存的搜索，可视化和仪表板。如果索引不存在，Kibana 将创建一个新索引。</span><br><span class="line">kibana.index: &quot;.kibana&quot;</span><br><span class="line"># 默认值 : “discover” 要加载的默认应用程序。</span><br><span class="line">#kibana.defaultAppId: &quot;home&quot;</span><br><span class="line"># 如果您的 Elasticsearch 受基本认证保护，这些设置提供 Kibana 服务器用于在启动时对 Kibana 索引执行维护的用户名和密码。您的 Kibana 用户仍需要使用通过 Kibana 服务器代理的 Elasticsearch 进行身份验证。</span><br><span class="line">#elasticsearch.username: &quot;user&quot;</span><br><span class="line">#elasticsearch.password: &quot;pass&quot;</span><br><span class="line"># 分别指向 PEM 格式 SSL 证书和 SSL 密钥文件的路径。这些文件为从 Kibana 服务器到浏览器的传出请求启用 SSL。</span><br><span class="line">#server.ssl.enabled: false</span><br><span class="line">#server.ssl.certificate: /path/to/your/server.crt</span><br><span class="line">#server.ssl.key: /path/to/your/server.key</span><br><span class="line"># 提供 PEM 格式 SSL 证书和密钥文件路径的可选设置。这些文件验证您的 Elasticsearch 后端使用相同的密钥文件。</span><br><span class="line">#elasticsearch.ssl.certificate: /path/to/your/client.crt</span><br><span class="line">#elasticsearch.ssl.key: /path/to/your/client.key</span><br><span class="line"># 可选设置，使您能够为 Elasticsearch 实例指定证书颁发机构的 PEM 文件的路径。</span><br><span class="line">#elasticsearch.ssl.certificateAuthorities: [ &quot;/path/to/your/CA.pem&quot; ]</span><br><span class="line"># 要忽略SSL证书的有效性，请将此设置值更改为“NONE”。</span><br><span class="line">#elasticsearch.ssl.verificationMode: full</span><br><span class="line"># 默认值 : elasticsearch.requestTimeout 设置以毫秒为单位的时间等待 Elasticsearch 对 PING 作出响应。</span><br><span class="line">#elasticsearch.pingTimeout: 1500</span><br><span class="line"># 默认值 : 30000 等待来自后端或 Elasticsearch 的响应的时间（以毫秒为单位）。此值必须为正整数。</span><br><span class="line">#elasticsearch.requestTimeout: 30000</span><br><span class="line"># 默认值 : [ &apos;authorization&apos; ] 要发送到 Elasticsearch 的 Kibana 客户端头标列表。要发送任何客户端头，请将此值设置为 []（一个空列表）。</span><br><span class="line">#elasticsearch.requestHeadersWhitelist: [ authorization ]</span><br><span class="line"># 默认值 : &#123;&#125; 要发送到 Elasticsearch 的 header name 和 value。不管如何配置 elasticsearch.tribe.requestHeadersWhitelist，任何自定义的 header 都不能被客户端的 header 覆盖。</span><br><span class="line">#elasticsearch.customHeaders: &#123;&#125;</span><br><span class="line"># 默认值 : 0 Elasticsearch 等待来自分片的响应的时间（以毫秒为单位）。设置为 0 可禁用。</span><br><span class="line">#elasticsearch.shardTimeout: 0</span><br><span class="line"># 默认值 : 5000 重试前在 Kibana 启动时等待 Elasticsearch 的时间（以毫秒为单位）。</span><br><span class="line">#elasticsearch.startupTimeout: 5000</span><br><span class="line"># 指定 Kibana 创建进程标识文件的路径。</span><br><span class="line">#pid.file: /var/run/kibana.pid</span><br><span class="line"># 默认值 : stdout 允许您指定 Kibana 存储日志输出的文件</span><br><span class="line">#logging.dest: stdout</span><br><span class="line"># 默认值 : false 将此设置的值设置 true 为禁止所有日志记录输出。</span><br><span class="line">#logging.silent: false</span><br><span class="line"># 默认值 : false 将此设置的值设置 true 为禁止除错误消息之外的所有日志记录输出。</span><br><span class="line">#logging.quiet: false</span><br><span class="line"># 默认值 : false 将此设置的值设置为 true 记录所有事件，包括系统使用信息和所有请求。</span><br><span class="line">#logging.verbose: false</span><br><span class="line"># 默认值 : 5000 设置示例系统和过程性能指标的间隔（以毫秒为单位）。最小值为 100。默认值 : 5000 设置示例系统和过程性能指标的间隔（以毫秒为单位）。最小值为 100。</span><br><span class="line">#ops.interval: 5000</span><br><span class="line"># 默认字符集设置</span><br><span class="line">#i18n.defaultLocale: &quot;en&quot;</span><br></pre></td></tr></table></figure>
<h4 id="4-1-8、Filebeat概述："><a href="#4-1-8、Filebeat概述：" class="headerlink" title="4.1.8、Filebeat概述："></a>4.1.8、Filebeat概述：</h4><blockquote>
<p>Filebeat是一个日志文件托运工具，在你的服务器上安装客户端后，filebeat会监控日志目录或者指定的日志文件，追踪读取这些文件（追踪文件的变化，不停的读），并且转发这些信息到elasticsearch或者logstarsh中存放。以下是filebeat的工作流程：当你开启filebeat程序的时候，它会启动一个或多个探测器（prospectors）去检测你指定的日志目录或文件，对于探测器找出的每一个日志文件，filebeat启动收割进程（harvester），每一个收割进程读取一个日志文件的新内容，并发送这些新的日志数据到处理程序（spooler），处理程序会集合这些事件，最后filebeat会发送集合的数据到你指定的地点。如图五：</p>
</blockquote>
<h4 id="4-1-9、图五："><a href="#4-1-9、图五：" class="headerlink" title="4.1.9、图五："></a>4.1.9、图五：<img src="http://static.zybuluo.com/a807257775/pyjtkavq7kgsmhdmv3eh8n4e/filebeat.png" alt="filebeat.png-79.4kB"></h4><h4 id="4-1-10、安装Filebeat"><a href="#4-1-10、安装Filebeat" class="headerlink" title="4.1.10、安装Filebeat"></a>4.1.10、安装Filebeat</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test1 ~]# curl -L -O https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-6.3.0-x86_64.rpm</span><br><span class="line">[root@test1 ~]# rpm -vi filebeat-6.3.0-x86_64.rpm</span><br><span class="line">[root@test1 ~]# chkconfig filebeat on</span><br><span class="line">[root@test1 ~]# rpm -ql filebeat</span><br><span class="line">    #filebeat启动脚本</span><br><span class="line">    /usr/bin/filebeat</span><br><span class="line">    /etc/init.d/filebeat</span><br><span class="line">    #主程序路径</span><br><span class="line">    /usr/share/filebeat/</span><br><span class="line">    #filebeat模块配置文件路径</span><br><span class="line">    /usr/share/filebeat/module</span><br><span class="line">    #主程序安装路径</span><br><span class="line">    /usr/share/kibana/</span><br><span class="line">    #主配置文件路径</span><br><span class="line">    /etc/filebeat</span><br><span class="line">    #模块配置文件夹引用路径</span><br><span class="line">    /etc/filebeat/modules.d/</span><br></pre></td></tr></table></figure>
<h4 id="4-1-11、主配置文件详解：-etc-filebeat-filebeat-yml"><a href="#4-1-11、主配置文件详解：-etc-filebeat-filebeat-yml" class="headerlink" title="4.1.11、主配置文件详解：/etc/filebeat/filebeat.yml"></a>4.1.11、主配置文件详解：/etc/filebeat/filebeat.yml</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#======= Filebeat modules =======</span><br><span class="line">filebeat.config.modules:</span><br><span class="line">  path: $&#123;path.config&#125;/modules.d/*.yml</span><br><span class="line">  reload.enabled: false</span><br><span class="line">  reload.period: 10s</span><br><span class="line"></span><br><span class="line">#======= Elasticsearch template setting  =======</span><br><span class="line">#如修改了默认索引名，此处必须配置</span><br><span class="line">setup.template.name: &quot;nginx&quot;</span><br><span class="line">setup.template.pattern: &quot;nginx-*&quot;</span><br><span class="line">setup.template.fields: &quot;/etc/filebeat/fields.yml&quot;</span><br><span class="line">setup.template.overwrite: &quot;true&quot;</span><br><span class="line">#kiabna展示默认索引名</span><br><span class="line">setup.dashboards.index: &quot;nginx-*&quot;</span><br><span class="line">setup.template.settings:</span><br><span class="line">  index.number_of_shards: 5</span><br><span class="line"></span><br><span class="line">#======= Kibana =======</span><br><span class="line">setup.kibana:</span><br><span class="line">  host: &quot;192.168.2.245:5601&quot;</span><br><span class="line">  </span><br><span class="line">#======= Elasticsearch output =======</span><br><span class="line">#when.contains配置判断输入字段是否包含特定内容，并创建特定的索引，主要用来区分日志</span><br><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;192.168.2.245:9200&quot;,&quot;192.168.2.246:9200&quot;]</span><br><span class="line">  index: &quot;defaults-logs-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">  indices:</span><br><span class="line">    - index: &quot;nginx-error-logs-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">      when.contains:</span><br><span class="line">        fileset.name: &quot;error&quot;</span><br><span class="line">    - index: &quot;nginx-access-logs-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">      when.contains:</span><br><span class="line">        fileset.name: &quot;access&quot;</span><br><span class="line">  # Optional protocol and basic auth credentials.</span><br><span class="line">  #protocol: &quot;https&quot;</span><br><span class="line">  #username: &quot;elastic&quot;</span><br><span class="line">  #password: &quot;changeme&quot;</span><br><span class="line">#多个工作线程开启负载模式</span><br><span class="line">  worker: &quot;2&quot;</span><br></pre></td></tr></table></figure>
<h4 id="4-1-12、开启filebeat-nginx-模块，支持过滤日志"><a href="#4-1-12、开启filebeat-nginx-模块，支持过滤日志" class="headerlink" title="4.1.12、开启filebeat nginx 模块，支持过滤日志"></a>4.1.12、开启filebeat nginx 模块，支持过滤日志</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test1 ~]# filebeat modules enable nginx</span><br></pre></td></tr></table></figure>
<h4 id="4-1-13、载入filebeat自带的仪表盘和可视化代码，通过kibana展示"><a href="#4-1-13、载入filebeat自带的仪表盘和可视化代码，通过kibana展示" class="headerlink" title="4.1.13、载入filebeat自带的仪表盘和可视化代码，通过kibana展示"></a>4.1.13、载入filebeat自带的仪表盘和可视化代码，通过kibana展示</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test1 ~]# filebeat setup --dashboards</span><br></pre></td></tr></table></figure>
<h4 id="4-1-14、修改filebeat-nginx模块配置文件，input数据"><a href="#4-1-14、修改filebeat-nginx模块配置文件，input数据" class="headerlink" title="4.1.14、修改filebeat nginx模块配置文件，input数据"></a>4.1.14、修改filebeat nginx模块配置文件，input数据</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test1 ~]# vim /etc/filebeat/modules.d/nginx.yml</span><br><span class="line">- module: nginx</span><br><span class="line">  # Access logs</span><br><span class="line">  access:</span><br><span class="line">    enabled: true</span><br><span class="line">    #新建access目录用来区分日志</span><br><span class="line">    var.paths: [&quot;/usr/local/nginx/logs/access/*&quot;]</span><br><span class="line"></span><br><span class="line">  error:</span><br><span class="line">    enabled: true</span><br><span class="line">    #新建error目录用来区分日志</span><br><span class="line">    var.paths: [&quot;/usr/local/nginx/logs/error/*&quot;]</span><br></pre></td></tr></table></figure>
<h4 id="4-1-15、修改filebeat-nginx模块access默认配置文件用来匹配自定义日志"><a href="#4-1-15、修改filebeat-nginx模块access默认配置文件用来匹配自定义日志" class="headerlink" title="4.1.15、修改filebeat nginx模块access默认配置文件用来匹配自定义日志"></a>4.1.15、修改filebeat nginx模块access默认配置文件用来匹配自定义日志</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#获取自定义NGINX日志格式</span><br><span class="line">     log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$server_name&quot; &quot;$request&quot; &apos;</span><br><span class="line">          &apos;$status $body_bytes_sent &quot;$request_body&quot; &quot;$http_referer&quot; &apos;</span><br><span class="line">          &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &apos;</span><br><span class="line">          &apos;$connection $upstream_addr &apos;</span><br><span class="line">          &apos;$upstream_response_time $request_time &apos;;</span><br><span class="line">          </span><br><span class="line">#对模块源码进行调整，匹配自定义NGINX格式，注意数据类型</span><br><span class="line">[root@test1 ~]# vim /usr/share/filebeat/module/nginx/access/ingest/default.json</span><br><span class="line">&quot;patterns&quot;:[</span><br><span class="line">            &quot;\&quot;?%&#123;IP_LIST:nginx.access.remote_ip_list&#125; - %&#123;DATA:nginx.access.user_name&#125; \\[%&#123;HTTPDATE:nginx.access.time&#125;\\] \&quot;%&#123;DATA:nginx.access.servername&#125;\&quot; \&quot;%&#123;GREEDYDATA:nginx.access.info&#125;\&quot; %&#123;NUMBER:nginx.access.response_code&#125; %&#123;NUMBER:nginx.access.body_sent.bytes&#125; \&quot;%&#123;DATA:nginx.access.request_body&#125;\&quot; \&quot;%&#123;DATA:nginx.access.referrer&#125;\&quot; \&quot;%&#123;DATA:nginx.access.agent&#125;\&quot; \&quot;%&#123;DATA:nginx.access.http_x_forwarded_for&#125;\&quot; %&#123;NUMBER:nginx.access.connection&#125; %&#123;DATA:nginx.access.upstream_addr&#125; %&#123;DATA:nginx.access.upstream_response_time&#125; %&#123;DATA:nginx.access.request_time&#125;&quot;]</span><br><span class="line"></span><br><span class="line">#默认的nginx模块只支持默认日志格式，如有变动需要在此处新增字段名，文章过长，只展示新增部分</span><br><span class="line">[root@test1 ~]# vim /etc/filebeat/fields.yml</span><br><span class="line">- key: nginx</span><br><span class="line">  title: &quot;Nginx&quot;</span><br><span class="line">  description: &gt;</span><br><span class="line">    Module for parsing the Nginx log files.</span><br><span class="line">  short_config: true</span><br><span class="line">  fields:</span><br><span class="line">    ......</span><br><span class="line">            - name: servername</span><br><span class="line">              type: keyword</span><br><span class="line">              description: &gt;</span><br><span class="line">                The http servername</span><br><span class="line">            - name: request_body</span><br><span class="line">              type: text</span><br><span class="line">              format: bytes</span><br><span class="line">              description: &gt;</span><br><span class="line">                The http request_body   </span><br><span class="line">            - name: referrer</span><br><span class="line">              type: keyword</span><br><span class="line">              description: &gt;</span><br><span class="line">                The HTTP referrer.</span><br><span class="line">            - name: http_x_forwarded_for</span><br><span class="line">              type: text</span><br><span class="line">              description: &gt;</span><br><span class="line">                The http http_x_forwarded_for  </span><br><span class="line">            - name: connection</span><br><span class="line">              type: keyword</span><br><span class="line">              example: GET</span><br><span class="line">              description: &gt;</span><br><span class="line">                The http connection</span><br><span class="line">            - name: upstream_addr</span><br><span class="line">              type: keyword</span><br><span class="line">              example: GET</span><br><span class="line">              description: &gt;</span><br><span class="line">                The http upstream_addr</span><br><span class="line">            - name: upstream_response_time</span><br><span class="line">              type: keyword</span><br><span class="line">              example: GET</span><br><span class="line">              description: &gt;</span><br><span class="line">                The http upstream_response_time</span><br><span class="line">            - name: request_time</span><br><span class="line">              type: keyword</span><br><span class="line">              example: GET</span><br><span class="line">              description: &gt;</span><br><span class="line">                The http request_time              </span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<h4 id="4-1-16、修改filebeat-nginx模块error默认配置文件用来解决时区问题"><a href="#4-1-16、修改filebeat-nginx模块error默认配置文件用来解决时区问题" class="headerlink" title="4.1.16、修改filebeat nginx模块error默认配置文件用来解决时区问题"></a>4.1.16、修改filebeat nginx模块error默认配置文件用来解决时区问题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test1 ~]#vim /usr/share/filebeat/module/nginx/error/ingest</span><br><span class="line">    &quot;date&quot;: &#123;</span><br><span class="line">      &quot;field&quot;: &quot;nginx.error.time&quot;,</span><br><span class="line">      &quot;target_field&quot;: &quot;@timestamp&quot;,</span><br><span class="line">      &quot;formats&quot;: [&quot;YYYY/MM/dd H:m:s&quot;],</span><br><span class="line">      &quot;timezone&quot;: &quot;Asia/Shanghai&quot;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="4-1-17、启动filebeat，观察日志"><a href="#4-1-17、启动filebeat，观察日志" class="headerlink" title="4.1.17、启动filebeat，观察日志"></a>4.1.17、启动filebeat，观察日志</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test1 ~]# service filebeat start</span><br><span class="line">[root@test1 ~]# filebeat -e #开启debug模式</span><br></pre></td></tr></table></figure>
<h2 id="5、相关手册整理"><a href="#5、相关手册整理" class="headerlink" title="5、相关手册整理"></a>5、相关手册整理</h2><blockquote>
<p><a href="https://www.elastic.co/guide/index.html" target="_blank" rel="noopener">官方文档：Elastic Stack and Product Documentation</a></p>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.3/index.html" target="_blank" rel="noopener">官方文档：Elasticsearch Reference</a></p>
<p><a href="https://www.elastic.co/guide/en/logstash/6.3/index.html" target="_blank" rel="noopener">官方文档：Logstash Reference</a></p>
<p><a href="https://www.elastic.co/guide/en/beats/filebeat/current/index.html" target="_blank" rel="noopener">官方文档：Filebeat Reference</a></p>
<p><a href="https://www.elastic.co/guide/en/kibana/6.3/index.html" target="_blank" rel="noopener">官方文档：Kibana User Guide</a></p>
<p><a href="https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-template.html#load-template-manually" target="_blank" rel="noopener">官方文档：关于Load the index template in Elasticsearch</a></p>
<p><a href="http://grok.elasticsearch.cn/" target="_blank" rel="noopener">Grok Debugger</a></p>
<p><a href="http://grokdebug.herokuapp.com/patterns" target="_blank" rel="noopener">Grok 官方自带Patterns</a></p>
<p><a href="https://github.com/anbai-inc/Kibana_Hanization" target="_blank" rel="noopener">Kibana汉化地址</a></p>
<p><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-elk-filebeat/index.html/" target="_blank" rel="noopener">ELK+Filebeat 集中式日志解决方案详解</a></p>
<p><a href="http://blog.51cto.com/tryingstuff/2052271" target="_blank" rel="noopener">ELK-filebeat收集日志到Kafka，并转存ES</a></p>
<p><a href="https://www.cnblogs.com/huangll99/p/6646859.html" target="_blank" rel="noopener">Logstash收集nginx日志之使用grok过滤插件解析日志</a></p>
<p><a href="http://bbotte.com/logs-service/use-elk-processing-logs-multiple-log-file-send/" target="_blank" rel="noopener">ELK日志服务使用-filebeat多文件发送</a></p>
<p><a href="https://nickcanzoneri.com/elasticsearch-settings/" target="_blank" rel="noopener">ElasticSearch Settings全部参数和默认值</a></p>
<p><a href="http://elasticsearch-cheatsheet.jolicode.com/" target="_blank" rel="noopener">ElasticSearch 常用命令</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI2NDY1MTA3OQ==&amp;mid=2247484088&amp;idx=1&amp;sn=16598e20a98417416bbe6efa5e0d1c7c&amp;chksm=eaa82a90dddfa386e276b81ef3079041538faecf5feae28e67c193eb5a239b062b01d4a076e5&amp;mpshare=1&amp;scene=23&amp;srcid=0710FKC7JMiLmbtOJ7SCqIFT#rd" target="_blank" rel="noopener">ElasticSearch 常用工具清单</a></p>
</blockquote>
]]></content>
      <categories>
        <category>ELK文档</category>
      </categories>
      <tags>
        <tag>ELK文档</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK-logstash笔记</title>
    <url>/2019/05/06/ELK-logstash%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="ELK-logstash笔记"><a href="#ELK-logstash笔记" class="headerlink" title="ELK-logstash笔记"></a>ELK-logstash笔记</h1><p><a href="https://www.elastic.co/guide/en/logstash/6.3/plugins-codecs-multiline.html" target="_blank" rel="noopener">官方_多行合并，解决java异常和错误堆栈信息</a></p>
<p><a href="https://www.elastic.co/guide/en/logstash/6.3/plugins-filters-mutate.html" target="_blank" rel="noopener">官方_mutate过滤插件介绍</a></p>
<p><a href="https://www.elastic.co/guide/en/logstash/6.3/plugins-filters-grok.html" target="_blank" rel="noopener">官方_grok过滤插件介绍</a></p>
<p><a href="https://www.elastic.co/guide/en/logstash/6.3/plugins-filters-date.html" target="_blank" rel="noopener">官方_data过滤插件介绍</a></p>
<p><a href="https://www.elastic.co/guide/en/logstash/6.3/plugins-filters-elasticsearch.html" target="_blank" rel="noopener">官方_elasticsearch过滤插件介绍</a></p>
<p><a href="https://www.elastic.co/guide/en/logstash/6.3/plugins-outputs-elasticsearch.html" target="_blank" rel="noopener">官方_elasticsearch输出插件介绍</a></p>
<p><a href="https://www.elastic.co/guide/en/logstash/6.3/plugins-inputs-beats.html" target="_blank" rel="noopener">官方_beats输入插件介绍</a></p>
<p><a href="https://www.elastic.co/guide/en/logstash/6.3/plugins-inputs-file.html" target="_blank" rel="noopener">官方_file输入插件介绍</a></p>
<p><a href="https://www.elastic.co/guide/en/logstash/6.3/config-examples.html" target="_blank" rel="noopener">官方_logstash配置模板</a></p>
<p><a href="https://blog.csdn.net/qq_34021712/article/details/79746413" target="_blank" rel="noopener">grok过滤插件介绍_中文</a></p>
<p><a href="https://www.jianshu.com/p/d46b911fb83e" target="_blank" rel="noopener">使用Logstash filter grok过滤日志文件</a></p>
<p><a href="https://elasticsearch.cn/question/4007" target="_blank" rel="noopener">logstash时区问题_1</a></p>
<p> <a href="https://elasticsearch.cn/question/1630" target="_blank" rel="noopener">logstash时区问题_2</a></p>
<p> <a href="https://elasticsearch.cn/question/3883" target="_blank" rel="noopener">logstash动态索引</a></p>
<p> <a href="http://www.51niux.com/?id=215" target="_blank" rel="noopener">Logstash将日志产生时间替换@timestamp</a></p>
]]></content>
      <categories>
        <category>ELK文档</category>
      </categories>
      <tags>
        <tag>ELK文档</tag>
      </tags>
  </entry>
  <entry>
    <title>ELK使用问题汇总</title>
    <url>/2019/06/27/ELK%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h1 id="ELK使用问题汇总"><a href="#ELK使用问题汇总" class="headerlink" title="ELK使用问题汇总"></a>ELK使用问题汇总</h1><h4 id="关于ElasticSearch的聚类时出现fielddata-true问题"><a href="#关于ElasticSearch的聚类时出现fielddata-true问题" class="headerlink" title="关于ElasticSearch的聚类时出现fielddata=true问题"></a>关于ElasticSearch的聚类时出现fielddata=true问题</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">实例：</span><br><span class="line">PUT nginx-211error-6.3.0-2018.07.09/_mapping/doc</span><br><span class="line">&#123;</span><br><span class="line">   &quot;properties&quot;:&#123; </span><br><span class="line">    &quot;nginx.error.level&quot;:&#123;</span><br><span class="line">      &quot;type&quot;:&quot;text&quot;,</span><br><span class="line">      &quot;fielddata&quot;:true </span><br><span class="line">    &#125; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">举例：</span><br><span class="line">PUT $my_index/_mapping/$my_type</span><br><span class="line">&#123;</span><br><span class="line">   &quot;properties&quot;:&#123; </span><br><span class="line">    &quot;my_field&quot;:&#123;</span><br><span class="line">      &quot;type&quot;:&quot;text&quot;,</span><br><span class="line">      &quot;fielddata&quot;:true </span><br><span class="line">    &#125; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="关于filebeat-output-ElasticSearch时区分索引的配置："><a href="#关于filebeat-output-ElasticSearch时区分索引的配置：" class="headerlink" title="关于filebeat output ElasticSearch时区分索引的配置："></a>关于filebeat output ElasticSearch时区分索引的配置：</h4><h6 id="Examples-elasticsearch-output-with-indices"><a href="#Examples-elasticsearch-output-with-indices" class="headerlink" title="Examples elasticsearch output with indices:"></a>Examples elasticsearch output with indices:</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">output.elasticsearch:</span><br><span class="line">  hosts: [&quot;http://localhost:9200&quot;]</span><br><span class="line">  index: &quot;logs-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">  indices:</span><br><span class="line">    - index: &quot;critical-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">      when.contains:</span><br><span class="line">        message: &quot;CRITICAL&quot;</span><br><span class="line">    - index: &quot;error-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">      when.contains:</span><br><span class="line">        message: &quot;ERR&quot;</span><br></pre></td></tr></table></figure>
<h6 id="Example-elasticsearch-output-with-pipelines"><a href="#Example-elasticsearch-output-with-pipelines" class="headerlink" title="Example elasticsearch output with pipelines:"></a>Example elasticsearch output with pipelines:</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filebeat.inputs:</span><br><span class="line">- type: log</span><br><span class="line">  paths: [&quot;/var/log/app/normal/*.log&quot;]</span><br><span class="line">  fields:</span><br><span class="line">    type: &quot;normal&quot;</span><br><span class="line">- type: log</span><br><span class="line">  paths: [&quot;/var/log/app/critical/*.log&quot;]</span><br><span class="line">  fields:</span><br><span class="line">    type: &quot;critical&quot;</span><br></pre></td></tr></table></figure>
<h6 id="output-elasticsearch"><a href="#output-elasticsearch" class="headerlink" title="output.elasticsearch:"></a>output.elasticsearch:</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hosts: [&quot;http://localhost:9200&quot;]</span><br><span class="line">  index: &quot;filebeat-%&#123;[beat.version]&#125;-%&#123;+yyyy.MM.dd&#125;&quot;</span><br><span class="line">  pipelines:</span><br><span class="line">    - pipeline: critical_pipeline</span><br><span class="line">      when.equals:</span><br><span class="line">        fields.type: &quot;critical&quot;</span><br><span class="line">    - pipeline: normal_pipeline</span><br><span class="line">      when.equals:</span><br><span class="line">        fields.type: &quot;normal&quot;</span><br></pre></td></tr></table></figure>
<h4 id="关于kibana展示日志相差8小时的解决方案："><a href="#关于kibana展示日志相差8小时的解决方案：" class="headerlink" title="关于kibana展示日志相差8小时的解决方案："></a>关于kibana展示日志相差8小时的解决方案：</h4><blockquote>
<p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/date-processor.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/reference/current/date-processor.html</a></p>
</blockquote>
<blockquote>
<p><a href="https://elasticsearch.cn/question/4754" target="_blank" rel="noopener">https://elasticsearch.cn/question/4754</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;date&quot;: &#123;</span><br><span class="line">      &quot;field&quot;: &quot;nginx.error.time&quot;,</span><br><span class="line">      &quot;target_field&quot;: &quot;@timetamp&quot;,</span><br><span class="line">      &quot;formats&quot;: [&quot;YYYY/MM/dd H:m:s&quot;]</span><br><span class="line">      &quot;timezone&quot;: &quot;Asia/Shanghai&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="关于logstash输出到es展示日志缺少时间戳的解决方案-可实现动态索引-："><a href="#关于logstash输出到es展示日志缺少时间戳的解决方案-可实现动态索引-：" class="headerlink" title="关于logstash输出到es展示日志缺少时间戳的解决方案(可实现动态索引)："></a>关于logstash输出到es展示日志缺少时间戳的解决方案(可实现动态索引)：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filter &#123;</span><br><span class="line">....</span><br><span class="line">  date &#123;</span><br><span class="line">    match =&gt; [ &quot;tomcat_datestamp&quot;, &quot;yyyy-MM-dd HH:mm:ss,SSS&quot; ]</span><br><span class="line">    target =&gt; &quot;@timestamp&quot;</span><br><span class="line">  &#125;</span><br><span class="line">  ruby &#123; </span><br><span class="line">    code =&gt; &quot;event.set(&apos;timestamp&apos;, event.get(&apos;@timestamp&apos;).time.localtime + 8*60*60)&quot; </span><br><span class="line">  &#125; </span><br><span class="line">  mutate &#123; </span><br><span class="line">    add_field =&gt; &#123; &quot;remote_ip&quot; =&gt; &quot;192.168.2.15&quot; &#125;</span><br><span class="line">    convert =&gt; [&quot;timestamp&quot;, &quot;string&quot;] </span><br><span class="line">    gsub =&gt; [ &quot;message&quot;, &quot;\r&quot;, &quot;&quot; ]  </span><br><span class="line">    gsub =&gt; [&quot;timestamp&quot;, &quot;T([\S\s]*?)Z&quot;, &quot;&quot;] </span><br><span class="line">    gsub =&gt; [&quot;timestamp&quot;, &quot;-&quot;, &quot;.&quot;] </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  if [type] == &quot;java-log-utf-8&quot; &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">    hosts =&gt; [&quot;192.168.2.245:9200&quot;]</span><br><span class="line">    index =&gt; &quot;java-log-utf-8-%&#123;timestamp&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">....</span><br></pre></td></tr></table></figure>
<h4 id="关于logstash收集java日志乱码-错误堆栈-排除文件的解决方案："><a href="#关于logstash收集java日志乱码-错误堆栈-排除文件的解决方案：" class="headerlink" title="关于logstash收集java日志乱码/错误堆栈/排除文件的解决方案："></a>关于logstash收集java日志乱码/错误堆栈/排除文件的解决方案：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; &quot;/data/java_log/*&quot;</span><br><span class="line">    type =&gt; &quot;java-log-utf-8&quot;</span><br><span class="line">    #排除目录下.gz的文件</span><br><span class="line">    exclude =&gt; &quot;*.gz&quot;</span><br><span class="line">      start_position =&gt; &quot;beginning&quot;</span><br><span class="line">      stat_interval =&gt; &quot;1&quot;</span><br><span class="line">      codec =&gt; multiline &#123;</span><br><span class="line">      #文件编码</span><br><span class="line">      charset =&gt; &quot;UTF-8&quot; </span><br><span class="line">      #匹配开头是时间戳的行</span><br><span class="line">      pattern =&gt; &quot;^%&#123;TIMESTAMP_ISO8601&#125; &quot;</span><br><span class="line">      #正则生效，满足则放弃，反之亦然</span><br><span class="line">      negate =&gt; true</span><br><span class="line">      #不匹配则与上一行合并</span><br><span class="line">      what =&gt; &quot;previous&quot;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h4 id="单节点ElasticSearch出现unassigned的原因及解决办法"><a href="#单节点ElasticSearch出现unassigned的原因及解决办法" class="headerlink" title="单节点ElasticSearch出现unassigned的原因及解决办法"></a>单节点ElasticSearch出现unassigned的原因及解决办法</h4><blockquote>
<p>导致的原因：副本分片的主要目的就是为了故障转移，正如在 集群内的原理 中讨论的：如果持有主分片的节点挂掉了，一个副本分片就会晋升为主分片的角色。那么可以看出来副本分片和主分片是不能放到一个节点上面的，可是在只有一个节点的集群里，副本分片没有办法分配到其他的节点上，所以出现所有副本分片都unassigned得情况。因为只有一个节点，如果存在主分片节点挂掉了，那么整个集群理应就挂掉了，不存在副本分片升为主分片的情况。解决办法就是，在单节点的elasticsearch集群，删除存在副本分片的索引，新建索引的副本都设为0<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#使用PUT方法设置索引副本数为0即可</span><br><span class="line">PUT nginx-128-errorlogs-2018.10.31/_settings</span><br><span class="line">&#123;</span><br><span class="line">  &quot;number_of_replicas&quot;: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h4 id="ELK中文分词器的安装与使用"><a href="#ELK中文分词器的安装与使用" class="headerlink" title="ELK中文分词器的安装与使用"></a>ELK中文分词器的安装与使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">项目地址：https://github.com/medcl/elasticsearch-analysis-ik</span><br></pre></td></tr></table></figure>
<h4 id="kiabna开发工具中-GROK的使用方法"><a href="#kiabna开发工具中-GROK的使用方法" class="headerlink" title="kiabna开发工具中-GROK的使用方法"></a>kiabna开发工具中-GROK的使用方法</h4><ul>
<li>(?&lt;TOMCAT_DATESTAMP&gt;20(?&gt;\d\d){1,2}-(?:0?[1-9]|1[0-2])-(?:(?:0[1-9])|(?:[12][0-9])|(?:3[01])|[1-9])(?:2[0123]|[01]?[0-9]):?(?:[0-5][0-9])(?::?(?:(?:[0-5]?[0-9]|60)(?:[:.,][0-9]+)?)))</li>
<li>(?<thread> \S+)</thread></li>
<li>(?&lt;LOG_LEVEL&gt; ([Aa]lert|ALERT|[Tt]race|TRACE|[Dd]ebug|DEBUG|[Nn]otice|NOTICE|[Ii]nfo|INFO|[Ww]arn?(?:ing)?|WARN?(?:ING)?|[Ee]rr?(?:or)?|ERR?(?:OR)?|[Cc]rit?(?:ical)?|CRIT?(?:ICAL)?|[Ff]atal|FATAL|[Ss]evere|SEVERE|EMERG(?:ENCY)?|[Ee]merg(?:ency)?)\s?)</li>
<li>(?&lt;COM_RONGLIAN&gt; \S+)</li>
<li>(?<unknown> \S+)</unknown></li>
<li>(?<message> .*)</message></li>
</ul>
<h4 id="logstash-output-elasticsearch-索引分片数的设置"><a href="#logstash-output-elasticsearch-索引分片数的设置" class="headerlink" title="logstash output elasticsearch 索引分片数的设置"></a>logstash output elasticsearch 索引分片数的设置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#官网文档如是解释：</span><br><span class="line">The number of primary shards that an index should have. Defaults to 5. This setting can only be set at index creation time.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -XPUT &apos;http://192.168.1.241:9200/_template/logstash-*&apos; -H &apos;Content-Type: application/json&apos; -d&apos;&#123;</span><br><span class="line">    &quot;index_patterns&quot; : [&quot;*&quot;],</span><br><span class="line">    &quot;order&quot; : 0,</span><br><span class="line">    &quot;settings&quot; : &#123;</span><br><span class="line">        &quot;number_of_shards&quot; : 2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ELK文档</category>
      </categories>
      <tags>
        <tag>ELK文档</tag>
      </tags>
  </entry>
  <entry>
    <title>ES7.14未经授权漏洞整改手册</title>
    <url>/2023/11/30/ES7.14%E6%9C%AA%E7%BB%8F%E6%8E%88%E6%9D%83%E6%BC%8F%E6%B4%9E%E6%95%B4%E6%94%B9%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h1 id="ES7-14未经授权漏洞整改手册"><a href="#ES7-14未经授权漏洞整改手册" class="headerlink" title="ES7.14未经授权漏洞整改手册"></a>ES7.14未经授权漏洞整改手册</h1><h2 id="ES集群侧"><a href="#ES集群侧" class="headerlink" title="ES集群侧"></a>ES集群侧</h2><p>###1、关停ES集群，需要在三台机器上进行执行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef|grep &apos;elasticsearch-7.14.0&apos;|grep -v grep|awk &apos;&#123;print $2&#125;&apos;|xargs kill -9</span><br></pre></td></tr></table></figure></p>
<p>###2、创建证书存放路径，需要在三台机器上进行执行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -pv /home/ap/iflytek/yth-apps/system/elasticsearch-7.14.0/config/certs</span><br></pre></td></tr></table></figure></p>
<p>###3、生成CA证书，任意一台AILOG执行即可<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /home/ap/iflytek/yth-apps/system/elasticsearch-7.14.0/config/certs</span><br><span class="line">/home/ap/iflytek/yth-apps/system/elasticsearch-7.14.0/bin/elasticsearch-certutil ca</span><br><span class="line">/home/ap/iflytek/yth-apps/system/elasticsearch-7.14.0/bin/elasticsearch-certutil cert --ca elastic-stack-ca.p12</span><br></pre></td></tr></table></figure></p>
<p>###4、拷贝证书文件到AILOG单元内的所有ES集群上的certs目录<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将文件elastic-certificates.p12和elastic-stack-ca.p12文件cp到nas下，并cp到其他的es集群主机内进行同步</span><br></pre></td></tr></table></figure></p>
<p>###5、修改elasticsearch.yml主配置文件,文件结尾追加如下内容：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#开启xpack功能,实现密码验证功能</span><br><span class="line">xpack.security.enabled: true</span><br><span class="line">xpack.license.self_generated.type: basic</span><br><span class="line">xpack.security.transport.ssl.enabled: true</span><br><span class="line">xpack.security.transport.ssl.verification_mode: certificate</span><br><span class="line">xpack.security.transport.ssl.client_authentication: required</span><br><span class="line">xpack.security.transport.ssl.keystore.path: certs/elastic-certificates.p12</span><br><span class="line">xpack.security.transport.ssl.truststore.path: certs/elastic-certificates.p12</span><br></pre></td></tr></table></figure></p>
<p>###6、启动ES集群，三台机器都要操作<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/home/ap/iflytek/yth-apps/system/elasticsearch-7.14.0/bin/elasticsearch -d</span><br></pre></td></tr></table></figure></p>
<p>###7、设置初始密码</p>
<ul>
<li>所有用户统一密码：Szzt@123</li>
<li>登录任意AILOG任意机器，执行：/home/ap/iflytek/yth-apps/system/elasticsearch-7.14.0/bin/elasticsearch-setup-passwords interactive<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Initiating the setup of passwords for reserved users elastic,apm_system,kibana,logstash_system,beats_system,remote_monitoring_user.</span><br><span class="line">You will be prompted to enter passwords as the process progresses.</span><br><span class="line">Please confirm that you would like to continue [y/N]y</span><br><span class="line">Enter password for [elastic]:</span><br><span class="line">Reenter password for [elastic]:</span><br><span class="line">Enter password for [apm_system]:</span><br><span class="line">Reenter password for [apm_system]:</span><br><span class="line">Enter password for [kibana]:</span><br><span class="line">Reenter password for [kibana]:</span><br><span class="line">Enter password for [logstash_system]:</span><br><span class="line">Reenter password for [logstash_system]:</span><br><span class="line">Enter password for [beats_system]:</span><br><span class="line">Reenter password for [beats_system]:</span><br><span class="line">Enter password for [remote_monitoring_user]:</span><br><span class="line">Reenter password for [remote_monitoring_user]:</span><br><span class="line">Changed password for user [apm_system]</span><br><span class="line">Changed password for user [kibana]</span><br><span class="line">Changed password for user [logstash_system]</span><br><span class="line">Changed password for user [beats_system]</span><br><span class="line">Changed password for user [remote_monitoring_user]</span><br><span class="line">Changed password for user [elastic]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>##数据采集端侧</p>
<p>###1、关停采集端服务<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -ef|grep &apos;logstash-7.14.0&apos;|grep -v grep|awk &apos;&#123;print $2&#125;&apos;|xargs kill -9</span><br></pre></td></tr></table></figure></p>
<p>###2、修改配置文件<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /home/ap/iflytek/yth-apps/system/logstash-7.14.0/config/conf.d</span><br><span class="line">#修改如下三个文件</span><br><span class="line">vim ask_ol_chan_outes.conf</span><br><span class="line">vim faq_ol_chan_outes.conf</span><br><span class="line">vim session_ol_chan_outes.conf</span><br><span class="line">#在ouput中，添加user和passwod的配置</span><br><span class="line">output &#123;</span><br><span class="line">  elasticsearch &#123;</span><br><span class="line">  hosts =&gt; [&quot;10.255.35.175:19200&quot;,&quot;10.255.35.168:19200&quot;,&quot;10.255.35.116:19200&quot;]</span><br><span class="line">  index =&gt; &quot;ol-chan-ask-%&#123;timestamp&#125;&quot;</span><br><span class="line">  user =&gt; &quot;elastic&quot;</span><br><span class="line">  password =&gt; &quot;Szzt@123&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
<p>###3、启动logstash采集服务<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /home/ap/ccb-yth/yth-apps/system/logstash-7.14.0/bin</span><br><span class="line">sh logstash.sh</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>ELK文档</category>
      </categories>
      <tags>
        <tag>ELK文档</tag>
      </tags>
  </entry>
  <entry>
    <title>ES故障节点平替方案-2022</title>
    <url>/2022/12/30/ES%E6%95%85%E9%9A%9C%E8%8A%82%E7%82%B9%E5%B9%B3%E6%9B%BF%E6%96%B9%E6%A1%88-2022/</url>
    <content><![CDATA[<h1 id="ES故障节点平替方案-2022"><a href="#ES故障节点平替方案-2022" class="headerlink" title="ES故障节点平替方案-2022"></a>ES故障节点平替方案-2022</h1><h2 id="1、事件背景"><a href="#1、事件背景" class="headerlink" title="1、事件背景"></a>1、事件背景</h2><blockquote>
<p>2022年8月11日早间7:26分微信告警，集群出现<code>没有分配一个或多个复制分片</code>，状态为YELLOW状态，随后全面排查服务器相关节点日志后，发现10.32.58.118的系统MESSAGE日志出现磁盘错误（EXT4-fs (vdb1): Delayed block allocation failed for inode 3932853 at logical offset 77824 with max blocks 2048 with error 5），经金融云技术人员分析服务磁盘很可能已经出现逻辑坏道，需要执行fsck文件系统修复，此修复必须要重启机器执行。需在保证业务连续性的情况下，平替节点（不更换ES节点IP）。</p>
</blockquote>
<h2 id="2、集群信息汇总"><a href="#2、集群信息汇总" class="headerlink" title="2、集群信息汇总"></a>2、集群信息汇总</h2><table>
<thead>
<tr>
<th>平台</th>
<th>IP</th>
<th>用途</th>
<th>ES版本</th>
<th>磁盘容量</th>
<th>资源配置</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS 7.4.1708</td>
<td>10.32.58.117</td>
<td>ES</td>
<td>7.3.2</td>
<td>1TB</td>
<td>32C/64G</td>
<td>生产</td>
</tr>
<tr>
<td>CentOS 7.4.1708</td>
<td>10.32.58.118</td>
<td>ES</td>
<td>7.3.2</td>
<td>1TB</td>
<td>32C/64G</td>
<td>生产(fault)</td>
</tr>
<tr>
<td>CentOS 7.4.1708</td>
<td>10.32.58.119</td>
<td>ES</td>
<td>7.3.2</td>
<td>1TB</td>
<td>32C/64G</td>
<td>生产</td>
</tr>
<tr>
<td>CentOS 7.4.1708</td>
<td>10.32.58.145</td>
<td>ES</td>
<td>7.3.2</td>
<td>1TB</td>
<td>32C/64G</td>
<td>生产</td>
</tr>
<tr>
<td>CentOS 7.4.1708</td>
<td>10.32.58.146</td>
<td>ES</td>
<td>7.3.2</td>
<td>1TB</td>
<td>32C/64G</td>
<td>生产</td>
</tr>
<tr>
<td>CentOS 7.4.1708</td>
<td>10.32.58.170</td>
<td>ES</td>
<td>7.3.2</td>
<td>1TB</td>
<td>32C/64G</td>
<td>生产(new)</td>
</tr>
</tbody>
</table>
<h2 id="3、节点平替方案"><a href="#3、节点平替方案" class="headerlink" title="3、节点平替方案"></a>3、节点平替方案</h2><h3 id="3-1、确认集群磁盘容量策略及当前可用容量"><a href="#3-1、确认集群磁盘容量策略及当前可用容量" class="headerlink" title="3.1、确认集群磁盘容量策略及当前可用容量"></a>3.1、确认集群磁盘容量策略及当前可用容量</h3><ul>
<li>查看集群磁盘容量策略：<code>GET _cluster/settings?include_defaults&amp;flat_settings</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;cluster.routing.allocation.disk.watermark.high&quot; : &quot;90%&quot;,</span><br><span class="line">&quot;cluster.routing.allocation.disk.watermark.low&quot; : &quot;85%&quot;,</span><br><span class="line">&quot;cluster.routing.allocation.enable&quot; : &quot;all&quot;,</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>提示：注意目标节点的空间是否充足，满足磁盘分片创建的水位线。</p>
</blockquote>
<h3 id="3-2、关闭现有集群自平衡机制"><a href="#3-2、关闭现有集群自平衡机制" class="headerlink" title="3.2、关闭现有集群自平衡机制"></a>3.2、关闭现有集群自平衡机制</h3><ul>
<li>集群设置信息查看：<code>GET _cluster/settings?include_defaults&amp;flat_settings</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT _cluster/settings </span><br><span class="line">&#123; </span><br><span class="line">  &quot;persistent&quot;: &#123; </span><br><span class="line">    &quot;cluster.routing.allocation.enable&quot;: &quot;none&quot;,</span><br><span class="line">    &quot;cluster.routing.rebalance.enable&quot;: &quot;none&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3、调整集群每秒传输字节"><a href="#3-3、调整集群每秒传输字节" class="headerlink" title="3.3、调整集群每秒传输字节"></a>3.3、调整集群每秒传输字节</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT /_cluster/settings</span><br><span class="line">&#123;</span><br><span class="line">    &quot;persistent&quot; : &#123;</span><br><span class="line">        &quot;indices.recovery.max_bytes_per_sec&quot; : &quot;80mb&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4、手动迁移故障节点118分片及副本到其他在线节点"><a href="#3-4、手动迁移故障节点118分片及副本到其他在线节点" class="headerlink" title="3.4、手动迁移故障节点118分片及副本到其他在线节点"></a>3.4、手动迁移故障节点118分片及副本到其他在线节点</h3><blockquote>
<p>参数解析：<code>move</code>将started（已启动）状态的分片从一个节点移动到另一个节点。move包含四个属性：index（索引名）、shard（分片编号）、from_node（节点名，从哪个节点移动）、to_node（节点名，移动到哪个节点）</p>
</blockquote>
<ul>
<li>手动迁移命令：<img src="http://static.zybuluo.com/a807257775/konwwl7dgkrfradxruudn43r/%E8%BF%81%E7%A7%BB%E7%B4%A2%E5%BC%95%E5%88%86%E7%89%87%E5%91%BD%E4%BB%A4.txt" alt="迁移索引分片命令.txt-5.9kB"></li>
</ul>
<h3 id="3-5、确认故障节点分片已迁移完毕后，关停118-ES服务"><a href="#3-5、确认故障节点分片已迁移完毕后，关停118-ES服务" class="headerlink" title="3.5、确认故障节点分片已迁移完毕后，关停118 ES服务"></a>3.5、确认故障节点分片已迁移完毕后，关停118 ES服务</h3><h3 id="3-6、新机器更换IP地址为118"><a href="#3-6、新机器更换IP地址为118" class="headerlink" title="3.6、新机器更换IP地址为118"></a>3.6、新机器更换IP地址为118</h3><blockquote>
<p>提示：更换服务器IP需联系金融云张万星 电话：13391857556</p>
</blockquote>
<h3 id="3-7、拷贝118配置文件到新节点"><a href="#3-7、拷贝118配置文件到新节点" class="headerlink" title="3.7、拷贝118配置文件到新节点"></a>3.7、拷贝118配置文件到新节点</h3><blockquote>
<p>提示：已提前完成，启动前进行核对</p>
</blockquote>
<h3 id="3-8、启动新118服务添加至集群"><a href="#3-8、启动新118服务添加至集群" class="headerlink" title="3.8、启动新118服务添加至集群"></a>3.8、启动新118服务添加至集群</h3><h3 id="3-9、命令迁移原分片（保证和之前截图一致）"><a href="#3-9、命令迁移原分片（保证和之前截图一致）" class="headerlink" title="3.9、命令迁移原分片（保证和之前截图一致）"></a>3.9、命令迁移原分片（保证和之前截图一致）</h3><ul>
<li>手动回迁命令：<img src="http://static.zybuluo.com/a807257775/q3nii3zy5ro7cgw1nankhukr/%E8%BF%81%E7%A7%BB%E7%B4%A2%E5%BC%95%E5%88%86%E7%89%87%E8%87%B3%E5%8E%9F%E8%8A%82%E7%82%B9-%E5%9B%9E%E8%BF%81.txt" alt="迁移索引分片至原节点-回迁.txt-5.9kB"></li>
</ul>
<h3 id="3-9、迁移完成后，开启集群自平衡"><a href="#3-9、迁移完成后，开启集群自平衡" class="headerlink" title="3.9、迁移完成后，开启集群自平衡"></a>3.9、迁移完成后，开启集群自平衡</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PUT _cluster/settings </span><br><span class="line">&#123; </span><br><span class="line">  &quot;persistent&quot;: &#123; </span><br><span class="line">    &quot;cluster.routing.allocation.enable&quot;: &quot;all&quot;,</span><br><span class="line">    &quot;cluster.routing.rebalance.enable&quot;: &quot;all&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ELK文档</category>
      </categories>
      <tags>
        <tag>ELK文档</tag>
      </tags>
  </entry>
  <entry>
    <title>ES集群索引管理工具-cerebro的部署</title>
    <url>/2021/03/21/ES%E9%9B%86%E7%BE%A4%E7%B4%A2%E5%BC%95%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-cerebro%E7%9A%84%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h1 id="ES集群索引管理工具-cerebro的部署"><a href="#ES集群索引管理工具-cerebro的部署" class="headerlink" title="ES集群索引管理工具-cerebro的部署"></a>ES集群索引管理工具-cerebro的部署</h1><h2 id="1、前言："><a href="#1、前言：" class="headerlink" title="1、前言："></a>1、前言：</h2><blockquote>
<p>所有部署均采用docker+k8s进行，ELK集群由于是采用ECK部署，使用了TLS/SSL,HTTPS证书及BASIC认证，但cerebro官方并未对如何连接HTTPS集群做出指导，本文将从新构建cerebro镜像文件，添加ES跟证书到镜像中，后使用K8S将cerebro部署至集群中，连接ES服务进行管理；</p>
</blockquote>
<h2 id="1、导出ES集群CA根证书"><a href="#1、导出ES集群CA根证书" class="headerlink" title="1、导出ES集群CA根证书"></a>1、导出ES集群CA根证书</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -pv /k8s_yml/cerebro_bulid/certs</span><br><span class="line">cp -rfp ca.crt /k8s_yml/cerebro_bulid/certs</span><br></pre></td></tr></table></figure>
<h2 id="2、制作Dockerfile文件"><a href="#2、制作Dockerfile文件" class="headerlink" title="2、制作Dockerfile文件"></a>2、制作Dockerfile文件</h2><ul>
<li>vim /k8s_yml/cerebro_bulid/Dockerfile<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM openjdk:11-jre-slim</span><br><span class="line"></span><br><span class="line">ENV CEREBRO_VERSION 0.9.3</span><br><span class="line"></span><br><span class="line">RUN  apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install -y wget \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/* \</span><br><span class="line">    &amp;&amp; mkdir -p /opt/cerebro/logs \</span><br><span class="line">    &amp;&amp; wget -qO- https://github.com/lmenezes/cerebro/releases/download/v$&#123;CEREBRO_VERSION&#125;/cerebro-$&#123;CEREBRO_VERSION&#125;.tgz \</span><br><span class="line">    | tar xzv --strip-components 1 -C /opt/cerebro \</span><br><span class="line">    &amp;&amp; sed -i &apos;/&lt;appender-ref ref=&quot;FILE&quot;\/&gt;/d&apos; /opt/cerebro/conf/logback.xml \</span><br><span class="line">    &amp;&amp; addgroup -gid 1000 cerebro \</span><br><span class="line">    &amp;&amp; adduser -gid 1000 -uid 1000 cerebro \</span><br><span class="line">    &amp;&amp; chown -R cerebro:cerebro /opt/cerebro</span><br><span class="line"></span><br><span class="line">WORKDIR /opt/cerebro</span><br><span class="line"></span><br><span class="line">COPY certs/ca.crt /opt/cerebro</span><br><span class="line"></span><br><span class="line">RUN keytool -importcert -file ca.crt -alias esca -cacerts -storepass changeit -noprompt</span><br><span class="line"></span><br><span class="line">USER cerebro</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [ &quot;/opt/cerebro/bin/cerebro&quot; ]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3、构建基于ES根证书的镜像"><a href="#3、构建基于ES根证书的镜像" class="headerlink" title="3、构建基于ES根证书的镜像"></a>3、构建基于ES根证书的镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /k8s_yml/cerebro_bulid/</span><br><span class="line">docker build -t 192.168.6.33/szzt_production/cerebro:0.9.3 .</span><br><span class="line">#上传到私有镜像库</span><br><span class="line">docker push 192.168.6.33/szzt_production/cerebro:0.9.3</span><br></pre></td></tr></table></figure>
<h2 id="4、使用K8S进行部署"><a href="#4、使用K8S进行部署" class="headerlink" title="4、使用K8S进行部署"></a>4、使用K8S进行部署</h2><ul>
<li>使用命令式对象管理方式，创建YML文件</li>
<li>kubectl apply -f cerebro_deploy.yml<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line"> name: esmng-srv</span><br><span class="line"> namespace: elastic-production</span><br><span class="line">spec:</span><br><span class="line"> selector:</span><br><span class="line">  matchLabels:</span><br><span class="line">   app: es_mng</span><br><span class="line"> replicas: 1</span><br><span class="line"> template:</span><br><span class="line">  metadata:</span><br><span class="line">   labels:</span><br><span class="line">    app: es_mng</span><br><span class="line">  spec:</span><br><span class="line">   containers:</span><br><span class="line">   - name: esmng-srv</span><br><span class="line">     image: 192.168.6.33/szzt_production/cerebro:0.9.3</span><br><span class="line">     ports:</span><br><span class="line">     - containerPort: 9000</span><br><span class="line">     env:</span><br><span class="line">     #认证类型</span><br><span class="line">     - name: AUTH_TYPE</span><br><span class="line">       value: base</span><br><span class="line">     #ES用户</span><br><span class="line">     - name: BASIC_AUTH_USER</span><br><span class="line">       value: elastic</span><br><span class="line">     #ES密码   </span><br><span class="line">     - name: BASIC_AUTH_PWD</span><br><span class="line">       value: 26v7Aik1wM6Z9Mp1I8V9z4jm</span><br><span class="line">     #通过传参指定ES集群地址</span><br><span class="line">     command: [&quot;/opt/cerebro/bin/cerebro&quot;, &quot;-Dhosts.0.host=https://es-cluster-es-http.elastic-production.svc:9200&quot;]</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: esmng-svc</span><br><span class="line">  namespace: elastic-production</span><br><span class="line">spec:</span><br><span class="line">  type: NodePort</span><br><span class="line">  selector:</span><br><span class="line">    app: es_mng</span><br><span class="line">  ports:</span><br><span class="line">    - name: web-http</span><br><span class="line">      protocol: TCP</span><br><span class="line">      port: 9000</span><br><span class="line">      targetPort: 9000</span><br><span class="line">      #外部访问端口</span><br><span class="line">      nodePort: 30007</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="5、访问cerebro页面"><a href="#5、访问cerebro页面" class="headerlink" title="5、访问cerebro页面"></a>5、访问cerebro页面</h2><ul>
<li>查看ES集群状态-<a href="http://10.255.4.38:30007/" target="_blank" rel="noopener">http://10.255.4.38:30007/</a><br><img src="http://static.zybuluo.com/a807257775/n3jq3gwqbzmxotxiir62bc9k/image_1f171s5uc1eqn18oq1ap313im8jn9.png" alt="image_1f171s5uc1eqn18oq1ap313im8jn9.png-83.1kB"></li>
</ul>
]]></content>
      <categories>
        <category>ELK文档</category>
      </categories>
      <tags>
        <tag>ELK文档</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch冷热分离技术验证</title>
    <url>/2023/08/30/Elasticsearch%E5%86%B7%E7%83%AD%E5%88%86%E7%A6%BB%E6%8A%80%E6%9C%AF%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<h1 id="Elasticsearch冷热分离技术验证"><a href="#Elasticsearch冷热分离技术验证" class="headerlink" title="Elasticsearch冷热分离技术验证"></a>Elasticsearch冷热分离技术验证</h1><h2 id="1、背景信息"><a href="#1、背景信息" class="headerlink" title="1、背景信息"></a>1、背景信息</h2><ul>
<li>趣街ES集群目前采用的是传统的角色混用模式进行部署的，若有node脱离集群或发生故障，对整体集群影响较大。且业务数据长年累积，数据没有生命周期性的管理策略，当数据达到一定量时，必然会造成服务的内存、CPU、IO等指标上涨，影响Elasticsearch的全文检索能力。生产上多次出现因大查询等其他因素所导致的集群抖动，从而影响生产正常业务的事件。</li>
</ul>
<h2 id="2、Elasticsearch-ilm概述"><a href="#2、Elasticsearch-ilm概述" class="headerlink" title="2、Elasticsearch-ilm概述"></a>2、Elasticsearch-ilm概述</h2><ul>
<li>Elasticsearch 6.6.0及以上版本提供了索引生命周期管理ILM功能，将索引生命周期分为4个阶段：<code>hot</code>、<code>warm</code>、<code>cold</code>、<code>delete</code>。其中<code>hot</code>阶段主要负责对索引进行滚动更新操作，<code>warm</code>、<code>cold</code>、<code>delete</code>阶段主要负责进一步处理索引数据，详细功能如下：<ul>
<li><code>Rollover</code>（滚动更新）：在当前索引达到特定大小、文档计数或存在时间时，开始写入到新索引（my-index-000001）</li>
<li><code>Shrink</code>（分片收缩）: 减少索引中主分片的数量</li>
<li><code>Force merge</code>（强制合并分片段数）: 触发强制合并操作以减少索引分片中的段数。</li>
<li><code>Freeze</code>（冻结索引）: 冻结索引并使其只读</li>
<li><code>Delete</code>（删除索引）: 永久删除索引，包括其所有数据和元数据。</li>
</ul>
</li>
</ul>
<h3 id="2-1、ilm应用场景-常规"><a href="#2-1、ilm应用场景-常规" class="headerlink" title="2.1、ilm应用场景-常规"></a>2.1、ilm应用场景-常规</h3><table>
<thead>
<tr>
<th>阶段</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>hot</td>
<td>该策略设置索引只要满足其中任一条件：数据写入达到1 GB、使用超过1天、doc数超过1000，就会触发索引滚动更新。此时系统将创建一个新索引，该索引将重新启动策略，而旧索引将在滚动更新后等待30分钟进入warm阶段</td>
<td></td>
</tr>
<tr>
<td>warm</td>
<td>索引进入warm阶段后，ILM会将索引收缩到1个分片，强制合并为1个段。完成该操作后，索引将在1小时（从滚动更新时算起）后进入cold阶段。</td>
<td></td>
</tr>
<tr>
<td>cold</td>
<td>索引进入cold阶段后，ILM将索引从hot节点移动到cold节点。完成操作后，索引将在2小时后进入delete阶段。</td>
<td></td>
</tr>
<tr>
<td>delete</td>
<td>索引进入delete阶段后被删除。</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="2-2、ilm应用场景-趣街"><a href="#2-2、ilm应用场景-趣街" class="headerlink" title="2.2、ilm应用场景-趣街"></a>2.2、ilm应用场景-趣街</h3><ul>
<li>架构图<br><img src="http://static.zybuluo.com/a807257775/o9yu6rfd24ogx6r3tte6ry90/image_1gprqlohe1mid8otg4586f1h5h1h.png" alt="image_1gprqlohe1mid8otg4586f1h5h1h.png-277.4kB"><br><img src="http://static.zybuluo.com/a807257775/tnhwoukp5123v5tghn7evrqx/image_1gps4qtttvf316gd1ohn1bjg66a1u.png" alt="image_1gps4qtttvf316gd1ohn1bjg66a1u.png-114.8kB"><br>阶段 | 描述 |<br>—|—|<br>hot | 通过索引模板控制新索引均分配至hot节点，设置当前热索引优先级为100，并在1分钟后进入warm阶段。 |<br>warm | 索引进入warm阶段后，设置当前热索引优先级为50，索引路由规则box_type=hot。完成该操作后，索引将在2分钟（从滚动更新时算起）后进入cold阶段。 |<br>cold | 索引进入cold阶段后，设置当前热索引优先级为0，索引路由规则box_type=cold|</li>
</ul>
<blockquote>
<p>说明：<br>1、考虑到对业务及开发最低的影响，在hot阶段不引入分片滚动机制，依然使用之前按月创建索引的模式进行，不过要使用索引模板对索引的分片数量、ILM策略、路由规则进行管理<br>2、不打算建立warm节点，在warm阶段呢，只调整索引优先级，当机器重建或重启时，优先恢复优先级最高的索引，来保障实时生产业务；<br>3、cold阶段，可以缩减副本数量、设置只读，后续根据生产需求可进行调整；</p>
</blockquote>
<h2 id="3、冷热分离技术验证部分"><a href="#3、冷热分离技术验证部分" class="headerlink" title="3、冷热分离技术验证部分"></a>3、冷热分离技术验证部分</h2><h3 id="3-1、集群信息汇总"><a href="#3-1、集群信息汇总" class="headerlink" title="3.1、集群信息汇总"></a>3.1、集群信息汇总</h3><table>
<thead>
<tr>
<th>平台</th>
<th>IP</th>
<th>用途</th>
<th>ES版本</th>
<th>功能角色</th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS 7.8.2003</td>
<td>10.0.0.201</td>
<td>ES</td>
<td>7.17.3</td>
<td>Master_node</td>
<td></td>
</tr>
<tr>
<td>CentOS 7.8.2003</td>
<td>10.0.0.202</td>
<td>ES</td>
<td>7.17.3</td>
<td>Master_node</td>
<td></td>
</tr>
<tr>
<td>CentOS 7.8.2003</td>
<td>10.0.0.203</td>
<td>ES</td>
<td>7.17.3</td>
<td>Master_node</td>
<td></td>
</tr>
<tr>
<td>CentOS 7.8.2003</td>
<td>10.0.0.204</td>
<td>ES</td>
<td>7.17.3</td>
<td>Date_node_H</td>
<td></td>
</tr>
<tr>
<td>CentOS 7.8.2003</td>
<td>10.0.0.205</td>
<td>ES</td>
<td>7.17.3</td>
<td>Date_node_H</td>
<td></td>
</tr>
<tr>
<td>CentOS 7.8.2003</td>
<td>10.0.0.100</td>
<td>ES</td>
<td>7.17.3</td>
<td>Date_node_C</td>
<td></td>
</tr>
<tr>
<td>CentOS 7.8.2003</td>
<td>10.0.0.101</td>
<td>ES</td>
<td>7.17.3</td>
<td>Date_node_C</td>
<td></td>
</tr>
<tr>
<td>CentOS 7.8.2003</td>
<td>10.0.0.102</td>
<td>ES</td>
<td>7.17.3</td>
<td>Coordinat_node</td>
<td></td>
</tr>
<tr>
<td>CentOS 7.8.2003</td>
<td>10.0.0.103</td>
<td>ES</td>
<td>7.17.3</td>
<td>Coordinat_node</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="3-2、设置ES节点角色"><a href="#3-2、设置ES节点角色" class="headerlink" title="3.2、设置ES节点角色"></a>3.2、设置ES节点角色</h3><ul>
<li><p>主节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node.roles: [ master ]</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据节点-热</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node.roles: [ data_hot, data_content ]</span><br></pre></td></tr></table></figure>
</li>
<li><p>数据节点-冷</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node.roles: [ data_cold, data_content ]</span><br></pre></td></tr></table></figure>
</li>
<li><p>协调节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node.roles: [  ]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>按照如上节点划分修改elasticsearch.yml配置文件，并重启ES服务，执行如下命令查看node角色<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET _cat/nodes?v</span><br></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ip         ram.percent cpu load_1m load_5m load_15m node.role master name</span><br><span class="line">10.0.0.202          66   6    0.50    0.16     0.10 m         -      node-2</span><br><span class="line">10.0.0.203          68   7    0.82    0.26     0.13 m         -      node-3</span><br><span class="line">10.0.0.204          60  10    0.65    0.28     0.14 hs        -      node-4</span><br><span class="line">10.0.0.102          66   2    0.10    0.08     0.07 -         -      node-8</span><br><span class="line">10.0.0.201          89   9    0.70    0.22     0.12 m         *      node-1</span><br><span class="line">10.0.0.101          62   7    0.61    0.26     0.13 cs        -      node-7</span><br><span class="line">10.0.0.100          68  10    0.74    0.32     0.15 cs        -      node-6</span><br><span class="line">10.0.0.205          60  10    0.77    0.34     0.16 hs        -      node-5</span><br><span class="line">10.0.0.103          65   1    0.12    0.10     0.07 -         -      node-9</span><br></pre></td></tr></table></figure>
<h3 id="3-3、为索引配置生命周期管理策略"><a href="#3-3、为索引配置生命周期管理策略" class="headerlink" title="3.3、为索引配置生命周期管理策略"></a>3.3、为索引配置生命周期管理策略</h3><table>
<thead>
<tr>
<th>阶段</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>hot</td>
<td>通过索引模板控制新索引均分配至hot节点，设置当前热索引优先级为100，并在1分钟后进入warm阶段。</td>
<td></td>
</tr>
<tr>
<td>warm</td>
<td>索引进入warm阶段后，设置当前热索引优先级为50，索引路由规则box_type=hot。完成该操作后，索引将在2分钟（从滚动更新时算起）后进入cold阶段。</td>
<td></td>
</tr>
<tr>
<td>cold</td>
<td>索引进入cold阶段后，设置当前热索引优先级为0，索引路由规则box_type=cold</td>
<td></td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#角色模式</span><br><span class="line">PUT _ilm/policy/traderecordday_ILM</span><br><span class="line">&#123;</span><br><span class="line">  &quot;policy&quot;: &#123;</span><br><span class="line">    &quot;phases&quot;: &#123;</span><br><span class="line">      &quot;hot&quot;: &#123;</span><br><span class="line">        &quot;min_age&quot;: &quot;0ms&quot;,</span><br><span class="line">        &quot;actions&quot;: &#123;</span><br><span class="line">          &quot;set_priority&quot;: &#123;</span><br><span class="line">            &quot;priority&quot;: 100</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;warm&quot;: &#123;</span><br><span class="line">        &quot;min_age&quot;: &quot;1m&quot;,</span><br><span class="line">        &quot;actions&quot;: &#123;</span><br><span class="line">          &quot;set_priority&quot;: &#123;</span><br><span class="line">            &quot;priority&quot;: 50</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;cold&quot;: &#123;</span><br><span class="line">        &quot;min_age&quot;: &quot;2m&quot;,</span><br><span class="line">        &quot;actions&quot;: &#123;</span><br><span class="line">          &quot;set_priority&quot;: &#123;</span><br><span class="line">            &quot;priority&quot;: 0</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-4、创建索引模板"><a href="#3-4、创建索引模板" class="headerlink" title="3.4、创建索引模板"></a>3.4、创建索引模板</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X PUT &quot;http://127.0.0.1:19200/_index_template/template_traderecordday?pretty&quot; -H &apos;Content-Type: application/json&apos; -d&apos;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;index_patterns&quot; : [&quot;traderecordday*&quot;],</span><br><span class="line">  &quot;template&quot;: &#123;</span><br><span class="line">    &quot;settings&quot; : &#123;</span><br><span class="line">      &quot;number_of_shards&quot; : 2,</span><br><span class="line">      &quot;number_of_replicas&quot; : 1,</span><br><span class="line">      &quot;max_result_window&quot; : 2147483647,</span><br><span class="line">      &quot;index.lifecycle.name&quot;: &quot;traderecordday_ILM&quot;,</span><br><span class="line">      &quot;index.routing.allocation.include._tier_preference&quot;:&quot;data_hot&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;aliases&quot;: &#123;</span><br><span class="line">      &quot;traderecordday_alias&quot; : &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;mappings&quot;: &#123;</span><br><span class="line">      &quot;dynamic_templates&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">          &quot;strings&quot;: &#123;</span><br><span class="line">            &quot;match_mapping_type&quot;: &quot;string&quot;,</span><br><span class="line">            &quot;mapping&quot;: &#123;</span><br><span class="line">              &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">              &quot;fields:&quot;: &#123;</span><br><span class="line">                &quot;raw&quot;: &#123;</span><br><span class="line">                  &quot;type&quot;: &quot;keyword&quot;,</span><br><span class="line">                  &quot;ignore_above&quot;: 2147483647</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&apos;</span><br></pre></td></tr></table></figure>
<h3 id="3-5、创建测试索引"><a href="#3-5、创建测试索引" class="headerlink" title="3.5、创建测试索引"></a>3.5、创建测试索引</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -XPUT http://127.0.0.1:19200/traderecordday_202201 &amp;&amp; curl -XPUT http://127.0.0.1:19200/traderecordday_202202 &amp;&amp; curl -XPUT http://127.0.0.1:19200/traderecordday_202203 &amp;&amp; curl -XPUT http://127.0.0.1:19200/traderecordday_202204 &amp;&amp; curl -XPUT http://127.0.0.1:19200/traderecordday_202205</span><br></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/a807257775/iuwo7vl6ate3naos96ckpjrt/image_1gpa0cpu5mll1uaq80e1nkt1p5k5n.png" alt="image_1gpa0cpu5mll1uaq80e1nkt1p5k5n.png-38.2kB"></p>
<h3 id="3-5、写入数据"><a href="#3-5、写入数据" class="headerlink" title="3.5、写入数据"></a>3.5、写入数据</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl --location --request PUT &apos;http://192.168.2.67:19200/traderecordday_202201/_doc/1&apos; \</span><br><span class="line">--header &apos;Content-Type: application/json&apos; \</span><br><span class="line">-d &apos;&#123;</span><br><span class="line">    &quot;content&quot;: &quot;ligc&quot;,</span><br><span class="line">    &quot;title&quot;: &quot;yusys&quot;,</span><br><span class="line">    &quot;id&quot;: &quot;1&quot;</span><br><span class="line">&#125;&apos;</span><br></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/a807257775/5t1ewi4437z792k71aci2eds/image_1gpa0dndpn261nmj1k3pbdpt6o64.png" alt="image_1gpa0dndpn261nmj1k3pbdpt6o64.png-33.2kB"></p>
<h3 id="3-6、根据生命周期阶段查看索引setting信息"><a href="#3-6、根据生命周期阶段查看索引setting信息" class="headerlink" title="3.6、根据生命周期阶段查看索引setting信息"></a>3.6、根据生命周期阶段查看索引setting信息</h3><ul>
<li><p>hot阶段<br><img src="http://static.zybuluo.com/a807257775/hi9q4jpzfavohxuhp8447223/image_1gps6kr4hq8l9p2vvitpd1r7m35.png" alt="image_1gps6kr4hq8l9p2vvitpd1r7m35.png-11.7kB"><br><img src="http://static.zybuluo.com/a807257775/aug16a20fcz5ji211ivyogpi/image_1gps6kbj9g0b1elo175d6h21cdm2o.png" alt="image_1gps6kbj9g0b1elo175d6h21cdm2o.png-65.2kB"></p>
</li>
<li><p>warm阶段<br><img src="http://static.zybuluo.com/a807257775/jq7b591lqwe8rl7vvddrsphq/image_1gps6lf4i12qc1cmg8h016nh1iav3i.png" alt="image_1gps6lf4i12qc1cmg8h016nh1iav3i.png-61.4kB"></p>
</li>
<li><p>cold阶段<br><img src="http://static.zybuluo.com/a807257775/jc3ztqve2aej9vau540pxvbw/image_1gps6mnub1f7q2si65qvor1j73v.png" alt="image_1gps6mnub1f7q2si65qvor1j73v.png-63.9kB"><br><img src="http://static.zybuluo.com/a807257775/svyod15j881izeih4nf5008j/image_1gps6n0is18ct1kocqgc4po1bps4c.png" alt="image_1gps6n0is18ct1kocqgc4po1bps4c.png-12.1kB"></p>
</li>
</ul>
<h2 id="4、集群极端性测试"><a href="#4、集群极端性测试" class="headerlink" title="4、集群极端性测试"></a>4、集群极端性测试</h2><h3 id="4-1、数据节点故障对集群的影响？"><a href="#4-1、数据节点故障对集群的影响？" class="headerlink" title="4.1、数据节点故障对集群的影响？"></a>4.1、数据节点故障对集群的影响？</h3><ul>
<li><p>当前shards分布如下：<br><img src="http://static.zybuluo.com/a807257775/15txw57exbrlg1b39394snza/image_1gpa19l1t1t6o1h4717qtp3kl0u8v.png" alt="image_1gpa19l1t1t6o1h4717qtp3kl0u8v.png-12.1kB"></p>
</li>
<li><p>创建新索引，模拟当前生产hot索引<br><img src="http://static.zybuluo.com/a807257775/d6rskan2gmau1aw4bpki7dpx/image_1gpa1bj2rk985q014uk10rt1lj09c.png" alt="image_1gpa1bj2rk985q014uk10rt1lj09c.png-33.5kB"></p>
</li>
<li><p>模拟cold节点全部宕机<br><img src="http://static.zybuluo.com/a807257775/58s38u2pclts221wcxn3mmrm/image_1gpa1cg9bhj71hcs1qmk5bltn09p.png" alt="image_1gpa1cg9bhj71hcs1qmk5bltn09p.png-225.5kB"><br><img src="http://static.zybuluo.com/a807257775/y4oq0rnnlksusf5e6jtrtoyb/image_1gpa1e01n1bcm1la7115g195q3mra6.png" alt="image_1gpa1e01n1bcm1la7115g195q3mra6.png-29.9kB"></p>
</li>
<li><p>测试hot节点索引是否可读可写<br><img src="http://static.zybuluo.com/a807257775/a3uru2he5c7adu3ugl8cb82p/image_1gpa1ftuq18n41ai8jhemkt1snnb0.png" alt="image_1gpa1ftuq18n41ai8jhemkt1snnb0.png-56.9kB"><br><img src="http://static.zybuluo.com/a807257775/b7ki4vzjibporsho9exzzqt7/image_1gpa1fmhd1luf1i9i18a9ulodrfaj.png" alt="image_1gpa1fmhd1luf1i9i18a9ulodrfaj.png-46kB"></p>
</li>
</ul>
<h3 id="4-2、索引分片数据持续写入，会对分片迁移造成什么影响？"><a href="#4-2、索引分片数据持续写入，会对分片迁移造成什么影响？" class="headerlink" title="4.2、索引分片数据持续写入，会对分片迁移造成什么影响？"></a>4.2、索引分片数据持续写入，会对分片迁移造成什么影响？</h3><ul>
<li><p>当前shards分布如下：<br><img src="http://static.zybuluo.com/a807257775/0m84d4sanepisj78am3eomlj/image_1gpa1thpgj81slr10s96je14rjbq.png" alt="image_1gpa1thpgj81slr10s96je14rjbq.png-19.4kB"></p>
</li>
<li><p>向202201索引导入数据，观察ILM迁移是否受影响<br><img src="http://static.zybuluo.com/a807257775/0j74lfz7qf7y45v27zokeui6/image_1gpa28oo91hhr1ams3rv14ck2erc7.png" alt="image_1gpa28oo91hhr1ams3rv14ck2erc7.png-192.2kB"></p>
</li>
<li><p>右边数据持续写入，202201的个别分片还处于RELOCATION的状态，但此时并不影响数据查询和迁移<br><img src="http://static.zybuluo.com/a807257775/3px1xcjy057s944vnjn7a1z2/image_1gpa29ilc1r4rnlrnf01c2f1f1ick.png" alt="image_1gpa29ilc1r4rnlrnf01c2f1f1ick.png-206.8kB"><br><img src="http://static.zybuluo.com/a807257775/az21h906aqr468ppl9qtltsj/image_1gpa29sdsgfa13no15p01lokkkpd1.png" alt="image_1gpa29sdsgfa13no15p01lokkkpd1.png-188.9kB"><br><img src="http://static.zybuluo.com/a807257775/42rlycnb8z894ncl2221av04/image_1gpa2ap9t14dlo28vbj1eiks89de.png" alt="image_1gpa2ap9t14dlo28vbj1eiks89de.png-47.5kB"></p>
</li>
</ul>
<h2 id="5、问题讨论"><a href="#5、问题讨论" class="headerlink" title="5、问题讨论"></a>5、问题讨论</h2><h3 id="5-1、现有架构如何迁移至冷热架构"><a href="#5-1、现有架构如何迁移至冷热架构" class="headerlink" title="5.1、现有架构如何迁移至冷热架构"></a>5.1、现有架构如何迁移至冷热架构</h3><ul>
<li>修改现有集群角色或给节点添加标签，不能热更新，需要修改配置，重启集群，且修改角色还需要执行一系列复杂的操作；</li>
<li>迁移数据，使用logstash或elasticdump迁移数据，应用割切如何进行？</li>
<li>目前生产的ES数据查询是通过别名进行的，如果使用了冷热分离的技术，冷节点的机器配置是低于热节点的，并且冷节点上存放的数据周期很长，各方面性能都低于热节点，<ul>
<li>阿里专家答复：如果用alias查全部索引会受到冷节点算力少的影响，不过在查询量不大的情况的影响较小。如果查询QPS比较高，最好在查询条件上做修改，查对应时间段的索引</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>ELK文档</category>
      </categories>
      <tags>
        <tag>ELK文档</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticserach数据迁移验证</title>
    <url>/2023/11/30/Elasticserach%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<h1 id="Elasticserach数据迁移验证"><a href="#Elasticserach数据迁移验证" class="headerlink" title="Elasticserach数据迁移验证"></a>Elasticserach数据迁移验证</h1><h2 id="1、前置条件梳理"><a href="#1、前置条件梳理" class="headerlink" title="1、前置条件梳理"></a>1、前置条件梳理</h2><blockquote>
<p>SAG网络已提前打通，宇信金融云的ES机器可以与阿里的ES机器互访</p>
</blockquote>
<h3 id="1-1、本地ES信息整理"><a href="#1-1、本地ES信息整理" class="headerlink" title="1.1、本地ES信息整理"></a>1.1、本地ES信息整理</h3><table>
<thead>
<tr>
<th></th>
<th>ES版本</th>
<th>测试环境IP</th>
<th>待同步索引</th>
<th>主分片</th>
<th>副本分片</th>
<th>存储大小 </th>
</tr>
</thead>
<tbody>
<tr>
<td>elasticsearch-7.3.2</td>
<td>192.168.36.59/60/61</td>
<td>traderecord</td>
<td>5</td>
<td>1</td>
<td>3.6gb </td>
</tr>
</tbody>
</table>
<ul>
<li>ES配置文件：elasticsearch.yml（node-1/2/3）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">network.host: 0.0.0.0</span><br><span class="line">http.port: 9200</span><br><span class="line">bootstrap.memory_lock: false</span><br><span class="line">bootstrap.system_call_filter: false</span><br><span class="line">path.data: /opt/test/data</span><br><span class="line">path.logs: /opt/test/logs</span><br><span class="line">node.max_local_storage_nodes: 1</span><br><span class="line">#discovery.zen.ping.unicast.hosts: [&quot;127.0.0.1&quot;]</span><br><span class="line">cluster.initial_master_nodes: [&quot;node-1&quot;]</span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line">cluster.name: yusys-test</span><br><span class="line">node.name: node-1</span><br><span class="line">node.master: true</span><br><span class="line">node.data: true</span><br><span class="line">discovery.zen.ping.unicast.hosts: [&quot;192.168.36.59&quot;, &quot;192.168.36.60&quot;, &quot;192.168.36.61&quot;]</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="1-2、阿里云ES信息整理"><a href="#1-2、阿里云ES信息整理" class="headerlink" title="1.2、阿里云ES信息整理"></a>1.2、阿里云ES信息整理</h3><table>
<thead>
<tr>
<th></th>
<th>ES版本</th>
<th>测试环境IP</th>
<th>待同步索引</th>
<th>主分片</th>
<th>副本分片</th>
<th>存储大小 </th>
</tr>
</thead>
<tbody>
<tr>
<td>elasticsearch-7.3.2</td>
<td>10.60.2.31(外)</td>
<td>traderecord</td>
<td>5</td>
<td>1</td>
<td>3.6gb </td>
</tr>
</tbody>
</table>
<h3 id="1-3、logstash的配置与使用"><a href="#1-3、logstash的配置与使用" class="headerlink" title="1.3、logstash的配置与使用"></a>1.3、logstash的配置与使用</h3><blockquote>
<p>logstash会占用部分资源，建议在阿里云环境上部署logstash服务；</p>
</blockquote>
<h4 id="1-3-1、安装并创建所需目录"><a href="#1-3-1、安装并创建所需目录" class="headerlink" title="1.3.1、安装并创建所需目录"></a>1.3.1、安装并创建所需目录</h4><ul>
<li>下载logstash，需根据es版本下载对应的logstash<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su - sspusr</span><br><span class="line">wget https://artifacts.elastic.co/downloads/logstash/logstash-7.3.2.tar.gz</span><br><span class="line">tar xzvf logstash-7.3.2.tar.gz</span><br><span class="line">cd /home/sspusr/logstash-7.3.2</span><br><span class="line">mkdir -pv &#123;logs,data&#125; config/conf.d</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="1-3-3、创建piplines文件"><a href="#1-3-3、创建piplines文件" class="headerlink" title="1.3.3、创建piplines文件"></a>1.3.3、创建piplines文件</h4><ul>
<li>vim /home/sspusr/logstash-7.3.2/config/conf.d/inyusyses_outalies.conf <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input&#123;</span><br><span class="line">    elasticsearch&#123;</span><br><span class="line">        # 源端ES地址。</span><br><span class="line">        hosts =&gt;  [&quot;http://192.168.36.59:9200&quot;]</span><br><span class="line">        # 安全集群配置登录用户名密码。</span><br><span class="line">        #user =&gt; &quot;xxxxxx&quot;</span><br><span class="line">        #password =&gt; &quot;xxxxxx&quot;</span><br><span class="line">        # 需要迁移的索引列表，多个索引以英文以逗号（,）分隔。</span><br><span class="line">        index =&gt; &quot;traderecord_202203&quot;</span><br><span class="line">        # 以下三项保持默认即可，包含线程数和迁移数据大小和Logstash JVM配置相关。</span><br><span class="line">        #docinfo=&gt;true</span><br><span class="line">        #slices =&gt; 5</span><br><span class="line">        #size =&gt; 5000</span><br><span class="line">        # 定时任务，以下配置表示每分钟执行一次</span><br><span class="line">        schedule =&gt; &quot;* * * * *&quot;</span><br><span class="line">        scroll =&gt; &quot;5m&quot;</span><br><span class="line">        docinfo=&gt;true</span><br><span class="line">        size =&gt; 5000</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  # 去掉一些Logstash自己加的字段。</span><br><span class="line">  mutate &#123;</span><br><span class="line">    remove_field =&gt; [&quot;@timestamp&quot;, &quot;@version&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output&#123;</span><br><span class="line">    elasticsearch&#123;</span><br><span class="line">        # 目标端ES地址，可在阿里云Elasticsearch实例的基本信息页面获取。</span><br><span class="line">        hosts =&gt; [&quot;http://10.60.2.31:9200&quot;]</span><br><span class="line">        # 安全集群配置登录用户名密码。</span><br><span class="line">        #user =&gt; &quot;elastic&quot;</span><br><span class="line">        #password =&gt; &quot;xxxxxx&quot;</span><br><span class="line">        # 目标端索引名称，以下配置表示索引与源端保持一致。</span><br><span class="line">        index =&gt; &quot;%&#123;[@metadata][_index]&#125;&quot;</span><br><span class="line">        # 目标端索引type，以下配置表示索引类型与源端保持一致。</span><br><span class="line">        document_type =&gt; &quot;%&#123;[@metadata][_type]&#125;&quot;</span><br><span class="line">        # 目标端数据的id，如果不需要保留原id，可以删除以下这行，删除后性能会更好。</span><br><span class="line">        document_id =&gt; &quot;%&#123;[@metadata][_id]&#125;&quot;</span><br><span class="line">        ilm_enabled =&gt; false</span><br><span class="line">        manage_template =&gt; false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="1-3-4、修改logstash-yml配置文件"><a href="#1-3-4、修改logstash-yml配置文件" class="headerlink" title="1.3.4、修改logstash.yml配置文件"></a>1.3.4、修改logstash.yml配置文件</h4><ul>
<li>vim /home/sspusr/logstash-7.3.2/config/logstash.yml<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path.data: /home/sspusr/logstash-7.3.2/data</span><br><span class="line">path.logs: /home/sspusr/logstash-7.3.2/logs</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="1-4、迁移索引元数据（设置和映射）"><a href="#1-4、迁移索引元数据（设置和映射）" class="headerlink" title="1.4、迁移索引元数据（设置和映射）"></a>1.4、迁移索引元数据（设置和映射）</h3><ul>
<li>在进行数据迁移时，Logstash会帮助您自动创建索引，但是自动创建的索引可能与您待迁移的索引存在差异，导致迁移前后数据的格式不一致。</li>
</ul>
<h4 id="1-4-1、创建indiceCreate-py迁移脚本"><a href="#1-4-1、创建indiceCreate-py迁移脚本" class="headerlink" title="1.4.1、创建indiceCreate.py迁移脚本"></a>1.4.1、创建indiceCreate.py迁移脚本</h4><blockquote>
<p>提示：脚本默认是将源ES的所有索引进行迁移，如迁移指定索引需改造脚本</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 分片数默认和源集群索引保持一致，可根据生产实际节点数修改数值。</span><br><span class="line">#number_of_shards = 6</span><br><span class="line">number_of_shards = settingsDict[index][&quot;settings&quot;][&quot;index&quot;][&quot;number_of_shards&quot;]</span><br><span class="line"></span><br><span class="line">## 副本数默认为0，可根据生产实际节点数修改数值。</span><br><span class="line">#number_of_replicas = 1</span><br><span class="line">number_of_replicas = DEFAULT_REPLICAS</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim indiceCreate.py</span><br><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"># 文件名：indiceCreate.py</span><br><span class="line">import sys</span><br><span class="line">import base64</span><br><span class="line">import time</span><br><span class="line">import httplib</span><br><span class="line">import json</span><br><span class="line">## 源集群host。</span><br><span class="line">oldClusterHost = &quot;192.168.36.59:9200&quot;</span><br><span class="line">## 源集群用户名，可为空。</span><br><span class="line">oldClusterUserName = &quot;&quot;</span><br><span class="line">## 源集群密码，可为空。</span><br><span class="line">oldClusterPassword = &quot;&quot;</span><br><span class="line">## 目标集群host，可在阿里云Elasticsearch实例的基本信息页面获取。</span><br><span class="line">newClusterHost = &quot;10.60.2.31:9200&quot;</span><br><span class="line">## 目标集群用户名。</span><br><span class="line">newClusterUser = &quot;&quot;</span><br><span class="line">## 目标集群密码。</span><br><span class="line">newClusterPassword = &quot;&quot;</span><br><span class="line">DEFAULT_REPLICAS = 0</span><br><span class="line">def httpRequest(method, host, endpoint, params=&quot;&quot;, username=&quot;&quot;, password=&quot;&quot;):</span><br><span class="line">    conn = httplib.HTTPConnection(host)</span><br><span class="line">    headers = &#123;&#125;</span><br><span class="line">    if (username != &quot;&quot;) :</span><br><span class="line">        &apos;Hello &#123;name&#125;, your age is &#123;age&#125; !&apos;.format(name = &apos;Tom&apos;, age = &apos;20&apos;)</span><br><span class="line">        base64string = base64.encodestring(&apos;&#123;username&#125;:&#123;password&#125;&apos;.format(username = username, password = password)).replace(&apos;\n&apos;, &apos;&apos;)</span><br><span class="line">        headers[&quot;Authorization&quot;] = &quot;Basic %s&quot; % base64string;</span><br><span class="line">    if &quot;GET&quot; == method:</span><br><span class="line">        headers[&quot;Content-Type&quot;] = &quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">        conn.request(method=method, url=endpoint, headers=headers)</span><br><span class="line">    else :</span><br><span class="line">        headers[&quot;Content-Type&quot;] = &quot;application/json&quot;</span><br><span class="line">        conn.request(method=method, url=endpoint, body=params, headers=headers)</span><br><span class="line">    response = conn.getresponse()</span><br><span class="line">    res = response.read()</span><br><span class="line">    return res</span><br><span class="line">def httpGet(host, endpoint, username=&quot;&quot;, password=&quot;&quot;):</span><br><span class="line">    return httpRequest(&quot;GET&quot;, host, endpoint, &quot;&quot;, username, password)</span><br><span class="line">def httpPost(host, endpoint, params, username=&quot;&quot;, password=&quot;&quot;):</span><br><span class="line">    return httpRequest(&quot;POST&quot;, host, endpoint, params, username, password)</span><br><span class="line">def httpPut(host, endpoint, params, username=&quot;&quot;, password=&quot;&quot;):</span><br><span class="line">    return httpRequest(&quot;PUT&quot;, host, endpoint, params, username, password)</span><br><span class="line">def getIndices(host, username=&quot;&quot;, password=&quot;&quot;):</span><br><span class="line">    endpoint = &quot;/_cat/indices&quot;</span><br><span class="line">    indicesResult = httpGet(oldClusterHost, endpoint, oldClusterUserName, oldClusterPassword)</span><br><span class="line">    indicesList = indicesResult.split(&quot;\n&quot;)</span><br><span class="line">    indexList = []</span><br><span class="line">    for indices in indicesList:</span><br><span class="line">        if (indices.find(&quot;open&quot;) &gt; 0):</span><br><span class="line">            indexList.append(indices.split()[2])</span><br><span class="line">    return indexList</span><br><span class="line">def getSettings(index, host, username=&quot;&quot;, password=&quot;&quot;):</span><br><span class="line">    endpoint = &quot;/&quot; + index + &quot;/_settings&quot;</span><br><span class="line">    indexSettings = httpGet(host, endpoint, username, password)</span><br><span class="line">    print (index + &quot;  原始settings如下：\n&quot; + indexSettings)</span><br><span class="line">    settingsDict = json.loads(indexSettings)</span><br><span class="line">    ## 分片数默认和源集群索引保持一致。</span><br><span class="line">    number_of_shards = settingsDict[index][&quot;settings&quot;][&quot;index&quot;][&quot;number_of_shards&quot;]</span><br><span class="line">    ## 副本数默认为0。</span><br><span class="line">    number_of_replicas = DEFAULT_REPLICAS</span><br><span class="line">    newSetting = &quot;\&quot;settings\&quot;: &#123;\&quot;number_of_shards\&quot;: %s, \&quot;number_of_replicas\&quot;: %s&#125;&quot; % (number_of_shards, number_of_replicas)</span><br><span class="line">    return newSetting</span><br><span class="line">def getMapping(index, host, username=&quot;&quot;, password=&quot;&quot;):</span><br><span class="line">    endpoint = &quot;/&quot; + index + &quot;/_mapping&quot;</span><br><span class="line">    indexMapping = httpGet(host, endpoint, username, password)</span><br><span class="line">    print (index + &quot; 原始mapping如下：\n&quot; + indexMapping)</span><br><span class="line">    mappingDict = json.loads(indexMapping)</span><br><span class="line">    mappings = json.dumps(mappingDict[index][&quot;mappings&quot;])</span><br><span class="line">    newMapping = &quot;\&quot;mappings\&quot; : &quot; + mappings</span><br><span class="line">    return newMapping</span><br><span class="line">def createIndexStatement(oldIndexName):</span><br><span class="line">    settingStr = getSettings(oldIndexName, oldClusterHost, oldClusterUserName, oldClusterPassword)</span><br><span class="line">    mappingStr = getMapping(oldIndexName, oldClusterHost, oldClusterUserName, oldClusterPassword)</span><br><span class="line">    createstatement = &quot;&#123;\n&quot; + str(settingStr) + &quot;,\n&quot; + str(mappingStr) + &quot;\n&#125;&quot;</span><br><span class="line">    return createstatement</span><br><span class="line">def createIndex(oldIndexName, newIndexName=&quot;&quot;):</span><br><span class="line">    if (newIndexName == &quot;&quot;) :</span><br><span class="line">        newIndexName = oldIndexName</span><br><span class="line">    createstatement = createIndexStatement(oldIndexName)</span><br><span class="line">    print (&quot;新索引 &quot; + newIndexName + &quot; 的setting和mapping如下：\n&quot; + createstatement)</span><br><span class="line">    endpoint = &quot;/&quot; + newIndexName</span><br><span class="line">    createResult = httpPut(newClusterHost, endpoint, createstatement, newClusterUser, newClusterPassword)</span><br><span class="line">    print (&quot;新索引 &quot; + newIndexName + &quot; 创建结果：&quot; + createResult)</span><br><span class="line">## main</span><br><span class="line">#indexList = getIndices(oldClusterHost, oldClusterUserName, oldClusterPassword)</span><br><span class="line">systemIndex = []</span><br><span class="line">indexneed = [&apos;traderecord&apos;]</span><br><span class="line">#print(indexList)</span><br><span class="line">#print(systemIndex)</span><br><span class="line">for index in indexneed:</span><br><span class="line">    if (index.startswith(&quot;.&quot;)):</span><br><span class="line">        systemIndex.append(index)</span><br><span class="line">    else :</span><br><span class="line">        createIndex(index, index)</span><br><span class="line">if (len(systemIndex) &gt; 0) :</span><br><span class="line">    for index in systemIndex:</span><br><span class="line">        print (index + &quot; 或许是系统索引，不会重新创建，如有需要，请单独处理～&quot;)</span><br></pre></td></tr></table></figure>
<h4 id="1-4-2、执行Python脚本，创建目标索引"><a href="#1-4-2、执行Python脚本，创建目标索引" class="headerlink" title="1.4.2、执行Python脚本，创建目标索引"></a>1.4.2、执行Python脚本，创建目标索引</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/bin/python indiceCreate.py</span><br></pre></td></tr></table></figure>
<h4 id="1-4-3、查看目标ES的索引是否创建"><a href="#1-4-3、查看目标ES的索引是否创建" class="headerlink" title="1.4.3、查看目标ES的索引是否创建"></a>1.4.3、查看目标ES的索引是否创建</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http://10.60.2.31:9200/traderecord/_mapping?pretty</span><br></pre></td></tr></table></figure>
<h2 id="2、启动logstash服务"><a href="#2、启动logstash服务" class="headerlink" title="2、启动logstash服务"></a>2、启动logstash服务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#启动命令</span><br><span class="line">nohup /home/sspusr/logstash-7.3.2/bin/logstash &amp;</span><br><span class="line">#日志目录</span><br><span class="line">/home/sspusr/logstash-7.3.2/logs/*</span><br></pre></td></tr></table></figure>
<h3 id="2-1、查看数据迁移结果"><a href="#2-1、查看数据迁移结果" class="headerlink" title="2.1、查看数据迁移结果"></a>2.1、查看数据迁移结果</h3><h2 id="3、注意事项"><a href="#3、注意事项" class="headerlink" title="3、注意事项"></a>3、注意事项</h2><ol>
<li>趣街所使用的ES索引中，所有跟时间相关的字段，均为（type:text）类型，这就导致了阿里提供的logstash增量迁移方法，无法根据时间范围查询数据，需要有type:date的时间字段才可以进行范围定时抽取数据；</li>
<li>对logstash的全量pipline配置，进行调整，将增量中提到的定时任务添加到全量配置里，实现每分钟实时增量同步，logstash会记录checkpoint，不会出现重复数据；</li>
<li>索引的mapping及setting使用阿里的python脚本进行同步，目前已对脚本做了适配改造，支持同步指定索引</li>
<li>阿里官方迁移手册：<a href="https://help.aliyun.com/document_detail/418418.html" target="_blank" rel="noopener">通过Logstash将自建Elasticsearch数据全量或增量迁移至阿里云</a></li>
</ol>
]]></content>
      <categories>
        <category>ELK文档</category>
      </categories>
      <tags>
        <tag>ELK文档</tag>
      </tags>
  </entry>
  <entry>
    <title>Hyper-V虚拟机迁移至ESXI操作手册</title>
    <url>/2020/12/05/Hyper-V%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%81%E7%A7%BB%E8%87%B3ESXI%E6%93%8D%E4%BD%9C%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h1 id="Hyper-V虚拟机迁移至ESXI操作手册"><a href="#Hyper-V虚拟机迁移至ESXI操作手册" class="headerlink" title="Hyper-V虚拟机迁移至ESXI操作手册"></a>Hyper-V虚拟机迁移至ESXI操作手册</h1><h2 id="1、VMware-Converter工具介绍"><a href="#1、VMware-Converter工具介绍" class="headerlink" title="1、VMware-Converter工具介绍"></a>1、VMware-Converter工具介绍</h2><ul>
<li>VMware vCenter Converter 使用户可以快速、简单、轻松地实现基于 Microsoft Windows 的物理机转换和将第三方映像格式转换为 VMware 虚拟机。它还可以在两个 VMware 平台之间转换虚拟机</li>
<li>新版本融合了之前两个独立的工具：VMware P2V Assistant和Virtual Machine Importer。 除了物理——虚拟转化功能外，Converter 3还可以将微软Virtual Server/Virtual PC以及赛门铁克Backup Exec System Recovery等第三方VM格式转化为VMware兼容映像</li>
<li>Converter工具可以将物理机转化为WMware支持的虚拟机，也可将远程主机（物理\虚拟）直接迁移至ESXI，也可以将Hyper-V下关闭的主机保存为VMX文件，也可热迁移至ESXI目标服务器；<ul>
<li>下载地址：<a href="https://dl.filehorse.com/win/developer-tools/vmware-vcenter-converter/VMware-converter-en-6.2.0-8466193.exe?st=wf9V6bSKMI7z1LXnr5aL5g&amp;e=1607047164&amp;fn=VMware-converter-en-6.2.0-8466193.exe" target="_blank" rel="noopener">VMware-converter-en-6.2.0-8466193.exe</a></li>
</ul>
</li>
</ul>
<h2 id="2、VMware-Converter工具使用"><a href="#2、VMware-Converter工具使用" class="headerlink" title="2、VMware-Converter工具使用"></a>2、VMware-Converter工具使用</h2><blockquote>
<p>提示：安装过程一路下一步，启动时用右键管理员运行即可，如出现导出报错，请检查三个服务是否正常运行:<code>vmware-converter-agent</code>、<code>vmware-converter-server</code>、<code>vmware-converter-worker</code>。</p>
</blockquote>
<h3 id="2-1、转换虚拟机"><a href="#2-1、转换虚拟机" class="headerlink" title="2.1、转换虚拟机"></a>2.1、转换虚拟机</h3><p><img src="http://static.zybuluo.com/a807257775/2hivf6mwz67y9b1s0dex5znh/image_1eojsd88psn8a701rus12hj1n2k13.png" alt="image_1eojsd88psn8a701rus12hj1n2k13.png-37kB"></p>
<h3 id="2-2、连接Hyper-V服务器"><a href="#2-2、连接Hyper-V服务器" class="headerlink" title="2.2、连接Hyper-V服务器"></a>2.2、连接Hyper-V服务器</h3><p><img src="http://static.zybuluo.com/a807257775/6ha47bnrih5grj1i1pic8w3i/image_1eojsefdo1nio1qf1uot77614va1g.png" alt="image_1eojsefdo1nio1qf1uot77614va1g.png-25.5kB"><br><img src="http://static.zybuluo.com/a807257775/nl6uhrairsjci9nb3w2n4g0q/image_1eojses2a1l6id24hu51go61im01t.png" alt="image_1eojses2a1l6id24hu51go61im01t.png-15.8kB"></p>
<h3 id="2-2、选中要迁移的主机点击NEXT"><a href="#2-2、选中要迁移的主机点击NEXT" class="headerlink" title="2.2、选中要迁移的主机点击NEXT"></a>2.2、选中要迁移的主机点击NEXT</h3><p><img src="http://static.zybuluo.com/a807257775/6ndhtoyftvwurt28aiienj1w/image_1eojsg31f17mp1ddq7cvpig97j2a.png" alt="image_1eojsg31f17mp1ddq7cvpig97j2a.png-24.9kB"></p>
<h3 id="2-3、选中导出类型、版本、目标地址等信息"><a href="#2-3、选中导出类型、版本、目标地址等信息" class="headerlink" title="2.3、选中导出类型、版本、目标地址等信息"></a>2.3、选中导出类型、版本、目标地址等信息</h3><p><img src="http://static.zybuluo.com/a807257775/adq3apyasmxl76977jlyqptp/image_1eojso2gpunc1gj31eiqakk1tms2n.png" alt="image_1eojso2gpunc1gj31eiqakk1tms2n.png-54kB"></p>
<h3 id="2-4、可配置相关虚拟机参数"><a href="#2-4、可配置相关虚拟机参数" class="headerlink" title="2.4、可配置相关虚拟机参数"></a>2.4、可配置相关虚拟机参数</h3><p><img src="http://static.zybuluo.com/a807257775/c5arbhcac2ia0z0x2gt5ev9d/image_1eojsqsjp1dtr158em7u1mh5e6f3h.png" alt="image_1eojsqsjp1dtr158em7u1mh5e6f3h.png-37.4kB"></p>
<h3 id="2-5、开始导出"><a href="#2-5、开始导出" class="headerlink" title="2.5、开始导出"></a>2.5、开始导出</h3><p><img src="http://static.zybuluo.com/a807257775/ckioxjdwavj1tjvttqfr0uju/image_1eojsrgvevp819c34q5kpe17bv3u.png" alt="image_1eojsrgvevp819c34q5kpe17bv3u.png-51.2kB"></p>
<h3 id="2-6、完成导出"><a href="#2-6、完成导出" class="headerlink" title="2.6、完成导出"></a>2.6、完成导出</h3><p><img src="http://static.zybuluo.com/a807257775/0qflyywqwenigdp2ilhp68uv/image_1eojsshbj1i561pokg1orghnp4o.png" alt="image_1eojsshbj1i561pokg1orghnp4o.png-39.7kB"></p>
<h2 id="3、利用Ovftool工具转换ESXI支持的格式"><a href="#3、利用Ovftool工具转换ESXI支持的格式" class="headerlink" title="3、利用Ovftool工具转换ESXI支持的格式"></a>3、利用Ovftool工具转换ESXI支持的格式</h2><blockquote>
<p>提示：此工具在安装vmware workstation后，就默认在安装目录下，用cmd的方式进行格式转换；</p>
</blockquote>
<h3 id="3-1、用cmd切换至ovftool工具目录"><a href="#3-1、用cmd切换至ovftool工具目录" class="headerlink" title="3.1、用cmd切换至ovftool工具目录"></a>3.1、用cmd切换至ovftool工具目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#切换至ovftool目录</span><br><span class="line">cd /d D:\Program Files (x86)\VMware\VMware Workstation\OVFTool</span><br></pre></td></tr></table></figure>
<h3 id="3-2、执行转换命令"><a href="#3-2、执行转换命令" class="headerlink" title="3.2、执行转换命令"></a>3.2、执行转换命令</h3><p><img src="http://static.zybuluo.com/a807257775/rznj8byvww27crov0nxk833v/image_1eojt80uk1kdu11t4mhb1r1obqc55.png" alt="image_1eojt80uk1kdu11t4mhb1r1obqc55.png-21kB"></p>
<h3 id="3-3、转换完成后的目录结构"><a href="#3-3、转换完成后的目录结构" class="headerlink" title="3.3、转换完成后的目录结构"></a>3.3、转换完成后的目录结构</h3><p><img src="http://static.zybuluo.com/a807257775/zwnf01rt9za7b7r4yg90se83/image_1eojtaegv14k64no7mv12bo1qgd5i.png" alt="image_1eojtaegv14k64no7mv12bo1qgd5i.png-20.4kB"></p>
<h2 id="4、导入至esxi服务器"><a href="#4、导入至esxi服务器" class="headerlink" title="4、导入至esxi服务器"></a>4、导入至esxi服务器</h2><blockquote>
<p>提示：这里使用的是esxi6.7版本，导入了enterprise plus版本的key</p>
</blockquote>
<ul>
<li>新建/注册服务器<br><img src="http://static.zybuluo.com/a807257775/t5f38wjwk72pjp0v02arzl3e/image_1eojti5j31jjeduc1uji7m31jlg5v.png" alt="image_1eojti5j31jjeduc1uji7m31jlg5v.png-209.7kB"></li>
<li>从OVF或OVA文件部署虚拟机<br><img src="http://static.zybuluo.com/a807257775/w6bcpb5as2j2y1g4j45z4bs8/image_1eojv7j501d9rpo819qb1hnv1c069.png" alt="image_1eojv7j501d9rpo819qb1hnv1c069.png-59.8kB"></li>
<li>输入虚拟机名称，选择OVF及VMDX、VMDK文件<br><img src="http://static.zybuluo.com/a807257775/pzqg7fsyov1l8l3tluqakzlf/image_1eojv8orc1bbv1foc1lagqt6l6m.png" alt="image_1eojv8orc1bbv1foc1lagqt6l6m.png-67.1kB"></li>
<li>下一步完成即可<br><img src="http://static.zybuluo.com/a807257775/pow2ngc7mayivd0o6mud28h0/image_1eojv9b4l1pvh1pvg1jqs1hu41rdi13.png" alt="image_1eojv9b4l1pvh1pvg1jqs1hu41rdi13.png-70kB"></li>
<li>导入成功确认服务器连接是否正常<br><img src="http://static.zybuluo.com/a807257775/i46eesav1fqsebla367bjfu4/image_1eojvbgm7dkljco1tij1pbfuf41g.png" alt="image_1eojvbgm7dkljco1tij1pbfuf41g.png-124.6kB"></li>
</ul>
]]></content>
      <categories>
        <category>虚拟化技术</category>
      </categories>
      <tags>
        <tag>虚拟化技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Java诊断工具Arthas使用手册</title>
    <url>/2021/06/17/Java%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7Arthas%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h1 id="Java诊断工具Arthas使用手册"><a href="#Java诊断工具Arthas使用手册" class="headerlink" title="Java诊断工具Arthas使用手册"></a>Java诊断工具Arthas使用手册</h1><h2 id="1、Arthas可以解决什么问题？"><a href="#1、Arthas可以解决什么问题？" class="headerlink" title="1、Arthas可以解决什么问题？"></a>1、Arthas可以解决什么问题？</h2><ul>
<li><p>Arthas 是Alibaba开源的Java诊断工具，深受开发者喜爱。<br>当你遇到以下类似问题而束手无策时，Arthas可以帮助你解决：</p>
<ol>
<li>这个类从哪个 jar 包加载的？为什么会报各种类相关的 Exception？</li>
<li>我改的代码为什么没有执行到？难道是我没 commit？分支搞错了？</li>
<li>遇到问题无法在线上 debug，难道只能通过加日志再重新发布吗？</li>
<li>线上遇到某个用户的数据处理有问题，但线上同样无法 debug，线下无法重现！</li>
<li>是否有一个全局视角来查看系统的运行状况？</li>
<li>有什么办法可以监控到JVM的实时运行状态？</li>
<li>怎么快速定位应用的热点，生成火焰图？</li>
<li>怎样直接从JVM内查找某个类的实例？</li>
</ol>
</li>
<li><p><code>Arthas</code> 是阿里开源的 Java 诊断工具，深受开发者喜爱。在线排查问题，无需重启；动态跟踪 Java 代码；实时监控 JVM 状态。Arthas 支持 JDK 6+，支持 Linux/Mac/Windows，采用命令行交互模式，同时提供丰富的 Tab 自动补全功能，进一步方便进行问题的定位和诊断</p>
</li>
</ul>
<h2 id="2、下载与安装Arthas"><a href="#2、下载与安装Arthas" class="headerlink" title="2、下载与安装Arthas"></a>2、下载与安装Arthas</h2><blockquote>
<p>考虑后续生产是非互联网环境，所以采用全量包安装方法。本次使用arthas-bin.zip（3.5.1）版本进行部署实验，可前往Maven仓库或Github Releases下载，下载地址：<a href="https://github.com/alibaba/arthas/releases" target="_blank" rel="noopener">https://github.com/alibaba/arthas/releases</a></p>
</blockquote>
<h3 id="2-1、上传Arthas全量安装包至服务器"><a href="#2-1、上传Arthas全量安装包至服务器" class="headerlink" title="2.1、上传Arthas全量安装包至服务器"></a>2.1、上传Arthas全量安装包至服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#安装JDK1.8，添加当前用户的java环境变量</span><br><span class="line">[ccb-yth@APPSRV01 tools]$ cat ~/.bash_profile </span><br><span class="line">PATH=$PATH:$HOME/.local/bin:$HOME/bin</span><br><span class="line">JAVA_HOME=/home/ap/ccb-yth/java/jdk1.8.0_291</span><br><span class="line">export JAVA_HOME</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export CLASSPATH</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH:$HOME/bin:$JAVA_HOME/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line">#验证JDK环境是否正常</span><br><span class="line">[ccb-yth@APPSRV01 tools]$ java -version</span><br><span class="line">java version &quot;1.8.0_291&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_291-b10)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.291-b10, mixed mode)</span><br><span class="line"></span><br><span class="line">#将arthas-bin.zip（3.5.1）解压到此目录</span><br><span class="line">[ccb-yth@APPSRV01 tools]$ pwd</span><br><span class="line">/home/ap/ccb-yth/tools</span><br><span class="line"></span><br><span class="line">#arthas-boot.jar为启动的监听jar包</span><br><span class="line">[ccb-yth@APPSRV01 tools]$ ll</span><br><span class="line">total 13492</span><br><span class="line">-rw-rw-r-- 1 ccb-yth ccb-yth     8470 Sep 27  2020 arthas-agent.jar</span><br><span class="line">-rw-rw-r-- 1 ccb-yth ccb-yth   141721 Sep 27  2020 arthas-boot.jar</span><br><span class="line">-rw-rw-r-- 1 ccb-yth ccb-yth   431033 Sep 27  2020 arthas-client.jar</span><br><span class="line">-rw-rw-r-- 1 ccb-yth ccb-yth 13143726 Sep 27  2020 arthas-core.jar</span><br><span class="line">drwxrwxr-x 2 ccb-yth ccb-yth        6 Jun 16 18:40 arthas-output</span><br><span class="line">-rw-rw-r-- 1 ccb-yth ccb-yth      403 Sep 27  2020 arthas.properties</span><br><span class="line">-rw-rw-r-- 1 ccb-yth ccb-yth     8988 Sep 27  2020 arthas-spy.jar</span><br><span class="line">-rwxrwxr-x 1 ccb-yth ccb-yth     3113 Sep 27  2020 as.bat</span><br><span class="line">-rwxrwxr-x 1 ccb-yth ccb-yth     7744 Sep 27  2020 as-service.bat</span><br><span class="line">-rwxr-xr-x 1 ccb-yth ccb-yth    32781 Sep 27  2020 as.sh</span><br><span class="line">drwxr-xr-x 2 ccb-yth ccb-yth      156 Sep 27  2020 async-profiler</span><br><span class="line">-rwxr-xr-x 1 ccb-yth ccb-yth      635 Sep 27  2020 install-local.sh</span><br><span class="line">drwxr-xr-x 2 ccb-yth ccb-yth      112 Sep 27  2020 lib</span><br><span class="line">-rw-rw-r-- 1 ccb-yth ccb-yth     2020 Sep 27  2020 logback.xml</span><br><span class="line">-rw-rw-r-- 1 ccb-yth ccb-yth     4506 Sep 27  2020 math-game.jar</span><br></pre></td></tr></table></figure>
<h3 id="2-2、启动Arthas"><a href="#2-2、启动Arthas" class="headerlink" title="2.2、启动Arthas"></a>2.2、启动Arthas</h3><blockquote>
<p>提示：根据官网建议，我们使用arthas-boot的方式进行启动，来监听java进程，启动arhas首先保证本机有一个正在运行的java进程，如果有多个，arthas会通过命令行交互的方式，让你来选择监听某个java进程；</p>
</blockquote>
<ul>
<li><p>使用java -jar的方式启动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar arthas-boot.jar</span><br></pre></td></tr></table></figure>
</li>
<li><p>打印帮助信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar arthas-boot.jar -h</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3、Arthas的基本使用方法"><a href="#3、Arthas的基本使用方法" class="headerlink" title="3、Arthas的基本使用方法"></a>3、Arthas的基本使用方法</h2><h3 id="3-1、启动测试程序math-game"><a href="#3-1、启动测试程序math-game" class="headerlink" title="3.1、启动测试程序math-game"></a>3.1、启动测试程序math-game</h3><blockquote>
<p>math-game是一个简单的程序，每隔一秒生成一个随机数，再执行质因数分解，并打印出分解结果<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ccb-yth@APPSRV01 tools]$ java -jar math-game.jar</span><br><span class="line">204915=3*5*19*719</span><br><span class="line">illegalArgumentCount:  1, number is: -121796, need &gt;= 2</span><br><span class="line">illegalArgumentCount:  2, number is: -166805, need &gt;= 2</span><br><span class="line">18271=11*11*151</span><br><span class="line">illegalArgumentCount:  3, number is: -126135, need &gt;= 2</span><br><span class="line">illegalArgumentCount:  4, number is: -85911, need &gt;= 2</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="3-2、启动arthas，attach到java进程"><a href="#3-2、启动arthas，attach到java进程" class="headerlink" title="3.2、启动arthas，attach到java进程"></a>3.2、启动arthas，attach到java进程</h3><ul>
<li>在命令行下面执行<code>java -jar arthas-boot.jar</code>（使用和目标进程一致的用户启动，否则可能attach失败）</li>
<li>如果<code>attach</code>不上目标进程，可以查看<code>~/logs/arthas/</code> 目录下的日志。</li>
<li><p><code>java -jar arthas-boot.jar -h</code> 打印更多参数信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ccb-yth@APPSRV01 tools]$ java -jar arthas-boot.jar</span><br><span class="line">[INFO] arthas-boot version: 3.5.1</span><br></pre></td></tr></table></figure>
</li>
<li><p>选择监听的java进程</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[INFO] Found existing java process, please choose one and input the serial number of the process, eg : 1. Then hit ENTER.</span><br><span class="line">* [1]: 9462 math-game.jar</span><br><span class="line">  [2]: 10344 /home/ap/ccb-yth/apps/data-collector/data-collector.jar</span><br></pre></td></tr></table></figure>
</li>
<li><p>math-game进程是第1个，则输入1，再敲回车。Arthas会attach到目标进程上，并输出日志</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">[INFO] arthas home: /home/ap/ccb-yth/tools</span><br><span class="line">[INFO] Try to attach process 9462</span><br><span class="line">[INFO] Attach process 9462 success.</span><br><span class="line">[INFO] arthas-client connect 127.0.0.1 3658</span><br><span class="line">  ,---.  ,------. ,--------.,--.  ,--.  ,---.   ,---.                           </span><br><span class="line"> /  O  \ |  .--. &apos;&apos;--.  .--&apos;|  &apos;--&apos;  | /  O  \ &apos;   .-&apos;                          </span><br><span class="line">|  .-.  ||  &apos;--&apos;.&apos;   |  |   |  .--.  ||  .-.  |`.  `-.                          </span><br><span class="line">|  | |  ||  |\  \    |  |   |  |  |  ||  | |  |.-&apos;    |                         </span><br><span class="line">`--&apos; `--&apos;`--&apos; &apos;--&apos;   `--&apos;   `--&apos;  `--&apos;`--&apos; `--&apos;`-----&apos;                          </span><br><span class="line">                                                                                </span><br><span class="line"></span><br><span class="line">wiki       https://arthas.aliyun.com/doc                                        </span><br><span class="line">tutorials  https://arthas.aliyun.com/doc/arthas-tutorials.html                  </span><br><span class="line">version    3.5.1                                                                </span><br><span class="line">main_class                                                                      </span><br><span class="line">pid        9462                                                                 </span><br><span class="line">time       2021-06-17 10:22:09  </span><br><span class="line">[arthas@9462]$</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-3、查看dashboard"><a href="#3-3、查看dashboard" class="headerlink" title="3.3、查看dashboard"></a>3.3、查看dashboard</h3><blockquote>
<p>提示：命令行输入dashboard，按回车，会展示当前进程的信息，按ctrl+c可以中断执行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#当arthas附加到进程后，命令行提示符会变为[arthas@xxx]$，表明附加成功</span><br><span class="line">[arthas@9462]$ dashboard</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p><img src="http://static.zybuluo.com/a807257775/4y4fc03pk8mcnjsne7svh926/image_1f8bsjea11leu1p4mtq91f5e3g3p.png" alt="image_1f8bsjea11leu1p4mtq91f5e3g3p.png-128.3kB"></p>
<h3 id="3-4、通过thread命令来获取到math-game进程的Main-Class"><a href="#3-4、通过thread命令来获取到math-game进程的Main-Class" class="headerlink" title="3.4、通过thread命令来获取到math-game进程的Main Class"></a>3.4、通过thread命令来获取到math-game进程的Main Class</h3><blockquote>
<p>thread 1会打印线程ID 1的栈，通常是main函数的线程。一目了然的了解系统的状态，哪些线程比较占cpu？他们到底在做什么？<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@9462]$ thread 1 | grep &apos;main(&apos;</span><br><span class="line">    at demo.MathGame.main(MathGame.java:17)</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="3-5、通过jad来反编译Main-Class"><a href="#3-5、通过jad来反编译Main-Class" class="headerlink" title="3.5、通过jad来反编译Main Class"></a>3.5、通过jad来反编译Main Class</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@9462]$ jad demo.MathGame</span><br><span class="line"></span><br><span class="line">ClassLoader:                                                                                                                                                      </span><br><span class="line">+-sun.misc.Launcher$AppClassLoader@70dea4e                                                                                                                        </span><br><span class="line">  +-sun.misc.Launcher$ExtClassLoader@68833bb2                                                                                                                     </span><br><span class="line"></span><br><span class="line">Location:                                                                                                                                                         </span><br><span class="line">/home/ap/ccb-yth/tools/math-game.jar                                                                                                                              </span><br><span class="line"></span><br><span class="line">       /*</span><br><span class="line">        * Decompiled with CFR.</span><br><span class="line">        */</span><br><span class="line">       package demo;</span><br><span class="line">       </span><br><span class="line">       import java.util.ArrayList;</span><br><span class="line">       import java.util.List;</span><br><span class="line">       import java.util.Random;</span><br><span class="line">       import java.util.concurrent.TimeUnit;</span><br><span class="line">       </span><br><span class="line">       public class MathGame &#123;</span><br><span class="line">           private static Random random = new Random();</span><br><span class="line">           private int illegalArgumentCount = 0;</span><br><span class="line">       </span><br><span class="line">           public List&lt;Integer&gt; primeFactors(int number) &#123;</span><br><span class="line">/*44*/         if (number &lt; 2) &#123;</span><br><span class="line">/*45*/             ++this.illegalArgumentCount;</span><br><span class="line">                   throw new IllegalArgumentException(&quot;number is: &quot; + number + &quot;, need &gt;= 2&quot;);</span><br><span class="line">               &#125;</span><br><span class="line">               ArrayList&lt;Integer&gt; result = new ArrayList&lt;Integer&gt;();</span><br><span class="line">/*50*/         int i = 2;</span><br><span class="line">/*51*/         while (i &lt;= number) &#123;</span><br><span class="line">/*52*/             if (number % i == 0) &#123;</span><br><span class="line">/*53*/                 result.add(i);</span><br><span class="line">/*54*/                 number /= i;</span><br><span class="line">/*55*/                 i = 2;</span><br><span class="line">                       continue;</span><br><span class="line">                   &#125;</span><br><span class="line">/*57*/             ++i;</span><br><span class="line">               &#125;</span><br><span class="line">/*61*/         return result;</span><br><span class="line">           &#125;</span><br><span class="line">       </span><br><span class="line">           public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">               MathGame game = new MathGame();</span><br><span class="line">               while (true) &#123;</span><br><span class="line">/*16*/             game.run();</span><br><span class="line">/*17*/             TimeUnit.SECONDS.sleep(1L);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       </span><br><span class="line">           public void run() throws InterruptedException &#123;</span><br><span class="line">               try &#123;</span><br><span class="line">/*23*/             int number = random.nextInt() / 10000;</span><br><span class="line">/*24*/             List&lt;Integer&gt; primeFactors = this.primeFactors(number);</span><br><span class="line">/*25*/             MathGame.print(number, primeFactors);</span><br><span class="line">               &#125;</span><br><span class="line">               catch (Exception e) &#123;</span><br><span class="line">/*28*/             System.out.println(String.format(&quot;illegalArgumentCount:%3d, &quot;, this.illegalArgumentCount) + e.getMessage());</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       </span><br><span class="line">           public static void print(int number, List&lt;Integer&gt; primeFactors) &#123;</span><br><span class="line">               StringBuffer sb = new StringBuffer(number + &quot;=&quot;);</span><br><span class="line">/*34*/         for (int factor : primeFactors) &#123;</span><br><span class="line">/*35*/             sb.append(factor).append(&apos;*&apos;);</span><br><span class="line">               &#125;</span><br><span class="line">/*37*/         if (sb.charAt(sb.length() - 1) == &apos;*&apos;) &#123;</span><br><span class="line">/*38*/             sb.deleteCharAt(sb.length() - 1);</span><br><span class="line">               &#125;</span><br><span class="line">/*40*/         System.out.println(sb);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">Affect(row-cnt:1) cost in 745 ms.</span><br></pre></td></tr></table></figure>
<h3 id="3-6、watch指令"><a href="#3-6、watch指令" class="headerlink" title="3.6、watch指令"></a>3.6、watch指令</h3><blockquote>
<p>通过watch命令来查看demo.MathGame#primeFactors函数的返回值</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@9462]$ watch demo.MathGame primeFactors returnObj</span><br><span class="line">Press Q or Ctrl+C to abort.</span><br><span class="line">Affect(class count: 1 , method count: 1) cost in 111 ms, listenerId: 1</span><br><span class="line">method=demo.MathGame.primeFactors location=AtExit</span><br><span class="line">ts=2021-06-17 10:29:00; [cost=2.068011ms] result=@ArrayList[</span><br><span class="line">    @Integer[2],</span><br><span class="line">    @Integer[2],</span><br><span class="line">    @Integer[3],</span><br><span class="line">    @Integer[37],</span><br><span class="line">    @Integer[101],</span><br><span class="line">]</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<h3 id="3-7、生成进程火焰图"><a href="#3-7、生成进程火焰图" class="headerlink" title="3.7、生成进程火焰图"></a>3.7、生成进程火焰图</h3><blockquote>
<p><code>profiler</code> 命令支持生成应用热点的火焰图。本质上是通过不断的采样，然后把收集到的采样结果生成火焰图。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@10344]$ profiler start</span><br><span class="line">Started [cpu] profiling</span><br></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[arthas@10344]$ profiler stop</span><br><span class="line">OK</span><br><span class="line">profiler output file: /home/ap/ccb-yth/apps/data-collector/arthas-output/20210617-103942.svg</span><br><span class="line">[arthas@10344]$ exit</span><br><span class="line">[ccb-yth@APPSRV01 tools]$ sz /home/ap/ccb-yth/apps/data-collector/arthas-output/20210617-103942.svg</span><br></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/a807257775/tit0wjcvg0wfhckel1ifu1ka/image_1f8btis4v18kqljsfg41lc218ap16.png" alt="image_1f8btis4v18kqljsfg41lc218ap16.png-111.4kB"></p>
<h3 id="3-8、退出arthas"><a href="#3-8、退出arthas" class="headerlink" title="3.8、退出arthas"></a>3.8、退出arthas</h3><ul>
<li><p>如果只是退出当前的连接，可以用quit或者exit命令。Attach到目标进程上的arthas还会继续运行，端口会保持开放，下次连接时可以直接连接上。</p>
</li>
<li><p>如果想完全退出arthas，可以执行stop命令。</p>
</li>
</ul>
<h2 id="4、进阶使用"><a href="#4、进阶使用" class="headerlink" title="4、进阶使用"></a>4、进阶使用</h2><ul>
<li><a href="https://arthas.aliyun.com/doc/advanced-use.html" target="_blank" rel="noopener">官方进阶使用手册</a></li>
</ul>
<h2 id="5、官方手册与下载地址"><a href="#5、官方手册与下载地址" class="headerlink" title="5、官方手册与下载地址"></a>5、官方手册与下载地址</h2><ul>
<li><a href="https://github.com/alibaba/arthas/releases" target="_blank" rel="noopener">Arthas Github下载地址</a></li>
<li><a href="https://arthas.aliyun.com/doc/" target="_blank" rel="noopener">官方Arthas 中文用户文档</a></li>
</ul>
]]></content>
      <categories>
        <category>Arthas</category>
      </categories>
      <tags>
        <tag>Arthas</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubectl 常用命令备忘</title>
    <url>/2020/09/23/Kubectl%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<h1 id="Kubectl-常用命令备忘"><a href="#Kubectl-常用命令备忘" class="headerlink" title="Kubectl 常用命令备忘"></a>Kubectl 常用命令备忘</h1><h2 id="1、Kubectl-自动补全"><a href="#1、Kubectl-自动补全" class="headerlink" title="1、Kubectl 自动补全"></a>1、Kubectl 自动补全</h2><ul>
<li><p>BASH</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &lt;(kubectl completion bash) # 在 bash 中设置当前 shell 的自动补全，要先安装 bash-completion 包。</span><br><span class="line">echo &quot;source &lt;(kubectl completion bash)&quot; &gt;&gt; ~/.bashrc # 在您的 bash shell 中永久的添加自动补全</span><br></pre></td></tr></table></figure>
</li>
<li><p>您还可以为 kubectl 使用一个速记别名，该别名也可以与 completion 一起使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alias k=kubectl</span><br><span class="line">complete -F __start_kubectl k</span><br></pre></td></tr></table></figure>
</li>
<li><p>ZSH</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &lt;(kubectl completion zsh)  # 在 zsh 中设置当前 shell 的自动补全</span><br><span class="line">echo &quot;if [ $commands[kubectl] ]; then source &lt;(kubectl completion zsh); fi&quot; &gt;&gt; ~/.zshrc # 在您的 zsh shell 中永久的添加自动补全</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2、Kubectl-上下文和配置"><a href="#2、Kubectl-上下文和配置" class="headerlink" title="2、Kubectl 上下文和配置"></a>2、Kubectl 上下文和配置</h2><ul>
<li>设置 kubectl 与哪个 Kubernetes 集群进行通信并修改配置信息<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl config view # 显示合并的 kubeconfig 配置。</span><br><span class="line"></span><br><span class="line"># 同时使用多个 kubeconfig 文件并查看合并的配置</span><br><span class="line">KUBECONFIG=~/.kube/config:~/.kube/kubconfig2 kubectl config view</span><br><span class="line"></span><br><span class="line"># 获取 e2e 用户的密码</span><br><span class="line">kubectl config view -o jsonpath=&apos;&#123;.users[?(@.name == &quot;e2e&quot;)].user.password&#125;&apos;</span><br><span class="line"></span><br><span class="line">kubectl config view -o jsonpath=&apos;&#123;.users[].name&#125;&apos;    # 显示第一个用户</span><br><span class="line">kubectl config view -o jsonpath=&apos;&#123;.users[*].name&#125;&apos;   # 获取用户列表</span><br><span class="line">kubectl config get-contexts                          # 显示上下文列表</span><br><span class="line">kubectl config current-context                       # 展示当前所处的上下文</span><br><span class="line">kubectl config use-context my-cluster-name           # 设置默认的上下文为 my-cluster-name</span><br><span class="line"></span><br><span class="line"># 添加新的集群配置到 kubeconf 中，使用 basic auth 进行身份认证</span><br><span class="line">kubectl config set-credentials kubeuser/foo.kubernetes.com --username=kubeuser --password=kubepassword</span><br><span class="line"></span><br><span class="line"># 在指定上下文中持久性地保存名字空间，供所有后续 kubectl 命令使用</span><br><span class="line">kubectl config set-context --current --namespace=ggckad-s2</span><br><span class="line"></span><br><span class="line"># 使用特定的用户名和名字空间设置上下文</span><br><span class="line">kubectl config set-context gce --user=cluster-admin --namespace=foo \</span><br><span class="line">  &amp;&amp; kubectl config use-context gce</span><br><span class="line"></span><br><span class="line">kubectl config unset users.foo                       # 删除用户 foo</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3、Apply"><a href="#3、Apply" class="headerlink" title="3、Apply"></a>3、Apply</h2><blockquote>
<p>apply 通过定义 Kubernetes 资源的文件来管理应用。它通过运行 kubectl apply 在集群中创建和更新资源。 这是在生产中管理 Kubernetes 应用的推荐方法。 参见<a href="https://kubectl.docs.kubernetes.io/" target="_blank" rel="noopener">Kubectl 文档</a>。</p>
</blockquote>
<h2 id="4、创建对象"><a href="#4、创建对象" class="headerlink" title="4、创建对象"></a>4、创建对象</h2><ul>
<li>Kubernetes 配置可以用 YAML 或 JSON 定义。可以使用的文件扩展名有 .yaml、.yml 和 .json。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl apply -f ./my-manifest.yaml           # 创建资源</span><br><span class="line">kubectl apply -f ./my1.yaml -f ./my2.yaml     # 使用多个文件创建</span><br><span class="line">kubectl apply -f ./dir                        # 基于目录下的所有清单文件创建资源</span><br><span class="line">kubectl apply -f https://git.io/vPieo         # 从 URL 中创建资源</span><br><span class="line">kubectl create deployment nginx --image=nginx # 启动单实例 nginx</span><br><span class="line">kubectl explain pods,svc                      # 获取 pod 清单的文档说明</span><br><span class="line"></span><br><span class="line"># 从标准输入创建多个 YAML 对象</span><br><span class="line">cat &lt;&lt;EOF | kubectl apply -f -</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: busybox-sleep</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: busybox</span><br><span class="line">    image: busybox</span><br><span class="line">    args:</span><br><span class="line">    - sleep</span><br><span class="line">    - &quot;1000000&quot;</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: busybox-sleep-less</span><br><span class="line">spec:</span><br><span class="line">  containers:</span><br><span class="line">  - name: busybox</span><br><span class="line">    image: busybox</span><br><span class="line">    args:</span><br><span class="line">    - sleep</span><br><span class="line">    - &quot;1000&quot;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"># 创建有多个 key 的 Secret</span><br><span class="line">cat &lt;&lt;EOF | kubectl apply -f -</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: mysecret</span><br><span class="line">type: Opaque</span><br><span class="line">data:</span><br><span class="line">  password: $(echo -n &quot;s33msi4&quot; | base64 -w0)</span><br><span class="line">  username: $(echo -n &quot;jane&quot; | base64 -w0)</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="5、查看和查找资源"><a href="#5、查看和查找资源" class="headerlink" title="5、查看和查找资源"></a>5、查看和查找资源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># get 命令的基本输出</span><br><span class="line">kubectl get services                          # 列出当前命名空间下的所有 services</span><br><span class="line">kubectl get pods --all-namespaces             # 列出所有命名空间下的全部的 Pods</span><br><span class="line">kubectl get pods -o wide                      # 列出当前命名空间下的全部 Pods，并显示更详细的信息</span><br><span class="line">kubectl get deployment my-dep                 # 列出某个特定的 Deployment</span><br><span class="line">kubectl get pods                              # 列出当前命名空间下的全部 Pods</span><br><span class="line">kubectl get pod my-pod -o yaml                # 获取一个 pod 的 YAML</span><br><span class="line"></span><br><span class="line"># describe 命令的详细输出</span><br><span class="line">kubectl describe nodes my-node</span><br><span class="line">kubectl describe pods my-pod</span><br><span class="line"></span><br><span class="line"># 列出当前名字空间下所有 Services，按名称排序</span><br><span class="line">kubectl get services --sort-by=.metadata.name</span><br><span class="line"></span><br><span class="line"># 列出 Pods，按重启次数排序</span><br><span class="line">kubectl get pods --sort-by=&apos;.status.containerStatuses[0].restartCount&apos;</span><br><span class="line"></span><br><span class="line"># 列举所有 PV 持久卷，按容量排序</span><br><span class="line">kubectl get pv --sort-by=.spec.capacity.storage</span><br><span class="line"></span><br><span class="line"># 获取包含 app=cassandra 标签的所有 Pods 的 version 标签</span><br><span class="line">kubectl get pods --selector=app=cassandra -o \</span><br><span class="line">  jsonpath=&apos;&#123;.items[*].metadata.labels.version&#125;&apos;</span><br><span class="line"></span><br><span class="line"># 获取所有工作节点（使用选择器以排除标签名称为 &apos;node-role.kubernetes.io/master&apos; 的结果）</span><br><span class="line">kubectl get node --selector=&apos;!node-role.kubernetes.io/master&apos;</span><br><span class="line"></span><br><span class="line"># 获取当前命名空间中正在运行的 Pods</span><br><span class="line">kubectl get pods --field-selector=status.phase=Running</span><br><span class="line"></span><br><span class="line"># 获取全部节点的 ExternalIP 地址</span><br><span class="line">kubectl get nodes -o jsonpath=&apos;&#123;.items[*].status.addresses[?(@.type==&quot;ExternalIP&quot;)].address&#125;&apos;</span><br><span class="line"></span><br><span class="line"># 列出属于某个特定 RC 的 Pods 的名称</span><br><span class="line"># 在转换对于 jsonpath 过于复杂的场合，&quot;jq&quot; 命令很有用；可以在 https://stedolan.github.io/jq/ 找到它。</span><br><span class="line">sel=$&#123;$(kubectl get rc my-rc --output=json | jq -j &apos;.spec.selector | to_entries | .[] | &quot;\(.key)=\(.value),&quot;&apos;)%?&#125;</span><br><span class="line">echo $(kubectl get pods --selector=$sel --output=jsonpath=&#123;.items..metadata.name&#125;)</span><br><span class="line"></span><br><span class="line"># 显示所有 Pods 的标签（或任何其他支持标签的 Kubernetes 对象）</span><br><span class="line">kubectl get pods --show-labels</span><br><span class="line"></span><br><span class="line"># 检查哪些节点处于就绪状态</span><br><span class="line">JSONPATH=&apos;&#123;range .items[*]&#125;&#123;@.metadata.name&#125;:&#123;range @.status.conditions[*]&#125;&#123;@.type&#125;=&#123;@.status&#125;;&#123;end&#125;&#123;end&#125;&apos; \</span><br><span class="line"> &amp;&amp; kubectl get nodes -o jsonpath=&quot;$JSONPATH&quot; | grep &quot;Ready=True&quot;</span><br><span class="line"></span><br><span class="line"># 列出被一个 Pod 使用的全部 Secret</span><br><span class="line">kubectl get pods -o json | jq &apos;.items[].spec.containers[].env[]?.valueFrom.secretKeyRef.name&apos; | grep -v null | sort | uniq</span><br><span class="line"></span><br><span class="line"># 列举所有 Pods 中初始化容器的容器 ID（containerID）</span><br><span class="line"># Helpful when cleaning up stopped containers, while avoiding removal of initContainers.</span><br><span class="line">kubectl get pods --all-namespaces -o jsonpath=&apos;&#123;range .items[*].status.initContainerStatuses[*]&#125;&#123;.containerID&#125;&#123;&quot;\n&quot;&#125;&#123;end&#125;&apos; | cut -d/ -f3</span><br><span class="line"></span><br><span class="line"># 列出事件（Events），按时间戳排序</span><br><span class="line">kubectl get events --sort-by=.metadata.creationTimestamp</span><br><span class="line"></span><br><span class="line"># 比较当前的集群状态和假定某清单被应用之后的集群状态</span><br><span class="line">kubectl diff -f ./my-manifest.yaml</span><br></pre></td></tr></table></figure>
<h2 id="6、更新资源"><a href="#6、更新资源" class="headerlink" title="6、更新资源"></a>6、更新资源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl set image deployment/frontend www=image:v2               # 滚动更新 &quot;frontend&quot; Deployment 的 &quot;www&quot; 容器镜像</span><br><span class="line">kubectl rollout history deployment/frontend                      # 检查 Deployment 的历史记录，包括版本 </span><br><span class="line">kubectl rollout undo deployment/frontend                         # 回滚到上次部署版本</span><br><span class="line">kubectl rollout undo deployment/frontend --to-revision=2         # 回滚到特定部署版本</span><br><span class="line">kubectl rollout status -w deployment/frontend                    # 监视 &quot;frontend&quot; Deployment 的滚动升级状态直到完成</span><br><span class="line">kubectl rollout restart deployment/frontend                      # 轮替重启 &quot;frontend&quot; Deployment</span><br><span class="line"></span><br><span class="line">cat pod.json | kubectl replace -f -                              # 通过传入到标准输入的 JSON 来替换 Pod</span><br><span class="line"></span><br><span class="line"># 强制替换，删除后重建资源。会导致服务不可用。</span><br><span class="line">kubectl replace --force -f ./pod.json</span><br><span class="line"></span><br><span class="line"># 为多副本的 nginx 创建服务，使用 80 端口提供服务，连接到容器的 8000 端口。</span><br><span class="line">kubectl expose rc nginx --port=80 --target-port=8000</span><br><span class="line"></span><br><span class="line"># 将某单容器 Pod 的镜像版本（标签）更新到 v4</span><br><span class="line">kubectl get pod mypod -o yaml | sed &apos;s/\(image: myimage\):.*$/\1:v4/&apos; | kubectl replace -f -</span><br><span class="line"></span><br><span class="line">kubectl label pods my-pod new-label=awesome                      # 添加标签</span><br><span class="line">kubectl annotate pods my-pod icon-url=http://goo.gl/XXBTWq       # 添加注解</span><br><span class="line">kubectl autoscale deployment foo --min=2 --max=10                # 对 &quot;foo&quot; Deployment 自动伸缩容</span><br></pre></td></tr></table></figure>
<h2 id="7、部分更新资源"><a href="#7、部分更新资源" class="headerlink" title="7、部分更新资源"></a>7、部分更新资源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 部分更新某节点</span><br><span class="line">kubectl patch node k8s-node-1 -p &apos;&#123;&quot;spec&quot;:&#123;&quot;unschedulable&quot;:true&#125;&#125;&apos; </span><br><span class="line"></span><br><span class="line"># 更新容器的镜像；spec.containers[*].name 是必须的。因为它是一个合并性质的主键。</span><br><span class="line">kubectl patch pod valid-pod -p &apos;&#123;&quot;spec&quot;:&#123;&quot;containers&quot;:[&#123;&quot;name&quot;:&quot;kubernetes-serve-hostname&quot;,&quot;image&quot;:&quot;new image&quot;&#125;]&#125;&#125;&apos;</span><br><span class="line"></span><br><span class="line"># 使用带位置数组的 JSON patch 更新容器的镜像</span><br><span class="line">kubectl patch pod valid-pod --type=&apos;json&apos; -p=&apos;[&#123;&quot;op&quot;: &quot;replace&quot;, &quot;path&quot;: &quot;/spec/containers/0/image&quot;, &quot;value&quot;:&quot;new image&quot;&#125;]&apos;</span><br><span class="line"></span><br><span class="line"># 使用带位置数组的 JSON patch 禁用某 Deployment 的 livenessProbe</span><br><span class="line">kubectl patch deployment valid-deployment  --type json   -p=&apos;[&#123;&quot;op&quot;: &quot;remove&quot;, &quot;path&quot;: &quot;/spec/template/spec/containers/0/livenessProbe&quot;&#125;]&apos;</span><br><span class="line"></span><br><span class="line"># 在带位置数组中添加元素 </span><br><span class="line">kubectl patch sa default --type=&apos;json&apos; -p=&apos;[&#123;&quot;op&quot;: &quot;add&quot;, &quot;path&quot;: &quot;/secrets/1&quot;, &quot;value&quot;: &#123;&quot;name&quot;: &quot;whatever&quot; &#125; &#125;]&apos;</span><br></pre></td></tr></table></figure>
<h2 id="8、编辑资源"><a href="#8、编辑资源" class="headerlink" title="8、编辑资源"></a>8、编辑资源</h2><ul>
<li>使用你偏爱的编辑器编辑 API 资源。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl edit svc/docker-registry                      # 编辑名为 docker-registry 的服务</span><br><span class="line">KUBE_EDITOR=&quot;nano&quot; kubectl edit svc/docker-registry   # 使用其他编辑器</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="9、对资源进行伸缩"><a href="#9、对资源进行伸缩" class="headerlink" title="9、对资源进行伸缩"></a>9、对资源进行伸缩</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl scale --replicas=3 rs/foo                                 # 将名为 &apos;foo&apos; 的副本集伸缩到 3 副本</span><br><span class="line">kubectl scale --replicas=3 -f foo.yaml                            # 将在 &quot;foo.yaml&quot; 中的特定资源伸缩到 3 个副本</span><br><span class="line">kubectl scale --current-replicas=2 --replicas=3 deployment/mysql  # 如果名为 mysql 的 Deployment 的副本当前是 2，那么将它伸缩到 3</span><br><span class="line">kubectl scale --replicas=5 rc/foo rc/bar rc/baz                   # 伸缩多个副本控制器</span><br></pre></td></tr></table></figure>
<h2 id="10、删除资源"><a href="#10、删除资源" class="headerlink" title="10、删除资源"></a>10、删除资源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl delete -f ./pod.json                                              # 删除在 pod.json 中指定的类型和名称的 Pod</span><br><span class="line">kubectl delete pod,service baz foo                                        # 删除名称为 &quot;baz&quot; 和 &quot;foo&quot; 的 Pod 和服务</span><br><span class="line">kubectl delete pods,services -l name=myLabel                              # 删除包含 name=myLabel 标签的 pods 和服务</span><br><span class="line">kubectl delete pods,services -l name=myLabel --include-uninitialized      # 删除包含 label name=myLabel 标签的 Pods 和服务</span><br><span class="line">kubectl -n my-ns delete po,svc --all                                      # 删除在 my-ns 名字空间中全部的 Pods 和服务</span><br><span class="line"># 删除所有与 pattern1 或 pattern2 awk 模式匹配的 Pods</span><br><span class="line">kubectl get pods  -n mynamespace --no-headers=true | awk &apos;/pattern1|pattern2/&#123;print $1&#125;&apos; | xargs  kubectl delete -n mynamespace pod</span><br></pre></td></tr></table></figure>
<h2 id="11、与运行中的-Pods-进行交互"><a href="#11、与运行中的-Pods-进行交互" class="headerlink" title="11、与运行中的 Pods 进行交互"></a>11、与运行中的 Pods 进行交互</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl logs my-pod                                 # 获取 pod 日志（标准输出）</span><br><span class="line">kubectl logs -l name=myLabel                        # 获取含 name=myLabel 标签的 Pods 的日志（标准输出）</span><br><span class="line">kubectl logs my-pod --previous                      # 获取上个容器实例的 pod 日志（标准输出）</span><br><span class="line">kubectl logs my-pod -c my-container                 # 获取 Pod 容器的日志（标准输出, 多容器场景）</span><br><span class="line">kubectl logs -l name=myLabel -c my-container        # 获取含 name=myLabel 标签的 Pod 容器日志（标准输出, 多容器场景）</span><br><span class="line">kubectl logs my-pod -c my-container --previous      # 获取 Pod 中某容器的上个实例的日志（标准输出, 多容器场景）</span><br><span class="line">kubectl logs -f my-pod                              # 流式输出 Pod 的日志（标准输出）</span><br><span class="line">kubectl logs -f my-pod -c my-container              # 流式输出 Pod 容器的日志（标准输出, 多容器场景）</span><br><span class="line">kubectl logs -f -l name=myLabel --all-containers    # 流式输出含 name=myLabel 标签的 Pod 的所有日志（标准输出）</span><br><span class="line">kubectl run -i --tty busybox --image=busybox -- sh  # 以交互式 Shell 运行 Pod</span><br><span class="line">kubectl run nginx --image=nginx -n mynamespace      # 在指定名字空间中运行 nginx Pod</span><br><span class="line">kubectl run nginx --image=nginx                     # 运行 ngins Pod 并将其规约写入到名为 pod.yaml 的文件</span><br><span class="line">  --dry-run=client -o yaml &gt; pod.yaml</span><br><span class="line"></span><br><span class="line">kubectl attach my-pod -i                            # 挂接到一个运行的容器中</span><br><span class="line">kubectl port-forward my-pod 5000:6000               # 在本地计算机上侦听端口 5000 并转发到 my-pod 上的端口 6000</span><br><span class="line">kubectl exec my-pod -- ls /                         # 在已有的 Pod 中运行命令（单容器场景）</span><br><span class="line">kubectl exec my-pod -c my-container -- ls /         # 在已有的 Pod 中运行命令（多容器场景）</span><br><span class="line">kubectl top pod POD_NAME --containers               # 显示给定 Pod 和其中容器的监控数据</span><br></pre></td></tr></table></figure>
<h2 id="12、与节点和集群进行交互"><a href="#12、与节点和集群进行交互" class="headerlink" title="12、与节点和集群进行交互"></a>12、与节点和集群进行交互</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl cordon my-node                                                # 标记 my-node 节点为不可调度</span><br><span class="line">kubectl drain my-node                                                 # 对 my-node 节点进行清空操作，为节点维护做准备</span><br><span class="line">kubectl uncordon my-node                                              # 标记 my-node 节点为可以调度</span><br><span class="line">kubectl top node my-node                                              # 显示给定节点的度量值</span><br><span class="line">kubectl cluster-info                                                  # 显示主控节点和服务的地址</span><br><span class="line">kubectl cluster-info dump                                             # 将当前集群状态转储到标准输出</span><br><span class="line">kubectl cluster-info dump --output-directory=/path/to/cluster-state   # 将当前集群状态输出到 /path/to/cluster-state</span><br><span class="line"></span><br><span class="line"># 如果已存在具有指定键和效果的污点，则替换其值为指定值</span><br><span class="line">kubectl taint nodes foo dedicated=special-user:NoSchedule</span><br></pre></td></tr></table></figure>
<h3 id="12-1、资源类型"><a href="#12-1、资源类型" class="headerlink" title="12.1、资源类型"></a>12.1、资源类型</h3><ul>
<li>用于探索 API 资源的其他操作<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl api-resources --namespaced=true      # 所有命名空间作用域的资源</span><br><span class="line">kubectl api-resources --namespaced=false     # 所有非命名空间作用域的资源</span><br><span class="line">kubectl api-resources -o name                # 用简单格式列举所有资源（仅显示资源名称）</span><br><span class="line">kubectl api-resources -o wide                # 用扩展格式列举所有资源（又称 &quot;wide&quot; 格式）</span><br><span class="line">kubectl api-resources --verbs=list,get       # 支持 &quot;list&quot; 和 &quot;get&quot; 请求动词的所有资源</span><br><span class="line">kubectl api-resources --api-group=extensions # &quot;extensions&quot; API 组中的所有资源</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="12-2、格式化输出"><a href="#12-2、格式化输出" class="headerlink" title="12.2、格式化输出"></a>12.2、格式化输出</h3><ul>
<li><p>要以特定格式将详细信息输出到终端窗口，可以将<code>-o</code>或<code>--output</code>参数添加到支持的<code>kubectl</code>命令<br><img src="http://static.zybuluo.com/a807257775/1ky8lciw3rwtdfnz4j9u9w1y/image_1eircal39tnp15mu1a0u1o6iun911.png" alt="image_1eircal39tnp15mu1a0u1o6iun911.png-51.4kB"></p>
</li>
<li><p>使用 -o=custom-columns 的示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 集群中运行着的所有镜像</span><br><span class="line">kubectl get pods -A -o=custom-columns=&apos;DATA:spec.containers[*].image&apos;</span><br><span class="line"># 除 &quot;k8s.gcr.io/coredns:1.6.2&quot; 之外的所有镜像</span><br><span class="line">kubectl get pods -A -o=custom-columns=&apos;DATA:spec.containers[?(@.image!=&quot;k8s.gcr.io/coredns:1.6.2&quot;)].image&apos;</span><br><span class="line"># 输出 metadata 下面的所有字段，无论 Pod 名字为何</span><br><span class="line">kubectl get pods -A -o=custom-columns=&apos;DATA:metadata.*&apos;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="12-3、Kubectl-日志输出详细程度和调试"><a href="#12-3、Kubectl-日志输出详细程度和调试" class="headerlink" title="12.3、Kubectl 日志输出详细程度和调试"></a>12.3、Kubectl 日志输出详细程度和调试</h3><ul>
<li>Kubectl 日志输出详细程度是通过 -v 或者 –v 来控制的，参数后跟一个数字表示日志的级别。 Kubernetes 通用的日志习惯和相关的日志级别在 这里 有相应的描述。<br><img src="http://static.zybuluo.com/a807257775/lkx9u62nruefrajf1qwad1tb/image_1eircfbds18mj1fi01clp15ek1k5h1e.png" alt="image_1eircfbds18mj1fi01clp15ek1k5h1e.png-54.5kB"></li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul>
<li><a href="https://kubernetes.io/zh/docs/reference/kubectl/cheatsheet/://kubernetes.io/zh/docs/reference/kubectl/cheatsheet/" target="_blank" rel="noopener">kubectl 备忘单</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes常用网站记录</title>
    <url>/2020/09/08/Kubernetes%E5%B8%B8%E7%94%A8%E7%BD%91%E7%AB%99%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="Kubernetes常用网站记录"><a href="#Kubernetes常用网站记录" class="headerlink" title="Kubernetes常用网站记录"></a>Kubernetes常用网站记录</h1><h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><ul>
<li><a href="https://kubernetes.io/zh/docs/concepts/overview/what-is-kubernetes/" target="_blank" rel="noopener">Kubernetes官方手册</a></li>
<li><a href="https://kubernetes.io/zh/blog/" target="_blank" rel="noopener">Kubernetes官方博客</a></li>
<li><a href="https://www.kubernetes.org.cn/" target="_blank" rel="noopener">K8S中文社区</a></li>
<li><a href="https://kubernetes.io/zh/docs/reference/glossary/?all=true#term-kubelet" target="_blank" rel="noopener">标准化词汇表</a><ul>
<li>查询各种关键词、技术术语的相关解释</li>
</ul>
</li>
<li><a href="http://docs.kubernetes.org.cn/" target="_blank" rel="noopener">k8s中文社区的文档</a></li>
</ul>
<h2 id="其他文档"><a href="#其他文档" class="headerlink" title="其他文档"></a>其他文档</h2><ul>
<li><a href="https://blog.csdn.net/csdnlb/article/details/104363408?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.add_param_isCf&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.add_param_isCf" target="_blank" rel="noopener">k8s-学习总结（Kubernetes基本概念、运行结构、分层结构、安装部署）</a></li>
<li><a href="https://blog.csdn.net/qq_35550345/article/details/103714455?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1etes.org.cn/" target="_blank" rel="noopener">k8s篇-k8s集群架构及组件详解【史上最详细】</a></li>
<li><a href="https://blog.csdn.net/qq_37950254/article/details/89350904?utm_medium=distribute.pc_relevant.none-task-blog-title-2&amp;spm=1001.2101.3001.4242https://blog.csdn.net/qq_35550345/article/details/103714455?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCfhttps://blog.csdn.net/csdnlb/article/details/104363408?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.add_param_isCf&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-2.add_param_isCfhttps://blog.csdn.net/qq_44584356/article/details/105002206?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.add_param_isCf&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-6.add_param_isCfhttps://kubernetes.io/zh/docs/concepts/overview/components/https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/high-availability/https://kubernetes.io/zh/docs/tutorials/stateful-application/mysql-wordpress-persistent-volume/ty/https://kubernetes.io/zh/docs/tutorials/stateful-application/mysql-wordpress-persistent-volume/" target="_blank" rel="noopener">Kubernetes整体概述和架构详细介绍</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes的基本概念</title>
    <url>/2020/09/08/Kubernetes%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h1 id="Kubernetes的基本概念"><a href="#Kubernetes的基本概念" class="headerlink" title="Kubernetes的基本概念"></a>Kubernetes的基本概念</h1><h2 id="1、Kubernetes概述"><a href="#1、Kubernetes概述" class="headerlink" title="1、Kubernetes概述"></a>1、Kubernetes概述</h2><h3 id="1-1、kubernetes是什么"><a href="#1-1、kubernetes是什么" class="headerlink" title="1.1、kubernetes是什么"></a>1.1、kubernetes是什么</h3><blockquote>
<p>Kubernetes是一个可移植的、可扩展、分布式架构的开源平台，用于管理容器化的工作负载和服务，可促进声明式配置和自动化。Kubernetes 拥有一个庞大且快速增长的生态系统。Kubernetes的服务、支持和工具广泛可用。名称 Kubernetes 源于希腊语，意为 “舵手” 或 “飞行员”。Google 在 2014 年开源了 Kubernetes 项目。确切来说，Kubernetes是建立在Borg的一个开源版本，而Borg是谷歌的一个久负盛名的内部使 用的大规模集群管理系统，它基于容器技术，目的是实现资源管理的自动化，以及跨多个数据中心的资源利用率的最大化，正是由于站在Borg这个前辈的肩膀上，汲取了Borg过去十年间的经验与教训， 所以Kubernetes一经开源就一鸣惊人，并迅速称霸容器领域。</p>
</blockquote>
<h3 id="1-2、容器优势"><a href="#1-2、容器优势" class="headerlink" title="1.2、容器优势"></a>1.2、容器优势</h3><blockquote>
<p>容器类似于 VM，但是它们具有轻量级的隔离属性，可以在应用程序之间共享操作系统（OS）。因此，容器被认为是轻量级的。容器与 VM 类似，具有自己的文件系统、CPU、内存、进程空间等。由于它们与基础架构分离，因此可以跨云和 OS 分发进行移植。</p>
</blockquote>
<ul>
<li>下面列出了容器的一些好处：<ul>
<li><strong>敏捷应用程序的创建和部署</strong>：与使用 VM 镜像相比，提高了容器镜像创建的简便性和效率。</li>
<li><strong>持续开发、集成和部署</strong>：通过快速简单的回滚(由于镜像不可变性)，提供可靠且频繁的容器镜像构建和部署。</li>
<li><strong>关注开发与运维的分离</strong>：在构建/发布时而不是在部署时创建应用程序容器镜像，从而将应用程序与基础架构分离。</li>
<li><strong>可观察性</strong>：不仅可以显示操作系统级别的信息和指标，还可以显示应用程序的运行状况和其他指标信号。</li>
<li><strong>跨开发、测试和生产的环境一致性</strong>：在便携式计算机上与在云中相同地运行。</li>
<li><strong>云和操作系统分发的可移植性</strong>：可在 Ubuntu、RHEL、CoreOS、本地、Google Kubernetes Engine 和其他任何地方运行。</li>
<li><strong>以应用程序为中心的管理</strong>：提高抽象级别，从在虚拟硬件上运行 OS 到使用逻辑资源在 OS 上运行应用程序。</li>
<li><strong>松散耦合、分布式、弹性、解放的微服务</strong>：应用程序被分解成较小的独立部分，并且可以动态部署和管理 - 而不是在一台大型单机上整体运行。</li>
<li><strong>资源隔离</strong>：可预测的应用程序性能。</li>
<li><strong>资源利用</strong>：高效率和高密度。</li>
</ul>
</li>
</ul>
<h3 id="1-3、Kubernetes的特性"><a href="#1-3、Kubernetes的特性" class="headerlink" title="1.3、Kubernetes的特性"></a>1.3、Kubernetes的特性</h3><ul>
<li>Kubernetes是一个完备的分布式系统支撑平台。Kubernetes具有完备的集群管理能力， 包括多层次的安全防护和准入机制、多租户应用支撑能力、透明的服务注册和服务发现机制、 内建的智能负载均衡器、强大的故障发现和自我修复能力、服务滚动升级和在线扩容能力、 可扩展的资源自动调度机制，以及多粒度的资源配额管理能力。同时，Kubernetes提供了完善的管理工具， 这些工具涵盖了包括开发、部署测试、运维监控在内的各个环节。因此，Kubernetes是一个全新的基于容 器技术的分布式架构解决方案，并且是一个一站式的完备的分布式系统开发和支撑平台。<ul>
<li><strong>服务发现和负载均衡</strong>：Kubernetes 可以使用 DNS 名称或自己的 IP 地址公开容器，如果到容器的流量很大，Kubernetes 可以负载均衡并分配网络流量，从而使部署稳定。</li>
<li><strong>存储编排</strong>：Kubernetes 允许您自动挂载您选择的存储系统，例如本地存储、公共云提供商等。</li>
<li><strong>自动部署和回滚</strong>：您可以使用 Kubernetes 描述已部署容器的所需状态，它可以以受控的速率将实际状态更改为所需状态。例如，您可以自动化 Kubernetes 来为您的部署创建新容器，删除现有容器并将它们的所有资源用于新容器。</li>
<li><strong>自动二进制打包</strong>：Kubernetes 允许您指定每个容器所需 CPU 和内存（RAM）。当容器指定了资源请求时，Kubernetes 可以做出更好的决策来管理容器的资源。</li>
<li><strong>自我修复</strong>：Kubernetes 重新启动失败的容器、替换容器、杀死不响应用户定义的运行状况检查的容器，并且在准备好服务之前不将其通告给客户端。</li>
<li><strong>密钥与配置管理</strong>：Kubernetes 允许您存储和管理敏感信息，例如密码、OAuth 令牌和 ssh 密钥。您可以在不重建容器镜像的情况下部署和更新密钥和应用程序配置，也无需在堆栈配置中暴露密钥。</li>
</ul>
</li>
</ul>
<h2 id="2、Kubernetes-组件"><a href="#2、Kubernetes-组件" class="headerlink" title="2、Kubernetes 组件"></a>2、Kubernetes 组件</h2><blockquote>
<p>前言：一个 Kubernetes 集群包含 集群由一组被称作节点的机器组成。这些节点上运行 Kubernetes 所管理的容器化应用。集群具有至少一个工作节点和至少一个主节点。工作节点托管作为应用程序组件的 Pod 。主节点管理集群中的工作节点和 Pod 。多个主节点用于为集群提供故障转移和高可用性。</p>
</blockquote>
<ul>
<li><strong>下图表展示了包含所有相互关联组件的 Kubernetes 集群</strong><br><img src="http://static.zybuluo.com/a807257775/ku1dz8unp5ij5q6shw1b9yet/image_1eh6vbct61o0vfp915q6uv1c5qm.png" alt="image_1eh6vbct61o0vfp915q6uv1c5qm.png-166.1kB"></li>
</ul>
<h3 id="2-1、Master"><a href="#2-1、Master" class="headerlink" title="2.1、Master"></a>2.1、Master</h3><ul>
<li><p>Kubernetes里的Master指的是集群控制节点，在每个Kubernetes集群 里都需要有一个Master来负责整个集群的管理和控制，基本上 Kubernetes的所有控制命令都发给它， 它负责具体的执行过程，我们后面执行的所有命令基本都是在Master上运行的。Master通常会占据一个 独立的服务器（高可用部署建议用3台服务器） ，主要原因是它太重要了，是整个集群的“首脑”， 如果它宕机或者不可用，那么对集群内容器应用的管理都将失效。</p>
<ul>
<li><strong>Kubernetes API Server（kube-apiserver）</strong>：提供了HTTP Rest接口的关键服务进程， 是Kubernetes里所有资源的增、 删、改、查等操作 的唯一入口，也是集群控制的入口进程</li>
<li><strong>Kubernetes Controller Manager（kube-controller-manager）</strong>： Kubernetes里所有资源对象的自动化控制中心， 可以将其理解为资源对象的“大总管”。<ul>
<li>节点控制器<code>（Node Controller）</code>: 负责在节点出现故障时进行通知和响应。</li>
<li>副本控制器<code>（Replication Controller）</code>: 负责为系统中的每个副本控制器对象维护正确数量的 Pod。</li>
<li>端点控制器<code>（Endpoints Controller）</code>: 填充端点(Endpoints)对象(即加入 Service 与 Pod)。</li>
<li>服务帐户和令牌控制器<code>（Service Account &amp; Token Controllers）</code>: 为新的命名空间创建默认帐户和 API 访问令牌.</li>
</ul>
</li>
<li><p><strong>Kubernetes Scheduler（kube-scheduler）</strong> ：负责资源调度（Pod 调度）的进程， 相当于公交公司的“调度室”。该组件监视那些新创建的未指定运行节点的 Pod，并选择节点让 Pod 在上面运行</p>
</li>
<li><p><strong>etcd</strong>：etcd 是兼具一致性和高可用性的键值数据库，可以作为保存 Kubernetes 所有集群数据的后台数据库。 您的 Kubernetes 集群的 etcd 数据库通常需要有个备份计划。</p>
</li>
<li><strong>cloud-controller-manager</strong>：云控制器管理器是 1.8 的 alpha 特性。在未来发布的版本中，这是将 Kubernetes 与任何其他云集成的最佳方式。<code>cloud-controller-manager</code> 进运行特定于云平台的控制回路。 如果你在自己的环境中运行 Kubernetes，或者在本地计算机中运行学习环境， 所部属的环境中不需要云控制器管理器。与 <code>kube-controller-manager</code> 类似，<code>cloud-controller-manager</code> 将若干逻辑上独立的 控制回路组合到同一个可执行文件中，供你以同一进程的方式运行。 你可以对其执行水平扩容（运行不止一个副本）以提升性能或者增强容错能力。<ul>
<li>节点控制器<code>（Node Controller）</code>: 用于在节点终止响应后检查云提供商以确定节点是否已被删除</li>
<li>路由控制器<code>（Route Controller）</code>: 用于在底层云基础架构中设置路由</li>
<li>服务控制器<code>（Service Controller）</code>: 用于创建、更新和删除云提供商负载均衡器</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="2-2、Node"><a href="#2-2、Node" class="headerlink" title="2.2、Node"></a>2.2、Node</h3><ul>
<li>Kubernetes集群中的其他机器被称为Node， 在较早的 版本中也被称为Minion。 与Master一样， Node可以是一台物理主机， 也 可以是一台虚拟机。 Node是Kubernetes集群中的工作负载节点， 每个 Node都会被Master分配一些工作负载（Docker容器） ，当某个Node宕机时， 其上的工作负载会被Master自动转移到其他节点上。<ul>
<li><code>kubelet</code>： 负责Pod对应的容器的创建、启停等任务，同时与 Master密切协作， 实现集群管理的基本功能。 </li>
<li><code>kube-proxy</code>： 实现Kubernetes Service的通信与负载均衡机制的重要组件。 </li>
<li><code>Docker Engine（docker）</code> ：Docker引擎，负责本机的容器创建 和管理工作。</li>
<li><code>容器运行时（Container Runtime）</code>：Kubernetes 支持多个容器运行环境: Docker、containerd、cri-o、 rktlet 以及任何实现 Kubernetes CRI (容器运行环境接口)。</li>
</ul>
</li>
</ul>
<blockquote>
<p>提示：Node可以在运行期间动态增加到Kubernetes集群中， 前提是在这个 节点上已经正确安装、 配置和启动了上述关键进程， 在默认情况下 kubelet会向Master注册自己， 这也是Kubernetes推荐的Node管理方式。 一旦Node被纳入集群管理范围， kubelet进程就会定时向Master汇报自身 的情报， 例如操作系统、 Docker版本、 机器的CPU和内存情况， 以及当 前有哪些Pod在运行等， 这样Master就可以获知每个Node的资源使用情 况， 并实现高效均衡的资源调度策略。 而某个Node在超过指定时间不上 报信息时， 会被Master判定为“失联”， Node的状态被标记为不可用 （Not Ready） ， 随后Master会触发“工作负载大转移”的自动流程</p>
</blockquote>
<h3 id="2-3、Pod"><a href="#2-3、Pod" class="headerlink" title="2.3、Pod"></a>2.3、Pod</h3><ul>
<li><p>Pod 是可以在 Kubernetes 中创建和管理的、最小的可部署的计算单元。Pod是一组（一个或多个）容器；这些容器共享存储、网络、以及怎样运行这些容器的声明。 Pod 中的内容总是并置（colocated）的并且一同调度，在共享的上下文中运行。 Pod 所建模的是特定于应用的“逻辑主机”，其中包含一个或多个应用容器， 这些容器是相对紧密的耦合在一起的。 在非云环境中，在相同的物理机或虚拟机上运行的应用类似于 在同一逻辑主机上运行的云应用。</p>
</li>
<li><p>Pod的两种用法</p>
<ul>
<li><strong>运行单个容器的 Pod</strong>：”每个 Pod 一个容器”模型是最常见的 Kubernetes 用例； 在这种情况下，可以将 Pod 看作单个容器的包装器，并且 Kubernetes 直接管理 Pod，而不是容器。</li>
<li><strong>运行多个协同工作的容器的 Pod</strong>：Pod 可能封装由多个紧密耦合且需要共享资源的共处容器组成的应用程序。 这些位于同一位置的容器可能形成单个内聚的服务单元 —— 一个容器将文件从共享卷提供给公众， 而另一个单独的“挂斗”（sidecar）容器则刷新或更新这些文件。 Pod 将这些容器和存储资源打包为一个可管理的实体。</li>
</ul>
</li>
<li><p>Pod 和控制器</p>
<ul>
<li>你可以使用工作负载资源来创建和管理多个 Pod。 资源的控制器能够处理副本的管理、上线，并在 Pod 失效时提供自愈能力。 例如，如果一个节点失败，控制器注意到该节点上的 Pod 已经停止工作， 就可以创建替换性的 Pod。调度器会将替身 Pod 调度到一个健康的节点执行</li>
<li>下面是一些管理一个或者多个 Pod 的工作负载资源的示例：<ul>
<li><a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/" target="_blank" rel="noopener">Deployments</a></li>
<li><a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/statefulset/" target="_blank" rel="noopener">StatefulSet</a></li>
<li><a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/daemonset/" target="_blank" rel="noopener">DaemonSet</a></li>
</ul>
</li>
</ul>
</li>
<li><p>资源共享和通信</p>
<ul>
<li>Pod 使它的成员容器间能够进行数据共享和通信</li>
</ul>
</li>
<li><p>Pod 中的存储</p>
<ul>
<li>一个 Pod 可以设置一组共享的存储卷。 Pod 中的所有容器都可以访问该共享卷，从而允许这些容器共享数据。 卷还允许 Pod 中的持久数据保留下来，即使其中的容器需要重新启动。 有关 Kubernetes 如何在 Pod 中实现共享存储并将其提供给 Pod 的更多信息， 请参考<a href="https://kubernetes.io/zh/docs/concepts/storage/" target="_blank" rel="noopener">卷</a>。</li>
</ul>
</li>
<li><p>Pod 网络</p>
<ul>
<li>Kubernetes为每个Pod都分配了唯一的IP地址， 称之为Pod IP， 一个 Pod里的多个容器共享Pod IP地址。 Kubernetes要求底层网络支持集群内 任意两个Pod之间的TCP/IP直接通信， 这通常采用虚拟二层网络技术来 实现， 例如Flannel、 Open vSwitch等， 因此我们需要牢记一点： 在 Kubernetes里， 一个Pod里的容器与另外主机上的Pod容器能够直接通 信。</li>
</ul>
</li>
<li><p>Pod及Pod周边对象示意图：<br><img src="http://static.zybuluo.com/a807257775/fjsisv2aliow9w75uy0gb42p/image_1ehk518vb1jachp51q30spvhbe9.png" alt="image_1ehk518vb1jachp51q30spvhbe9.png-89.9kB"></p>
</li>
</ul>
<blockquote>
<p>提示： 除了 Docker 之外，Kubernetes 支持 很多其他容器运行时， Docker 是最有名的运行时， 使用 Docker 的术语来描述 Pod 会很有帮助。 Pod 的共享上下文包括一组 Linux 名字空间、控制组（cgroup）和可能一些其他的隔离 方面，即用来隔离 Docker 容器的技术。 在 Pod 的上下文中，每个独立的应用可能会进一步实施隔离。就 Docker 概念的术语而言，Pod 类似于共享名字空间和文件系统卷的一组 Docker 容器。</p>
</blockquote>
<h3 id="2-4、Label"><a href="#2-4、Label" class="headerlink" title="2.4、Label"></a>2.4、Label</h3><ul>
<li><p>Label（标签）是Kubernetes系统中另外一个核心概念。一个Label是 一个<code>key=value</code>的键值对，其中key与value由用户自己指定。Label可以被 附加到各种资源对象上，例如Node、Pod、Service、RC等，一个资源对 象可以定义任意数量的Label，同一个Label也可以被添加到任意数量的 资源对象上。Label通常在资源对象定义时确定，也可以在对象创建后 动态添加或者删除。</p>
</li>
<li><p>我们可以通过给指定的资源对象捆绑一个或多个不同的Label来实 现多维度的资源分组管理功能，以便灵活、方便地进行资源分配、调 度、配置、部署等管理工作。例如，部署不同版本的应用到不同的环境 中；监控和分析应用（日志记录、监控、告警）等。一些常用的Label 示例如下。 </p>
<ul>
<li><strong>版本标签</strong>：”release”:”stable”、”release”:”canary”。</li>
<li><strong>环境标签</strong>：”environment”:”dev”、”environment”:”qa”、”environment”:”production”。</li>
<li><strong>架构标签</strong>：”tier”:”frontend”、”tier”:”backend”、”tier”:”middleware”。</li>
<li><strong>分区标签</strong>：”partition”:”customerA”、”partition”:”customerB”。</li>
<li><strong>质量管控标签</strong>：”track”:”daily”、”track”:”weekly”。</li>
</ul>
</li>
<li><p>Label相当于我们熟悉的“标签”。给某个资源对象定义一个Label， 就相当于给它打了一个标签，随后可以通过<code>LabelSelector</code>（标签选择 器）查询和筛选拥有某些Label的资源对象，Kubernetes通过这种方式实 现了类似SQL的简单又通用的对象查询机制。 <code>LabelSelector</code>可以被类比为SQL语句中的where查询条件，例如， <code>name=redis-slave</code>这个<code>LabelSelector</code>作用于Pod时，可以被类比为<code>select* frompodwherepod’sname=‘redis-slave’</code>这样的语句。当前有两种<code>Label Selector</code>表达式：基于等式的（Equality-based）和基于集合的（Setbased），前者采用等式类表达式匹配标签，下面是一些具体的例子。</p>
<ul>
<li><strong>name=redis-slave</strong>：匹配所有具有标签<code>name=redis-slave</code>的资源对象。</li>
<li><strong>env!=production</strong>：匹配所有不具有标<code>签env=production</code>的资源对象，比如<code>env=test</code>就是满足此条件的标签之一。后者则使用集合操作类表达式匹配标签，下面是一些具体的例子。</li>
<li><strong>namein（redis-master,redis-slave）</strong>：匹配所有具有标签<code>name=redis-master</code>或者<code>name=redis-slave</code>的资源对象。</li>
<li><strong>namenotin（php-frontend）</strong>：匹配所有不具有标签<code>name=phpfrontend</code>的资源对象。</li>
</ul>
</li>
</ul>
<h3 id="2-5、Replication-Controller"><a href="#2-5、Replication-Controller" class="headerlink" title="2.5、Replication Controller"></a>2.5、Replication Controller</h3><ul>
<li><p>RC是Kubernetes系统中的核心概念之一， 简单来说， 它其实定义了 一个期望的场景， 即声明某种Pod的副本数量在任意时刻都符合某个预 期值， 所以RC的定义包括如下几个部分。</p>
<ul>
<li><strong>Pod期待的副本数量。</strong></li>
<li><strong>用于筛选目标Pod的Label Selector。</strong></li>
<li><strong>当Pod的副本数量小于预期数量时， 用于创建新Pod的Pod模板 （template） 。</strong></li>
</ul>
</li>
<li><p>RS是Kubernetes 1.2中， 将RC升级为另外一个新概念—<code>Replica Set</code>，官方解释 其为“下一代的RC”。 <code>Replica Set</code>与RC当前的唯一区别是， <code>Replica Sets</code>支 持基于集合的Label selector（Set-based selector） ， 而RC只支持基于等 式的Label Selector（equality-based selector） ， 这使得<code>Replica Set</code>的功能 更强</p>
</li>
<li><p><code>Replica Set</code>与<code>Deployment</code>这两个重要的资源对象逐步替代了之前RC的作用，是Kubernetes 1.3里Pod自动扩容（伸缩）这个告警功能实现的基础， 也将继续在Kubernetes未来的版本中发挥重要的作用，最后总结一下RC（Replica Set）的一些特性与作用。</p>
<ul>
<li><strong>在大多数情况下，我们通过定义一个RC实现Pod的创建及副本数量的自动控制。</strong></li>
<li><strong>在RC里包括完整的Pod定义模板。</strong></li>
<li><strong>RC通过Label Selector机制实现对Pod副本的自动控制。</strong></li>
<li><strong>通过改变RC里的Pod副本数量，可以实现Pod的扩容或缩容。</strong></li>
<li><strong>通过改变RC里Pod模板中的镜像版本，可以实现Pod的滚动升级。</strong></li>
</ul>
</li>
</ul>
<h3 id="2-6、Deployment"><a href="#2-6、Deployment" class="headerlink" title="2.6、Deployment"></a>2.6、Deployment</h3><ul>
<li><p>Deployment是Kubernetes在1.2版本中引入的新概念， 用于更好地解 决Pod的编排问题。 为此， Deployment在内部使用了Replica Set来实现目 的， 无论从Deployment的作用与目的、 YAML定义， 还是从它的具体命 令行操作来看， 我们都可以把它看作RC的一次升级， 两者的相似度超 过90%。</p>
</li>
<li><p>Deployment相对于RC的一个最大升级是我们可以随时知道当前 Pod“部署”的进度。 实际上由于一个Pod的创建、 调度、 绑定节点及在目 标Node上启动对应的容器这一完整过程需要一定的时间， 所以我们期待 系统启动N个Pod副本的目标状态， 实际上是一个连续变化的“部署过 程”导致的最终状态。</p>
</li>
<li><p>Deployment的典型使用场景有以下几个：</p>
<ul>
<li>创建一个Deployment对象来生成对应的ReplicaSet并完成Pod副本的创建。检查Deployment的状态来看部署动作是否完成（Pod副本数量是否达到预期的值）。</li>
<li>更新Deployment以创建新的Pod（比如镜像升级）。如果当前Deployment不稳定，则回滚到一个早先的Deployment 版本。</li>
<li>暂停Deployment以便于一次性修改多个PodTemplateSpec的配置项，之后再恢复Deployment，进行新的发布。 扩展Deployment以应对高负载。</li>
<li>查看Deployment的状态，以此作为发布是否成功的指标。</li>
<li>清理不再需要的旧版本ReplicaSets。</li>
</ul>
</li>
</ul>
<h3 id="2-7、Horizontal-Pod-Autoscaler"><a href="#2-7、Horizontal-Pod-Autoscaler" class="headerlink" title="2.7、Horizontal Pod Autoscaler"></a>2.7、Horizontal Pod Autoscaler</h3><ul>
<li><p>HPA与之前的RC、Deployment一样，也属于一种Kubernetes资源对象。通过追踪分析指定RC控制的所有目标Pod的负载变化情况，来确定是否需要有针对性地调整目标Pod的副本数量，这是HPA的实现原理。</p>
</li>
<li><p>Pod水平自动扩缩（HorizontalPodAutoscaler）可以基于CPU利用率自动扩缩ReplicationController、Deployment和ReplicaSet中的Pod数量。除了CPU利用率，也可以基于其他应程序提供的自定义度量指标来执行自动扩缩。Pod自动扩缩不适用于无法扩缩的对象，比如DaemonSet。</p>
</li>
<li><p>Pod水平自动扩缩工作机制：<br><img src="http://static.zybuluo.com/a807257775/upakxydzt7fr7x67npplnl22/image_1ehk9ocq4c9k1pdq17rl1gbpous13.png" alt="image_1ehk9ocq4c9k1pdq17rl1gbpous13.png-22kB"></p>
</li>
</ul>
<h3 id="2-8、StatefulSet"><a href="#2-8、StatefulSet" class="headerlink" title="2.8、StatefulSet"></a>2.8、StatefulSet</h3><ul>
<li><p>在Kubernetes系统中，Pod的管理对象RC、Deployment、DaemonSet和Job都面向无状态的服务。但现实中有很多服务是有状态的，特别是一些复杂的中间件集群，例如MySQL集群、MongoDB集群、Akka集群、ZooKeeper集群等，而StatefulSet则是用来创建有状态的集群控制器。</p>
</li>
<li><p>StatefulSet有如下特性：</p>
<ul>
<li>StatefulSet里的每个Pod都有稳定、唯一的网络标识，可以用来发现集群内的其他成员。假设StatefulSet的名称为kafka，那么第1个Pod叫kafka-0，-第2个叫kafka-1，以此类推。</li>
<li>StatefulSet控制的Pod副本的启停顺序是受控的，操作第n个Pod时，前n-1个Pod已经是运行且准备好的状态。</li>
<li>StatefulSet里的Pod采用稳定的持久化存储卷，通过PV或PVC来实现，删除Pod时默认不会删除与StatefulSet相关的存储卷（为了保证数据的安全）。</li>
</ul>
</li>
</ul>
<h3 id="2-9、Service"><a href="#2-9、Service" class="headerlink" title="2.9、Service"></a>2.9、Service</h3><ul>
<li><p>RC、RS和Deployment只是保证了支撑服务的微服务Pod的数量，但是没有解决如何访问这些服务的问题。一个Pod只是一个运行服务的实例，随时可能在一个节点上停止，在另一个节点以一个新的IP启动一个新的Pod，因此不能以确定的IP和端口号提供服务。要稳定地提供服务需要服务发现和负载均衡能力。服务发现完成的工作，是针对客户端访问的服务，找到对应的的后端服务实例。在K8s集群中，客户端需要访问的服务就是Service对象。每个Service会对应一个集群内部有效的虚拟IP，集群内部通过虚拟IP访问一个服务。</p>
</li>
<li><p>Pod、 RC与Service的逻辑关系：<br><img src="http://static.zybuluo.com/a807257775/frfe2ruvxpr4agekva453asx/image_1ehmofcit7hre3q1a5sflvnjt1t.png" alt="image_1ehmofcit7hre3q1a5sflvnjt1t.png-165.5kB"></p>
</li>
</ul>
<h3 id="2-10、Job"><a href="#2-10、Job" class="headerlink" title="2.10、Job"></a>2.10、Job</h3><ul>
<li><p>Job是K8s用来控制批处理型任务的API对象。批处理业务与长期伺服业务的主要区别是批处理业务的运行有头有尾，而长期伺服业务在用户不停止的情况下永远运行。Job管理的Pod根据用户的设置把任务成功完成就自动退出了。成功完成的标志根据不同的spec.completions策略而不同：单Pod型任务有一个Pod成功就标志完成；定数成功型任务保证有N个任务全部成功；工作队列型任务根据应用确认的全局成功而标志成功</p>
</li>
<li><p>Job所控制的Pod副本是短暂运行的，可以将其视为一组Docker容器，其中的每个Docker容器都仅仅运行一次。当Job控制的所有Pod副本都运行结束时，对应的Job也就结束了。Job在实现方式上与RC等副本控制器不同，Job生成的Pod副本是不能自动重启的，对应Pod副本的RestartPoliy都被设置为Never。因此，当对应的Pod副本都执行完成时，相应的Job也就完成了控制使命，即Job生成的Pod在Kubernetes中是短暂存在的。Kubernetes在1.5版本之后又提供了类似crontab的定时任务——CronJob，解决了某些批处理任务需要定时反复执行的问题。</p>
</li>
<li><p>Job所控制的Pod副本的工作模式能够多实例并行计算，以TensorFlow框架为例，可以将一个机器学习的计算任务分布到10台机器上，在每台机器上都运行一个worker执行计算任务，这很适合通过Job生成10个Pod副本同时启动运算。</p>
</li>
</ul>
<h3 id="2-11、Volume"><a href="#2-11、Volume" class="headerlink" title="2.11、Volume"></a>2.11、Volume</h3><ul>
<li><p>Volume（存储卷）是Pod中能够被多个容器访问的共享目录。Kubernetes的Volume概念、用途和目的与Docker的Volume比较类似，但两者不能等价。首先，Kubernetes中的Volume被定义在Pod上，然后被一个Pod里的多个容器挂载到具体的文件目录下；其次，Kubernetes中的Volume与Pod的生命周期相同，但与容器的生命周期不相关，当容器终止或者重启时，Volume中的数据也不会丢失。最后，Kubernetes支持多种类型的Volume，例如GlusterFS、Ceph等先进的分布式文件系统。</p>
</li>
<li><p>Volume的使用也比较简单，在大多数情况下，我们先在Pod上声明一个Volume，然后在容器里引用该Volume并挂载（Mount）到容器里的某个目录上。举例来说，我们要给之前的TomcatPod增加一个名为datavol的Volume，并且挂载到容器的/mydata-data目录上，则只要对Pod的定义文件做如下修正即可（注意代码中的粗体部分）</p>
</li>
<li><p>Kubernetes 支持下列类型的卷：</p>
<ul>
<li>awsElasticBlockStore、azureDisk、azureFile、cephfs、cinder、configMap、csi、downwardAPI、emptyDir、fc (fibre channel)、flexVolume、flocker、gcePersistentDisk、gitRepo (deprecated)、glusterfs、hostPath、iscsi、local、nfs、persistentVolumeClaim、projected、portworxVolume、quobyte、rbd、scaleIO、secret、storageos、vsphereVolume</li>
</ul>
</li>
</ul>
<h3 id="2-12、Persistent-Volume"><a href="#2-12、Persistent-Volume" class="headerlink" title="2.12、Persistent Volume"></a>2.12、Persistent Volume</h3><ul>
<li>Volume是被定义在Pod上的，属于计算资源的一部分，而实际上，网络存储是相对独立于计算资源而存在的一种实体资源。比如在使用虚拟机的情况下，我们通常会先定义一个网络存储，然后从中划出一个“网盘”并挂接到虚拟机上。<code>PersistentVolume（PV）</code>和与之相关联的<code>PersistentVolumeClaim（PVC）</code>也起到了类似的作用。PV可以被理解成Kubernetes集群中的某个网络存储对应的一块存储，它与Volume类似，但有以下区别。<ul>
<li><code>PV</code>只能是网络存储，不属于任何Node，但可以在每个Node上访问。◎PV并不是被定义在Pod上的，而是独立于Pod之外定义的。</li>
<li><code>PV</code>目前支持的类型包括：<code>gcePersistentDisk</code>、<code>AWSElasticBlockStore</code>、<code>AzureFile</code>、<code>AzureDisk</code>、<code>FC（FibreChannel）</code>、<code>Flocker</code>、<code>NFS</code>、<code>iSCSI</code>、<code>RBD（RadosBlockDevice）</code>、<code>CephFS</code>、<code>Cinder</code>、<code>GlusterFS</code>、<code>VsphereVolume</code>、<code>QuobyteVolumes</code>、<code>VMwarePhoton</code>、<code>PortworxVolumes</code>、<code>ScaleIOVolumes</code>和<code>HostPath（仅供单机测试）</code>。</li>
</ul>
</li>
</ul>
<h3 id="2-13、Namespace"><a href="#2-13、Namespace" class="headerlink" title="2.13、Namespace"></a>2.13、Namespace</h3><ul>
<li><p>Namespace（命名空间）是Kubernetes系统中的另一个非常重要的概念，Namespace在很多情况下用于实现多租户的资源隔离。Namespace通过将集群内部的资源对象“分配”到不同的Namespace中，形成逻辑上分组的不同项目、小组或用户组，便于不同的分组在共享使用整个集群的资源的同时还能被分别管理。</p>
</li>
<li><p>Kubernetes 会创建三个初始名字空间：</p>
<ul>
<li><code>default</code> 没有指明使用其它名字空间的对象所使用的默认名字空间</li>
<li><code>kube-system Kubernetes</code> 系统创建对象所使用的名字空间</li>
<li><code>kube-public</code> 这个名字空间是自动创建的，所有用户（包括未经过身份验证的用户）都可以读取它。 这个名字空间主要用于集群使用，以防某些资源在整个集群中应该是可见和可读的。 这个名字空间的公共方面只是一种约定，而不是要求。</li>
<li><code>kube-node-lease</code> 此名字空间用于与各个节点相关的租期（Lease）对象； 此对象的设计使得集群规模很大时节点心跳检测性能得到提升</li>
</ul>
</li>
<li><p>当给每个租户创建一个Namespace来实现多租户的资源隔离时，还能结合Kubernetes的资源配额管理，限定不同租户能占用的资源，例如CPU使用量、内存使用量等</p>
</li>
</ul>
<h3 id="2-14、Annotation"><a href="#2-14、Annotation" class="headerlink" title="2.14、Annotation"></a>2.14、Annotation</h3><ul>
<li>Annotation（注解）与Label类似，也使用key/value键值对的形式进行定义。不同的是Label具有严格的命名规则，它定义的是Kubernetes对 象的元数据（Metadata），并且用于LabelSelector。Annotation则是用户 任意定义的附加信息，以便于外部工具查找。在很多时候，Kubernetes的模块自身会通过Annotation标记资源对象的一些特殊信息。通常来说，用Annotation来记录的信息如下。<ul>
<li>build信息、release信息、Docker镜像信息等，例如时间戳、 releaseid号、PR号、镜像Hash值、DockerRegistry地址等。 </li>
<li>日志库、监控库、分析库等资源库的地址信息。</li>
<li>程序调试工具信息，例如工具名称、版本号等。</li>
<li>团队的联系信息，例如电话号码、负责人名称、网址等。</li>
</ul>
</li>
</ul>
<h3 id="2-15、ConfigMap"><a href="#2-15、ConfigMap" class="headerlink" title="2.15、ConfigMap"></a>2.15、ConfigMap</h3><ul>
<li><p>ConfigMap 是一种 API 对象，用来将非机密性的数据保存到健值对中。使用时可以用作环境变量、命令行参数或者存储卷中的配置文件。ConfigMap将您的环境配置信息和容器镜像解耦，便于应用配置的修改。当您需要储存机密信息时可以使用 Secret 对象</p>
</li>
<li><p>Kubernetes提供了一种内建机制，将存储在etcd中的ConfigMap通过Volume映射的方式变成目标Pod内的配置文件，不管目标Pod被调度到哪台服务器上，都会完成自动映射。进一步地，如果ConfigMap中的key-value数据被修改，则映射到Pod中的“配置文件”也会随之自动更新。于是，KubernetesConfigMap就成了分布式系统中最为简单（使用方法简单，但背后实现比较复杂）且对应用无侵入的配置中心。</p>
</li>
<li><p>ConfigMap配置集中化的一种简单方案如图：<br><img src="http://static.zybuluo.com/a807257775/pbgqoinscwaaxk46hok2b4nk/image_1ehmm8ts7bdf1esanet1tkd1nml1g.png" alt="image_1ehmm8ts7bdf1esanet1tkd1nml1g.png-233.2kB"></p>
</li>
</ul>
<h2 id="3、官方手册合集"><a href="#3、官方手册合集" class="headerlink" title="3、官方手册合集"></a>3、官方手册合集</h2><ul>
<li><a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/" target="_blank" rel="noopener">Labels and Selectors官方手册</a></li>
<li><a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/" target="_blank" rel="noopener">Deployments官方手册</a></li>
<li><a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/replicationcontroller/" target="_blank" rel="noopener">ReplicationController官方手册</a></li>
<li><a href="https://kubernetes.io/zh/docs/concepts/workloads/pods/" target="_blank" rel="noopener">Pod官方手册</a></li>
<li><a href="https://kubernetes.io/zh/docs/concepts/architecture/nodesnetes.io/zh/docs/concepts/workloads/controllers/deployment/" target="_blank" rel="noopener">Node官方手册</a></li>
<li><a href="https://kubernetes.io/zh/docs/tasks/run-application/horizontal-pod-autoscale/" target="_blank" rel="noopener">Horizontal Pod Autoscaler官方手册</a></li>
<li><a href="https://kubernetes.io/zh/docs/tutorials/stateful-application/basic-stateful-set3:" target="_blank" rel="noopener">StatefulSet官方手册</a></li>
<li><a href="https://kubernetes.io/zh/docs/concepts/configuration/configmap/" target="_blank" rel="noopener">ConfigMap官方手册</a></li>
<li><a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/" target="_blank" rel="noopener">Annotations官方手册</a></li>
<li><a href="https://kubernetes.io/zh/docs/concepts/overview/working-with-objects/namespaces/" target="_blank" rel="noopener">Namespace官方手册</a></li>
<li><a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/" target="_blank" rel="noopener">Persistent Volumes官方手册</a></li>
<li><a href="https://kubernetes.io/zh/docs/concepts/storage/volumes/" target="_blank" rel="noopener">Volume官方手册</a></li>
<li><a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/job/" target="_blank" rel="noopener">Job官方手册</a></li>
<li><a href="https://kubernetes.io/zh/docs/concepts/services-networking/service-topology/" target="_blank" rel="noopener">Service官方手册</a></li>
</ul>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>NGINX日志分析工具-GoAccess</title>
    <url>/2019/05/06/NGINX%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7-GoAccess/</url>
    <content><![CDATA[<h1 id="NGINX日志分析工具-GoAccess"><a href="#NGINX日志分析工具-GoAccess" class="headerlink" title="NGINX日志分析工具-GoAccess"></a>NGINX日志分析工具-GoAccess</h1><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><ul>
<li>GoAccess 是一款开源、实时，运行在命令行终端下的 Web 日志分析工具。该工具提供快速、多样的 HTTP 状态统计。分析结果，可以通过 XShell 等客户端工具查看，并且可以生成 Html 报告。</li>
<li>GitHub 地址：<ul>
<li style="list-style: none"><input type="checkbox" checked> <a href="https://github.com/allinurl/goaccess" target="_blank" rel="noopener">https://github.com/allinurl/goaccess</a></li>
</ul>
</li>
<li>官网地址：<ul>
<li style="list-style: none"><input type="checkbox" checked> <a href="http://goaccess.io/" target="_blank" rel="noopener">http://goaccess.io/</a></li>
</ul>
</li>
<li>GoAccess日志规范：<ul>
<li style="list-style: none"><input type="checkbox" checked> <a href="http://goaccess.io/man#custom-log" target="_blank" rel="noopener">http://goaccess.io/man#custom-log </a></li>
</ul>
</li>
</ul>
<h2 id="二、功能一览"><a href="#二、功能一览" class="headerlink" title="二、功能一览"></a>二、功能一览</h2><ul>
<li>支持功能<ul>
<li style="list-style: none"><input type="checkbox" checked> 生成统计数据，带宽统计等</li>
<li style="list-style: none"><input type="checkbox" checked> 每个请求的时间统计</li>
<li style="list-style: none"><input type="checkbox" checked> 最高访问ip</li>
<li style="list-style: none"><input type="checkbox" checked> 请求的文件统计</li>
<li style="list-style: none"><input type="checkbox" checked> 请求的静态文件、图片、flash、js文件等</li>
<li style="list-style: none"><input type="checkbox" checked> 各HTTP状态码统计</li>
<li style="list-style: none"><input type="checkbox" checked> Hosts，反向DNS，IP所在地</li>
<li style="list-style: none"><input type="checkbox" checked> 操作系统</li>
<li style="list-style: none"><input type="checkbox" checked> 浏览器/蜘蛛</li>
<li style="list-style: none"><input type="checkbox" checked> 引用的网站</li>
<li style="list-style: none"><input type="checkbox" checked> 引用的URLs</li>
<li style="list-style: none"><input type="checkbox" checked> 关键词组</li>
<li style="list-style: none"><input type="checkbox" checked> 地理位置 （大陆、国家、城市）</li>
<li style="list-style: none"><input type="checkbox" checked> 可输出JSON或CSV</li>
<li style="list-style: none"><input type="checkbox" checked> 各种的颜色主题</li>
<li style="list-style: none"><input type="checkbox" checked> 支持大容量数据且支持大容量数据的持续分析</li>
<li style="list-style: none"><input type="checkbox" checked> 支持IPv6</li>
<li style="list-style: none"><input type="checkbox" checked> 可生成HTML报告</li>
</ul>
</li>
</ul>
<h2 id="三、Goaccess的安装"><a href="#三、Goaccess的安装" class="headerlink" title="三、Goaccess的安装"></a>三、Goaccess的安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#安装epel源</span><br><span class="line">[root@localhost ~]# rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/Packages/e/epel-release-6-8.noarch.rpm</span><br><span class="line">#安装相关服务器工具（可跳过）</span><br><span class="line">[root@localhost ~]# yum install vim telnet wget nethogs htop glances dstat traceroute lrzsz goaccess ntpdate dos2unix openssl-devel tcpdump lrzsz fio nss curl -y</span><br><span class="line">#安装Goaccess及相关依赖组件</span><br><span class="line">[root@localhost ~]# yum -y install glib2 glib2-devel ncurses ncurses-devel geoIP geoIP-devel goacees</span><br></pre></td></tr></table></figure>
<h2 id="四、生成goaccess配置文件（用于NGINX日志分析）"><a href="#四、生成goaccess配置文件（用于NGINX日志分析）" class="headerlink" title="四、生成goaccess配置文件（用于NGINX日志分析）"></a>四、生成goaccess配置文件（用于NGINX日志分析）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">###默认配置文件</span><br><span class="line">/etc/goaccess.conf </span><br><span class="line"></span><br><span class="line">###手工生成配置文件</span><br><span class="line">~/.goaccesss</span><br><span class="line"></span><br><span class="line">日志格式：</span><br><span class="line">	time-format</span><br><span class="line">	date-format</span><br><span class="line">	log_format</span><br><span class="line">	</span><br><span class="line">生产配置（此配置需要和Nginx日志做校对调整）：</span><br><span class="line">	###结合如下第二种nginx日志格式进行分析</span><br><span class="line">	time-format %T</span><br><span class="line">	date-format %d/%b/%Y</span><br><span class="line">	log_format %h %^ %^ [%d:%t %^] &quot;%^&quot; &quot;%r&quot; %s %b %^ &quot;%R&quot; &quot;%u&quot; &quot;%^&quot; %^ %^ %^ %T</span><br><span class="line"></span><br><span class="line">	###结合如下第一种nginx日志格式进行分析</span><br><span class="line">	time-format %T</span><br><span class="line">	date-format %d/%b/%Y</span><br><span class="line">	log_format出包含 %h %^ %^ [%d:%t %^] &quot;%^&quot; &quot;%r&quot; %s %b %^ &quot;%R&quot; &quot;%^&quot; &quot;%^&quot; %^ %^ %^ %T &quot;%u&quot;</span><br><span class="line">	</span><br><span class="line">	###如配置log_format出包含&quot;%u&quot;，则需要配置如下参数</span><br><span class="line">        nginx日志开启cookie：</span><br><span class="line">        在vhosts，server段中配置如下：</span><br><span class="line">        set $jvm_cookie &quot;&quot;;</span><br><span class="line">        if ($http_cookie ~* &quot;JSESSIONID=([[:alnum:]]*\.[[:alnum:]]*-[[:alnum:]]*)&quot;) &#123;</span><br><span class="line">          set $jvm_cookie $1;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h2 id="五、调整nginx的日志输出格式"><a href="#五、调整nginx的日志输出格式" class="headerlink" title="五、调整nginx的日志输出格式"></a>五、调整nginx的日志输出格式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">###主机名\请求地址\状态码\请求body\body字节数\用户真是IP\后端负载节点\请求时间\用户cookie</span><br><span class="line">log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$server_name&quot; &quot;$request&quot; &apos;</span><br><span class="line">    &apos;$status $body_bytes_sent &quot;$request_body&quot; &quot;$http_referer&quot; &apos;</span><br><span class="line">    &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &apos;</span><br><span class="line">    &apos;$connection $upstream_addr &apos;</span><br><span class="line">    &apos;$upstream_response_time $request_time &quot;$jvm_cookie&quot;&apos;;</span><br><span class="line"></span><br><span class="line">###主机名\请求地址\状态码\请求body\body字节数\用户真是IP\后端负载节点\请求时间\</span><br><span class="line">log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$server_name&quot; &quot;$request&quot; &apos;</span><br><span class="line">    &apos;$status $body_bytes_sent &quot;$request_body&quot; &quot;$http_referer&quot; &apos;</span><br><span class="line">    &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &apos;</span><br><span class="line">    &apos;$connection $upstream_addr &apos;</span><br><span class="line">    &apos;$upstream_response_time $request_time &apos;;</span><br></pre></td></tr></table></figure>
<h2 id="六、开始分析nginx日志并生成html报告"><a href="#六、开始分析nginx日志并生成html报告" class="headerlink" title="六、开始分析nginx日志并生成html报告"></a>六、开始分析nginx日志并生成html报告</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# goaccess -d -f access_20170517.log -a -p ~/.goaccessrc &gt; goaccessrc.html</span><br></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/a807257775/fpgn5k0aprmcwrz3f0pkcy6i/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190430155927.png" alt="微信截图_20190430155927.png-156.5kB"></p>
<h2 id="七、在线分析nginx日志并终端输出报告"><a href="#七、在线分析nginx日志并终端输出报告" class="headerlink" title="七、在线分析nginx日志并终端输出报告"></a>七、在线分析nginx日志并终端输出报告</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">###Nginx日志是属于Combined Log Format (XLF/ELF)类型的，如无法输出日志，则需要根据nginx输出日志格式调整goaccess解析格式参考第四节。</span><br><span class="line">[root@localhost ~]# goaccess -f access.log</span><br></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/a807257775/r03ampzdcyap4izlpc27t9pk/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20190430155139.png" alt="微信截图_20190430155139.png-111.5kB"></p>
<ul>
<li>键盘操作：<ul>
<li style="list-style: none"><input type="checkbox" checked> F1或h：帮助</li>
<li style="list-style: none"><input type="checkbox" checked> F5 ：刷新主界面</li>
<li style="list-style: none"><input type="checkbox" checked> q：退出程序/当前窗口/折叠当前模块</li>
<li style="list-style: none"><input type="checkbox" checked> o或Enter：展开选中的模块或窗口</li>
<li style="list-style: none"><input type="checkbox" checked> 0-9以及Shift + 0：将选中的模块或窗口激活</li>
<li style="list-style: none"><input type="checkbox" checked> k和j：模块内部移动</li>
<li style="list-style: none"><input type="checkbox" checked> c：修改配色</li>
<li style="list-style: none"><input type="checkbox" checked> ^f和^b：模块中上下滚屏</li>
<li style="list-style: none"><input type="checkbox" checked> tab shift+tab：前后切换模块</li>
<li style="list-style: none"><input type="checkbox" checked> s：模块内部排序选择</li>
<li style="list-style: none"><input type="checkbox" checked> /：在所有模块中搜索(支持正则)</li>
<li style="list-style: none"><input type="checkbox" checked> n：找到下个匹配</li>
<li style="list-style: none"><input type="checkbox" checked> g和G：跳到第一项/最后一项</li>
</ul>
</li>
</ul>
<h2 id="八、Goaccess相关扩展部分："><a href="#八、Goaccess相关扩展部分：" class="headerlink" title="八、Goaccess相关扩展部分："></a>八、Goaccess相关扩展部分：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">###由于nginx会自动压缩日志，以下命令可以直接分析压缩后的日志</span><br><span class="line">1、zcat access.log.*.gz | goaccess</span><br><span class="line">2、zcat -f access.log* | goaccess</span><br><span class="line"></span><br><span class="line">###支持各种管道</span><br><span class="line">1、sed -n &apos;/11\/Dec\/2014/,$ p&apos; access.log | goaccess -a</span><br><span class="line">2、grep -E &quot;(google|baidu)&quot;access.log | goaccess -a</span><br><span class="line"></span><br><span class="line">###goaccess部分参数说明： </span><br><span class="line">1、-f 指明目标文件 </span><br><span class="line">2、-p 按照指定配置文件格式输出，如果指定默认使用conf下面的goaccess.conf </span><br><span class="line">3、-o 指定生成文件的格式，如json,csv等 </span><br><span class="line">4、-a 显示出useragent。Enable a list of user-agents by host</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>NGINX文档</category>
      </categories>
      <tags>
        <tag>NGINX代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx-1.12.1安装笔记</title>
    <url>/2019/05/06/Nginx-1-12-1%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Nginx-1-12-1安装笔记"><a href="#Nginx-1-12-1安装笔记" class="headerlink" title="Nginx-1.12.1安装笔记"></a>Nginx-1.12.1安装笔记</h1><h2 id="1、所需模块"><a href="#1、所需模块" class="headerlink" title="1、所需模块"></a>1、所需模块</h2><ul>
<li>模块名称：ngx_http_limit_conn_module</li>
<li>模块名称：ngx_http_limit_req_module</li>
<li>模块名称：ngx_http_geo_module</li>
<li>模块名称：ngx_http_map_module</li>
<li>模块名称：ngx_http_geoip_module</li>
<li>模块名称：naxsi<ul>
<li style="list-style: none"><input type="checkbox" checked> <a href="https://github.com/nbs-system/naxsi" target="_blank" rel="noopener">https://github.com/nbs-system/naxsi</a></li>
</ul>
</li>
<li>模块名称：nginx-limit-upstream<ul>
<li style="list-style: none"><input type="checkbox" checked> <a href="https://github.com/cfsego/nginx-limit-upstream/" target="_blank" rel="noopener">https://github.com/cfsego/nginx-limit-upstream/</a></li>
</ul>
</li>
<li>模块名称：nginx-upstream-jvm-route<ul>
<li style="list-style: none"><input type="checkbox" checked> <a href="https://github.com/nulab/nginx-upstream-jvm-route" target="_blank" rel="noopener">https://github.com/nulab/nginx-upstream-jvm-route</a></li>
</ul>
</li>
</ul>
<h2 id="2、安装环境介绍"><a href="#2、安装环境介绍" class="headerlink" title="2、安装环境介绍"></a>2、安装环境介绍</h2><table>
<thead>
<tr>
<th>平台</th>
<th>IP</th>
<th>NGINX版本</th>
<th>安装模块</th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS 6.7 64Bit</td>
<td>192.168.2.245</td>
<td>NGINX-1.12.1</td>
<td>naxsi\nginx-limit-upstream\nginx-upstream-jvm-route</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="3、Nginx安装步骤"><a href="#3、Nginx安装步骤" class="headerlink" title="3、Nginx安装步骤"></a>3、Nginx安装步骤</h2><h3 id="3-1、安装系统工具"><a href="#3-1、安装系统工具" class="headerlink" title="3.1、安装系统工具"></a>3.1、安装系统工具</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install vim telnet wget nethogs htop glances dstat traceroute lrzsz goaccess ntpdate dos2unix openssl-devel tcpdump lrzsz fio -y</span><br></pre></td></tr></table></figure>
<h3 id="3-2、安装编译开发组件"><a href="#3-2、安装编译开发组件" class="headerlink" title="3.2、安装编译开发组件"></a>3.2、安装编译开发组件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum groupinstall &quot;Development Tools&quot; -y</span><br></pre></td></tr></table></figure>
<h3 id="3-3、安装EPEL源"><a href="#3-3、安装EPEL源" class="headerlink" title="3.3、安装EPEL源"></a>3.3、安装EPEL源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/Packages/e/epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure>
<h3 id="3-4、安装NGINX各项依赖组件"><a href="#3-4、安装NGINX各项依赖组件" class="headerlink" title="3.4、安装NGINX各项依赖组件"></a>3.4、安装NGINX各项依赖组件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install pcre-devel zlib-devel libjpeg-devel libpng-devel freetype-devel   	openssl-devel curl curl-devel libxml2 libxml2-devel libjpeg libjpeg-devel libpng libpng-devel libmcrypt libmcrypt-devel openldap openldap-devel openssh-client -y</span><br></pre></td></tr></table></figure>
<h3 id="3-5、解压nginx及各项模块"><a href="#3-5、解压nginx及各项模块" class="headerlink" title="3.5、解压nginx及各项模块"></a>3.5、解压nginx及各项模块</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost soft]# unzip nginx-limit-upstream-master.zip</span><br><span class="line">###nginx负载限制模块</span><br><span class="line">[root@localhost soft]# unzip naxsi-master.zip</span><br><span class="line">###nginx软防火墙</span><br><span class="line">[root@localhost soft]# tar xzvf nginx-1.12.1.tar.gz</span><br><span class="line">###nginx主程序</span><br><span class="line">[root@localhost soft]# unzip nginx-upstream-jvm-route-master.zip</span><br><span class="line">###cookie粘贴模块</span><br></pre></td></tr></table></figure>
<h3 id="3-1、安装nginx及各项模块"><a href="#3-1、安装nginx及各项模块" class="headerlink" title="3.1、安装nginx及各项模块"></a>3.1、安装nginx及各项模块</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost soft]# cd nginx-1.12.1</span><br><span class="line">[root@localhost nginx-1.12.1]#  patch -p0 &lt; /soft/nginx-limit-upstream-master/nginx-1.10.1.patch</span><br><span class="line"></span><br><span class="line">[root@localhost nginx-1.12.1]# patch -p0 &lt; /soft/nginx-upstream-jvm-route-master/jvm_route.patch</span><br><span class="line"></span><br><span class="line">[root@localhost nginx-1.12.1]# useradd -s /sbin/nologin -M www</span><br><span class="line"></span><br><span class="line">[root@localhost nginx-1.12.1]#./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_stub_status_module --with-http_ssl_module --without-mail_pop3_module --without-mail_smtp_module --without-mail_imap_module </span><br><span class="line">--add-module=/soft/naxsi-master/naxsi_src --add-module=/soft/nginx-limit-upstream-master --add-module=/soft/nginx-upstream-jvm-route-master &amp;&amp; make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line">[root@localhost nginx-1.12.1]# chmod a+x /etc/init.d/nginx</span><br><span class="line">[root@localhost nginx-1.12.1]# chkconfig --add nginx</span><br><span class="line">[root@localhost nginx-1.12.1]# chkconfig nginx on</span><br></pre></td></tr></table></figure>
<h3 id="3-6、测试与验证"><a href="#3-6、测试与验证" class="headerlink" title="3.6、测试与验证"></a>3.6、测试与验证</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost sbin]# pwd</span><br><span class="line">/usr/local/nginx/sbin</span><br><span class="line">[root@localhost sbin]# ./nginx -V</span><br><span class="line">nginx version: </span><br><span class="line">built by gcc 4.4.7 20120313 (Red Hat 4.4.7-18) (GCC) </span><br><span class="line">built with OpenSSL 1.0.1e-fips 11 Feb 2013</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --user=www --group=www --with-http_stub_status_module --with-http_ssl_module --without-mail_pop3_module --without-mail_smtp_module --without-mail_imap_module --with-http_ssl_module --add-module=/soft/naxsi-master/naxsi_src --add-module=/soft/nginx-limit-upstream-master --add-module=/soft/nginx-upstream-jvm-route-master</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>NGINX文档</category>
      </categories>
      <tags>
        <tag>NGINX代理</tag>
      </tags>
  </entry>
  <entry>
    <title>NGINX代理服务器</title>
    <url>/2019/05/06/NGINX%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h1 id="NGINX代理服务器"><a href="#NGINX代理服务器" class="headerlink" title="NGINX代理服务器"></a>NGINX代理服务器</h1><h2 id="1、NGINX是什么？"><a href="#1、NGINX是什么？" class="headerlink" title="1、NGINX是什么？"></a>1、NGINX是什么？</h2><h3 id="1-1、NGINX的简介"><a href="#1-1、NGINX的简介" class="headerlink" title="1.1、NGINX的简介"></a>1.1、NGINX的简介</h3><ul>
<li><p>来自俄罗斯的Igor Sysoev在为Rambler Media（<a href="http://www.rambler.ru/" target="_blank" rel="noopener">http://www.rambler.ru/</a> ） 工作期间， 使用C语言开发了Nginx。Nginx作为Web服务器，一直为俄罗斯著名的门户网站RamblerMedia提供着出色、稳定的服务。IgorSysoev将Nginx的代码开源。由于Nginx使用基于事件驱动的架构能够并发处理百万级别的TCP连接，高度模块化的设计和自由的许可证使得扩展Nginx功能的第三方模块层出不穷，而且优秀的设计带来了极佳的稳定性，因此其作为Web服务器被广泛应用到大流量的网站上，包括腾讯、新浪、网易、淘宝等访问量巨大的网站。</p>
</li>
<li><p>Nginx是一个高性能HTTP服务器代理软件，也是一台IMAP/POP3/SMTP/TCP代理服务器。对于高效处理大规模并发连接，支持epoll工作模式，在安装上相比Apache仅仅只有几百K，在功能实现上都采用模块化结构设计，都支持通用的语言接口，如PHP，PERL，PYTHON等，同时还支持正向和反向代理、虚拟主机、URL重写、压缩传输、SSL加密传输等。支持跨平台，可运行在Linux、FreeBSD、Solaris、AIX、MacOS、Windows等操作系统上。</p>
</li>
</ul>
<hr>
<h3 id="1-2、NGINX的市场发展情况"><a href="#1-2、NGINX的市场发展情况" class="headerlink" title="1.2、NGINX的市场发展情况"></a>1.2、NGINX的市场发展情况</h3><ul>
<li><p>Apache的发展时期很长，在很长一段时间Apache都是世界第一大Web服务器，而Nginx在进几年发展迅猛，受到各类大型网站的青睐，不远的未来一定会成为世界第一Web服务器。</p>
</li>
<li><p>图一是截止2019年2月28日的世界Web服务器的使用排名情况。</p>
</li>
</ul>
<p>图一：<img src="http://static.zybuluo.com/a807257775/tlxt5yu63ikdupm3rqj4ei72/%E6%88%AA%E6%AD%A22019%E5%B9%B42%E6%9C%8828%E6%97%A5%E7%BB%9F%E8%AE%A1.png" alt="截止2019年2月28日统计.png-76.7kB"></p>
<h2 id="2、为什么选择NGINX？"><a href="#2、为什么选择NGINX？" class="headerlink" title="2、为什么选择NGINX？"></a>2、为什么选择NGINX？</h2><h3 id="2-1、选择NGINX的优势所在"><a href="#2-1、选择NGINX的优势所在" class="headerlink" title="2.1、选择NGINX的优势所在"></a>2.1、选择NGINX的优势所在</h3><ul>
<li><p>现如今快速增长的互联网用户群以及业内所有互联网服务提供商越来越好的用户体验， 都促使我们在大流量服务中用Nginx取代其他Web服务器。 Nginx先天的事件驱动型设计、 全异步的网络I/O处理机制、极少的进程间切换以及许多优化设计，都使得Nginx天生善于处理高并发压力下的互联网请求，同时Nginx降低了资源消耗，可以把服务器硬件资源“压榨”到极致</p>
</li>
<li><p>通过上面的简单介绍，可以看出，Nginx作为HTTP服务器的优势是显而易见的，它有很多其他Web服务器无法比拟的性能和优势；</p>
<ul>
<li style="list-style: none"><input type="checkbox" checked> 作为Web服务器，Nginx处理静态文件、索引文件，自动索引的效率非常高</li>
<li style="list-style: none"><input type="checkbox" checked> 作为代理服务器，Nginx可以实现无缓存的反向代理加速，提高网站运行速度</li>
<li style="list-style: none"><input type="checkbox" checked> 作为负载均衡服务器，可以支持HTTP代理服务器对外进行服务，同时还支持简单的容错和利用算法进行负载均衡。</li>
<li style="list-style: none"><input type="checkbox" checked> 在性能方面，Nginx专门为性能优化而开发，它采用内核POLL模型，可以支持更多的并发连接，单机可以支持100000以上的并发连接，而且占用很低的内存资源。理论上，Nginx支持的并发连接上限取决于内存，10万远未封顶。当然，能够及时地处理更多的并发请求，是与业务特点紧密相关的。</li>
<li style="list-style: none"><input type="checkbox" checked> 在稳定性方面，Nginx采取了分阶段资源分配技术，使得CPU与内存的占用率非常低。Nginx官方提示，在保持10000个非活跃的HTTP长连接，而这些连接只占用2.5MB内存</li>
<li style="list-style: none"><input type="checkbox" checked> 在高可用性方面，master管理进程与worker工作进程的分离设计，使得Nginx能够提供热部署功能，即可以在7×24小时不间断服务的前提下，升级Nginx的可执行文件。当然，它也支持不停止服务就更新配置项、 更换日志文件等功能。</li>
<li style="list-style: none"><input type="checkbox" checked> 在扩展性方面，Nginx它完全是由多个不同功能、不同层次、不同类型且耦合度极低的模块组成。这种低耦合度的优秀设计，造就了Nginx庞大的第三方模块，当然，公开的第三方模块也如官方发布的模块一样易使用。</li>
</ul>
</li>
</ul>
<hr>
<h2 id="3、NGINX的组成与工作原理"><a href="#3、NGINX的组成与工作原理" class="headerlink" title="3、NGINX的组成与工作原理"></a>3、NGINX的组成与工作原理</h2><ul>
<li><p>Nginx由内核和模块组成，其中，内核的设计非常微小和简洁，完成的工作也非常简单，仅仅是通过查找配置文件将客户端请求映射到一个location block（location是Nginx配置中的一个命令，用于URL匹配），而在这个location中所配置的每个命令将会启动不同的模块去完成相应的工作。</p>
</li>
<li><p>Nginx的模块从结构上分为核心模块、基础模块和第三方模块，其中，HTTP模块、EVENT模块和MAIL模块等属于核心模块，HTTP Access模块、HTTP FastCGI模块、HTTP Proxy模块和HTTP Rewrite模块属于基本模块，而HTTP Upstream Request Hash模块、Notice模块和HTTP Access Key模块属于第三方模块，用户根据自己的需要开发的模块都属于第三方模块。正是有了这么多模块的支持，Nginx功能才会如此强大。</p>
</li>
<li><p><strong>Nginx的模块从功能上分为如下三类：</strong></p>
<ul>
<li style="list-style: none"><input type="checkbox" checked> Handlers（处理器模块）。此类模块之间处理请求，并进行输出内容和修改headers信息等操作，handlers处理器模块一般只能有一个。</li>
<li style="list-style: none"><input type="checkbox" checked> Filters（过滤器模块）。此类模块主要对其他处理器模块输出的内容进行修改操作，最后由Nginx输出。</li>
<li style="list-style: none"><input type="checkbox" checked> Proxies（代理类模块）。此类模块是Nginx的HTTP Upstream之类的模块，这些模块主要与后端一些服务比如FastCGI等进行交互，实现服务代理和负载均衡等功能。</li>
</ul>
</li>
<li><p><strong>如图二所示Nginx模块常规的HTTP请求和响应的过程</strong>：</p>
</li>
</ul>
<p>图二：<img src="http://static.zybuluo.com/a807257775/fwcmvan2j73z0b1rdjjgokfr/NGINX%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="NGINX工作原理.png-69.5kB"></p>
<ul>
<li>Nginx的模块直接被编译进Nginx，因此属于静态编译方式。在启动Nginx后，自动加载Nginx的模块，不像在Apache中一样，首先将模块编译为一个SO文件，然后在配置文件中指定是否加载。在解析配置文件时，Nginx的每个模块都有可能去处理某各请求，但是同一个处理请求只能有一个模块来完成。</li>
</ul>
<hr>
<h2 id="4、NGINX安装与部署"><a href="#4、NGINX安装与部署" class="headerlink" title="4、NGINX安装与部署"></a>4、NGINX安装与部署</h2><ul>
<li>Nginx的官方网站是(<a href="https://nginx.org/" target="_blank" rel="noopener">https://nginx.org</a>)，从这里可以获得Nginx的最新版本信息。Nginx一般有三个版本：稳定版、开发版和历史稳定版。开版更新较快，包含最新的功能和BUG的修复，存在不稳定因素。稳定版更新慢，BUG少，作为生产环境的首选，本文已目前生产版本nginx-1.12.1作为安装讲解对象。</li>
</ul>
<h3 id="4-1、实验环境"><a href="#4-1、实验环境" class="headerlink" title="4.1、实验环境"></a>4.1、实验环境</h3><table>
<thead>
<tr>
<th>平台</th>
<th>IP</th>
<th>用途</th>
<th>版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS 6.7 64Bit</td>
<td>192.168.2.245</td>
<td>WEB代理和负载均衡</td>
<td>1.12.1</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="4-2、安装EPEL源"><a href="#4-2、安装EPEL源" class="headerlink" title="4.2、安装EPEL源"></a>4.2、安装EPEL源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/Packages/e/epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure>
<h3 id="4-3、安装编译开发环境"><a href="#4-3、安装编译开发环境" class="headerlink" title="4.3、安装编译开发环境"></a>4.3、安装编译开发环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum groupinstall &quot;Development Tools&quot; -y</span><br></pre></td></tr></table></figure>
<h3 id="4-4、安装各项依赖组件"><a href="#4-4、安装各项依赖组件" class="headerlink" title="4.4、安装各项依赖组件"></a>4.4、安装各项依赖组件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install pcre-devel zlib-devel libjpeg-devel libpng-devel freetype-devel   	openssl-devel curl curl-devel libxml2 libxml2-devel libjpeg libjpeg-devel libpng libpng-devel libmcrypt libmcrypt-devel openldap openldap-devel openssh-client -y</span><br></pre></td></tr></table></figure>
<h3 id="4-5、解压NGINX及各项第三方模块"><a href="#4-5、解压NGINX及各项第三方模块" class="headerlink" title="4.5、解压NGINX及各项第三方模块"></a>4.5、解压NGINX及各项第三方模块</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost soft]# unzip nginx-limit-upstream-master.zip</span><br><span class="line">#nginx负载组限制模块</span><br><span class="line">[root@localhost soft]# unzip naxsi-master.zip</span><br><span class="line">#nginx软防火墙</span><br><span class="line">[root@localhost soft]# tar xzvf nginx-1.12.1.tar.gz</span><br><span class="line">#nginx主程序</span><br><span class="line">[root@localhost soft]# unzip nginx-upstream-jvm-route-master.zip</span><br><span class="line">#cookie粘贴模块</span><br></pre></td></tr></table></figure>
<h3 id="4-6、安装NGINX及各项模块"><a href="#4-6、安装NGINX及各项模块" class="headerlink" title="4.6、安装NGINX及各项模块"></a>4.6、安装NGINX及各项模块</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost soft]# cd nginx-1.12.1</span><br><span class="line">#切换到NGINX源码包</span><br><span class="line">[root@localhost nginx-1.12.1]# patch -p0 &lt; /soft/nginx-limit-upstream-master/nginx-1.10.1.patch</span><br><span class="line">#导入upstream限流模块</span><br><span class="line">[root@localhost nginx-1.12.1]# patch -p0 &lt; /soft/nginx-upstream-jvm-route-master/jvm_route.patch</span><br><span class="line">#导入NGINX COOKIE黏贴模板</span><br><span class="line">[root@localhost nginx-1.12.1]# useradd -s /sbin/nologin -M www</span><br><span class="line">#创建nginx www管理启动用户</span><br><span class="line">[root@localhost nginx-1.12.1]#./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_stub_status_module --with-http_ssl_module --without-mail_pop3_module --without-mail_smtp_module --without-mail_imap_module  --add-module=/soft/naxsi-master/naxsi_src --add-module=/soft/nginx-limit-upstream-master --add-module=/soft/nginx-upstream-jvm-route-master &amp;&amp; make &amp;&amp; make install</span><br><span class="line">#开始编译</span><br><span class="line">[root@localhost nginx-1.12.1]# chmod a+x /etc/init.d/nginx</span><br><span class="line">[root@localhost nginx-1.12.1]# chkconfig --add nginx</span><br><span class="line">[root@localhost nginx-1.12.1]# chkconfig nginx on</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="5、NGINX配置与维护技巧"><a href="#5、NGINX配置与维护技巧" class="headerlink" title="5、NGINX配置与维护技巧"></a>5、NGINX配置与维护技巧</h2><h3 id="5-1、NGINX配置文件详解"><a href="#5-1、NGINX配置文件详解" class="headerlink" title="5.1、NGINX配置文件详解"></a>5.1、NGINX配置文件详解</h3><ul>
<li>Nginx安装完毕后，会产生相应的安装目录，根据前面的编译安装路径，Nginx的配置文件结构如图三，这里重点介绍nginx.conf配置文件。</li>
</ul>
<p>图三：<img src="http://static.zybuluo.com/a807257775/3t8dwqb2xs5t03hby27vr0d9/NGINX%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84_2.png" alt="NGINX配置文件结构_2.png-28.3kB"></p>
<ul>
<li>Nginx配置文件主要分为四个部分：main全局设置、server主机设置、upstream负载均衡服务器设置和location（URL匹配设置）。main部分设置的指令将影响其他所有设置；server部分的指令主要用于指定主机和端口；upstream指令主要用于负载均衡，设置一系列的后端服务器；location部分用于匹配网页位置。这四者的直接关系如下：server继承main，location继承server，upstream既不会继承其他设置也不会被继承。一个完整的配置文件结构如图四：</li>
</ul>
<p>图四：<img src="http://static.zybuluo.com/a807257775/4b8tvfgpo0c1kw1lxx8va38g/NGINX%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84.png" alt="NGINX配置文件结构.png-44.3kB"></p>
<hr>
<h4 id="5-1-1、NGINX全局配置"><a href="#5-1-1、NGINX全局配置" class="headerlink" title="5.1.1、NGINX全局配置"></a>5.1.1、NGINX全局配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user www www;</span><br><span class="line">worker_processes  4;</span><br><span class="line">error_log  logs/error/error.log  notice;</span><br><span class="line">pid        logs/nginx.pid;</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections  65535;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>如上通过一个Nginx配置实列详细介绍nginx.conf每个命令的含义。解释如下：</strong></p>
<ul>
<li style="list-style: none"><input type="checkbox" checked> user：是个主模块指令，指定Nginx Worker进程运行用户以及用户组，默认是nobody用户运行。</li>
<li style="list-style: none"><input type="checkbox" checked> worker_processes：是个主模块指令，指定了Nginx要开启的进程数。每个Nginx进程平均耗费10~12MB内存。如果是多核CPU，建议指定和CPU的数量一样多的进程数即可</li>
<li style="list-style: none"><input type="checkbox" checked> error_log：是个主模块指令，用来定义全局错误日志文件。日志输出级别又debug、info、notice、warn、error、crit可供选择，其中，debug输出的日志作为详细</li>
<li style="list-style: none"><input type="checkbox" checked> pid：是个主模块指令，用来指定进程id的存储文件位置。</li>
<li style="list-style: none"><input type="checkbox" checked> worker_rlimit_nofile：用于绑定worker进程和cpu，linux内存2.4以上可用</li>
<li style="list-style: none"><input type="checkbox" checked> events：指令用来设定Nginx的工作模式及连接数上限</li>
<li style="list-style: none"><input type="checkbox" checked> use：是个事件模块指令，用来指定Nginx的工作模式，Nginx支持的工作模式又select、poll、kqueue、epoll、rtsig和/dev/poll。其中select和poll都是标准的工作模式，kqueue和epoll是高效的工作模式，不同的是epoll用在Linux平台上，而kqueue用在BSD系统中。对于Linux系统，epoll工作模式是首选。</li>
<li style="list-style: none"><input type="checkbox" checked> worker_connections：也是个事件模块指令，用于定于Nginx每个进程的最大连接数，默认是1024。最大客户的链接数由worker_processes和worker_connections决定，在作为反向代理时变为：max_clients=worker_connections*worker_processes/4。<br>进程的最大连接数是手linux操作系统最大打开文件数限制，在执行操作系统命令”ulimit -n 65536”后worker_connections的设置才能生效。</li>
</ul>
</li>
</ul>
<hr>
<h4 id="5-1-2、HTTP服务器配置"><a href="#5-1-2、HTTP服务器配置" class="headerlink" title="5.1.2、HTTP服务器配置"></a>5.1.2、HTTP服务器配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    include     conf/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    </span><br><span class="line">    log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$server_name&quot; &quot;$request&quot; &apos;</span><br><span class="line">        &apos;$status $body_bytes_sent &quot;$request_body&quot; &quot;$http_referer&quot; &apos;</span><br><span class="line">        &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &apos;</span><br><span class="line">        &apos;$connection $upstream_addr &apos;</span><br><span class="line">        &apos;$upstream_response_time $request_time&apos;;</span><br><span class="line">        </span><br><span class="line">    client_max_body_size 5m;        </span><br><span class="line">    client_header_buffer_size 32k;</span><br><span class="line">    large_client_header_buffers 8 128k;</span><br><span class="line">    </span><br><span class="line">    sendfile        on;</span><br><span class="line">    tcp_nopush     on;</span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    </span><br><span class="line">    keepalive_timeout  60s;</span><br><span class="line">    client_header_timeout 10s;</span><br><span class="line">    client_body_timeout 10s;</span><br><span class="line">    send_timeout 10s</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>如下内容是Nginx对HTTP服务器相关属性的配置，解析如下：</strong></p>
<ul>
<li style="list-style: none"><input type="checkbox" checked> include：主模块命令，实现对配置文件所包含文件的设定，可以减少主配置文件复杂度</li>
<li style="list-style: none"><input type="checkbox" checked> defailt_type：属于HTTP核心模块命令，这里设定默认类型为而二进制流，也就是当文件类型未定义时使用这种方式，列如，在没有配置PHP环境时，Nginx是不与解析的，此时，用浏览器访问PHP文件就会出现下载窗口。</li>
<li style="list-style: none"><input type="checkbox" checked> log_format：用于指定Nginx日志的输出格式。Main为此日志输出格式的名称，可以在下面的access_log命令中引用。</li>
<li style="list-style: none"><input type="checkbox" checked> client_max_body_size：用来设置允许客户端请求的最大单个文件字节数。</li>
<li style="list-style: none"><input type="checkbox" checked> client_header_buffer_size：用于指定来自客户端请求头的headerbuffer大小。对于大多数请求，1KB的缓冲区大小已经足够，如果自定义了消息头或更大的cookie，可以增加缓冲区大小。这里设置为32KB.</li>
<li style="list-style: none"><input type="checkbox" checked> large_client_header_buffers：用来指定客户端请求中较大的消息头的缓存最大数量和大小，”4”为个数，”128K”为大小，最大缓存量为4个128KB。</li>
<li style="list-style: none"><input type="checkbox" checked> sendfile：用于开启高效文件传输模式。将tcp_nopush和tcp_nodelay两个命令设置为”on”用于防止网络阻塞。</li>
<li style="list-style: none"><input type="checkbox" checked> keepalive_timeout：设置客户端连接保持活动的超时时间。在超过这个世界之后，服务器会关闭该连接。</li>
<li style="list-style: none"><input type="checkbox" checked> client_header_timeout：设置客户端请求头读取超时时间。如果超过这个世界，客户端还有没发送数据，Nginx将返回”Request time out（408）”错误。</li>
<li style="list-style: none"><input type="checkbox" checked> client_body_timeout：设置客户端请求主体读取超时时间。如果超过这个时间，客户端还没有发送任何数据，Nginx将返回”Request time out（408）”错误，默认值60秒。</li>
<li style="list-style: none"><input type="checkbox" checked> send_timeout：指定响应客户客户端的超时时间，这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接。</li>
</ul>
</li>
</ul>
<hr>
<h4 id="5-1-3、负载均衡配置"><a href="#5-1-3、负载均衡配置" class="headerlink" title="5.1.3、负载均衡配置"></a>5.1.3、负载均衡配置</h4><ul>
<li><p>upstream是Nginx的HTTP Upstream模块，这个模块通过一个简单的调度算法来实现客户端IP到后端服务器的负载均衡。在下面的设定中，通过upstream指令指定了一个负载均衡器的名称lisir.com。这个名称可以任意指定，在后面配置虚拟主机（域名）的地方需要直接调用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream lisir.com &#123;</span><br><span class="line">ip_hash;</span><br><span class="line">     server 192.168.1.30:2100;</span><br><span class="line">     server 192.168.1.30:2103 down;</span><br><span class="line">     server 192.168.1.30:2106 max_fails=3 fail_timeout=20s;</span><br><span class="line">     server 192.168.1.30:2109 backup;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Nginx的负载均衡模块目前支持4种调度算法。</strong></p>
<ul>
<li style="list-style: none"><input type="checkbox" checked> 轮询（默认）：每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器死机，自动剔除故障，使用户访问不受影响。</li>
<li style="list-style: none"><input type="checkbox" checked> weight：指定轮询权值，weight值越大，分配到的访问概率越高，主要用于后端每台服务器性能不均衡的情况下。</li>
<li style="list-style: none"><input type="checkbox" checked> ip_hash：每个请求按访问IP的哈希结果进行分配，这样来自同一个IP的方可固定访问一台后端服务器，主要用于解决动态网页存在session共享问题。</li>
<li style="list-style: none"><input type="checkbox" checked> fair：它是比上面两种更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡。需安装upstream_fair模块</li>
<li style="list-style: none"><input type="checkbox" checked> url_hash：按访问URL的哈希结果来分配请求，使每个URL定向到同一台后端服务器，可以进一步提高后端缓存服务器的效率。需安装url_hash模块。</li>
<li style="list-style: none"><input type="checkbox" checked> down：表示当前的server服务器暂时不参与负载均衡。</li>
<li style="list-style: none"><input type="checkbox" checked> backup：预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器。</li>
<li style="list-style: none"><input type="checkbox" checked> max_fails：允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream模块定义的错误信息。</li>
<li style="list-style: none"><input type="checkbox" checked> fail_timeout：在经历了max_fails次失败后，暂停服务器的时间。max_fails和fail_timeout可以一起使用</li>
</ul>
</li>
</ul>
<hr>
<h4 id="5-1-4、server虚拟主机配置"><a href="#5-1-4、server虚拟主机配置" class="headerlink" title="5.1.4、server虚拟主机配置"></a>5.1.4、server虚拟主机配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    charset koi8-r;</span><br><span class="line">    access_log  logs/host.access.log  main;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>建议将对虚拟主机进行配置的内容写进另外一个文件，然后通过include命令包含进来，这样更便于维护和管理。配置虚拟主机代码中每个参数的含义如下：</strong></p>
<ul>
<li style="list-style: none"><input type="checkbox" checked> server：定义虚拟主机开始的关键字。</li>
<li style="list-style: none"><input type="checkbox" checked> listen：用于指定虚拟主机的服务端口。</li>
<li style="list-style: none"><input type="checkbox" checked> server_name：用来指定IP地址或域名，多个域名之间用空格分开。</li>
<li style="list-style: none"><input type="checkbox" checked> index：用于设定访问的默认首页地址。</li>
<li style="list-style: none"><input type="checkbox" checked> root：用于指定虚拟主机的网页根目录，这个目录可以是相对路径，也可以是绝对路径。</li>
<li style="list-style: none"><input type="checkbox" checked> charset：用于设置网页的默认编码格式。</li>
<li style="list-style: none"><input type="checkbox" checked> acess_log：用来指定此虚拟主机的访问日志存放路径，最后的main用于指定访问日志的输出格式。</li>
</ul>
</li>
</ul>
<hr>
<h4 id="5-1-5、url匹配配置"><a href="#5-1-5、url匹配配置" class="headerlink" title="5.1.5、url匹配配置"></a>5.1.5、url匹配配置</h4><ul>
<li><p>URL地址匹配是Nginx配置中最灵活的部分。通过location关键字定定义了地址匹配的开始。location支持正则表达式匹配，也支持条件判断匹配。用户可以通过location命令实现Nginx对动态、静态网页进行过滤处理。在上面这段location代码中，所有扩展名以.gif、.jpg、.jpeg、.png、.bmp、.swf结尾的静态文件都交给Nginx处理，而expires用来指定静态文件的过期时间，这里是30天。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$ &#123;</span><br><span class="line">    root    /web/wwwroot/images;</span><br><span class="line">    expires     30d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>同理，下面这段代码是将upload和tml下所有的文件都交给Nginx来处理，当然，upload和html目录包含在/web/wwwroot目录中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~ ^/(upload|html)/ &#123;</span><br><span class="line">    root    /web/wwwroot/images;</span><br><span class="line">    expires     30d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在下面这段代码中，通过location关键字实现了将所有以.jsp为后缀的文件都交给本机的8080端口处理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~ .*.jsp* &#123;</span><br><span class="line">    index   index.jsp;</span><br><span class="line">    proxy_pass  http://localhost:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>location正则表达式匹配，其中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~ 为区分大小写匹配</span><br><span class="line">~* 为不区分大小写匹配</span><br><span class="line">!~和!~*分别为区分大小写不匹配及不区分大小写不匹配</span><br><span class="line">^ 以什么开头的匹配</span><br><span class="line">$ 以什么结尾的匹配</span><br><span class="line">转义字符。可以转. * ?等</span><br><span class="line">* 代表任意字符</span><br><span class="line">= 开头表示精确匹配</span><br><span class="line">^~ 开头表示uri以某个常规字符串开头，不是正则匹配</span><br><span class="line">/ 通用匹配, 如果没有其它匹配,任何请求都会匹配到</span><br><span class="line">优先级：</span><br><span class="line">(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ~,~* 正则顺序) &gt; (location 部分起始路径) &gt; (/)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h4 id="5-1-6、错误信息返回页面配置"><a href="#5-1-6、错误信息返回页面配置" class="headerlink" title="5.1.6、错误信息返回页面配置"></a>5.1.6、错误信息返回页面配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error_page  404              /404.html;</span><br><span class="line"># redirect server error pages to the static page /50x.html</span><br><span class="line">error_page   500 502 503 504  /50x.html;</span><br><span class="line">location = /50x.html &#123;</span><br><span class="line">    root   html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>通过error_page命令可以定制各种错误信息的返回页面。在默认情况下，Nginx会在主目录中查找指定的返回页面。在默认情况下，Nginx会在主目录的html目录中查找指定的返回页面。</li>
</ul>
<hr>
<h3 id="5-2、NGINX日常维护技巧"><a href="#5-2、NGINX日常维护技巧" class="headerlink" title="5.2、NGINX日常维护技巧"></a>5.2、NGINX日常维护技巧</h3><h4 id="5-2-1、NGINX配置正确性检查"><a href="#5-2-1、NGINX配置正确性检查" class="headerlink" title="5.2.1、NGINX配置正确性检查"></a>5.2.1、NGINX配置正确性检查</h4><ul>
<li><p><strong>Nginx提供的配置文件调试功能非常有用，可以快速定位配置文件存在的问题。执行如下命令检测配置文件的正确性：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# /usr/local/nginx/sbin/nginx -t</span><br><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</span><br><span class="line">#或者</span><br><span class="line">[root@localhost ~]# /usr/local/nginx/sbin/nginx -t -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</span><br><span class="line">#其中-t参数用于检查配置文件是否正确，但并不执行。-c参数用于指定配置文件的路径，如果不指定，Nginx默认会在安装目录下查找conf/nginx.conf文件。</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>另外，Nginx也提供了查看版本及相关编译信息的功能，在命令行执行以下命令可以显示安装Nginx的版本信息：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# /usr/local/nginx/sbin/nginx -v</span><br><span class="line">nginx version: 1.12.1</span><br><span class="line">#仅显示版本信息</span><br><span class="line"></span><br><span class="line">[root@localhost ~]# /usr/local/nginx/sbin/nginx -V</span><br><span class="line">nginx version: 1.12.1</span><br><span class="line">built by gcc 4.4.7 20120313 (Red Hat 4.4.7-18) (GCC) </span><br><span class="line">built with OpenSSL 1.0.1e-fips 11 Feb 2013</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --user=www --group=www --with-http_stub_status_module --with-http_ssl_module --without-mail_pop3_module --without-mail_smtp_module --without-mail_imap_module --with-http_ssl_module --add-module=/soft/naxsi-master/naxsi_src --add-module=/soft/nginx-limit-upstream-master --add-module=/soft/nginx-upstream-jvm-route-master</span><br><span class="line">#-V显示安装Nginx版本和相关编译信息</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h4 id="5-2-2、NGINX的启动、关闭与重启"><a href="#5-2-2、NGINX的启动、关闭与重启" class="headerlink" title="5.2.2、NGINX的启动、关闭与重启"></a>5.2.2、NGINX的启动、关闭与重启</h4><ul>
<li><p><strong>Nginx对进程的控制能力非常强大，可以通过信号命令控制进程。常用的信号有：</strong></p>
<ul>
<li style="list-style: none"><input type="checkbox" checked> QUIT：表示处理完当前请求后关闭进程。</li>
<li style="list-style: none"><input type="checkbox" checked> HUP：表示重新加载配置，即关闭原有的进程并开启新的工作进程。此才做不会中断用户的请求，因此，可以通过此信号平滑的重启Nginx。</li>
<li style="list-style: none"><input type="checkbox" checked> USER1：用于Nginx的日志切换，也就是重新打开一个日志文件，例如，每天要生成一个新的日志文件时，可以使用这个信号来控制。</li>
<li style="list-style: none"><input type="checkbox" checked> USER2：用于平滑升级可执行程序。</li>
<li style="list-style: none"><input type="checkbox" checked> WINCH：从容的关闭工作进程</li>
</ul>
</li>
<li><p><strong>Nginx的启动非常简单，只需要输入：</strong></p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# /usr/local/nginx/sbin/nginx</span><br><span class="line">[root@localhost ~]# ps -ef|grep nginx</span><br><span class="line">www       2107 26411  0 Mar28 ?        00:00:25 nginx: worker process                                          </span><br><span class="line">www       2108 26411  0 Mar28 ?        00:00:08 nginx: worker process                                          </span><br><span class="line">www       2109 26411  0 Mar28 ?        00:00:10 nginx: worker process                                          </span><br><span class="line">www       2110 26411  0 Mar28 ?        00:00:14 nginx: worker process                                          </span><br><span class="line">www       2111 26411  0 Mar28 ?        00:00:24 nginx: worker process                                          </span><br><span class="line">www       2112 26411  0 Mar28 ?        00:00:57 nginx: worker process                                          </span><br><span class="line">www       2113 26411  0 Mar28 ?        00:01:59 nginx: worker process                                          </span><br><span class="line">www       2114 26411  0 Mar28 ?        00:05:35 nginx: worker process                                          </span><br><span class="line">www       2115 26411  0 Mar28 ?        00:00:00 nginx: cache manager process                                   </span><br><span class="line">root     26411     1  0 Jan28 ?        00:00:00 nginx: master process /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure>
<ul>
<li><p><strong>关闭Nginx，只需要输入：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill -QUIT 主进程pid</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Nginx的平滑重启可以使用如下命令：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# kill -HUP &apos;cat /usr/local/nginx/logs/nginx.pid&apos;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h3 id="5-3、生产NGINX负载均衡配置案例"><a href="#5-3、生产NGINX负载均衡配置案例" class="headerlink" title="5.3、生产NGINX负载均衡配置案例"></a>5.3、生产NGINX负载均衡配置案例</h3><h4 id="5-3-1、NGINX安装信息"><a href="#5-3-1、NGINX安装信息" class="headerlink" title="5.3.1、NGINX安装信息"></a>5.3.1、NGINX安装信息</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost sbin]# ./nginx -V</span><br><span class="line">nginx version: </span><br><span class="line">built by gcc 4.4.7 20120313 (Red Hat 4.4.7-18) (GCC) </span><br><span class="line">built with OpenSSL 1.0.1e-fips 11 Feb 2013</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --user=www --group=www --with-http_stub_status_module --with-http_ssl_module --without-mail_pop3_module --without-mail_smtp_module --without-mail_imap_module --with-http_ssl_module --add-module=/soft/naxsi-master/naxsi_src --add-module=/soft/nginx-limit-upstream-master --add-module=/soft/nginx-upstream-jvm-route-master</span><br></pre></td></tr></table></figure>
<h4 id="5-3-1、主配置文件：nginx-conf"><a href="#5-3-1、主配置文件：nginx-conf" class="headerlink" title="5.3.1、主配置文件：nginx.conf"></a>5.3.1、主配置文件：nginx.conf</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#日志格式</span><br><span class="line">log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$server_name&quot; &quot;$request&quot; &apos;</span><br><span class="line">        &apos;$status $body_bytes_sent &quot;$request_body&quot; &quot;$http_referer&quot; &apos;</span><br><span class="line">        &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &apos;</span><br><span class="line">        &apos;$connection $upstream_addr &apos;</span><br><span class="line">        &apos;$upstream_response_time $request_time&apos;;</span><br><span class="line"></span><br><span class="line">#日志配置与路径定义</span><br><span class="line">    access_log  logs/nginx_access.log  access;</span><br><span class="line">    error_log  logs/nginx_error.log  error;</span><br><span class="line"></span><br><span class="line">    include /usr/local/nginx/conf/vhost_conf/xxx.conf;</span><br><span class="line"></span><br><span class="line">#定义清算平台负载组，默认是轮询算法</span><br><span class="line">     upstream jspt_pay_pool &#123;</span><br><span class="line">#JSPT-140x</span><br><span class="line">      server 192.168.1.182:1400 srun_id=jvm-182-jspt1400;</span><br><span class="line">      server 192.168.1.183:1400 srun_id=jvm-183-jspt1400;</span><br><span class="line">      server 192.168.1.182:1403 srun_id=jvm-182-jspt1403;</span><br><span class="line">      server 192.168.1.183:1403 srun_id=jvm-183-jspt1403;</span><br><span class="line">      server 192.168.1.182:1406 srun_id=jvm-182-jspt1406;</span><br><span class="line">      server 192.168.1.183:1406 srun_id=jvm-183-jspt1406;</span><br><span class="line">      server 192.168.1.182:1409 srun_id=jvm-182-jspt1409;</span><br><span class="line">      server 192.168.1.183:1409 srun_id=jvm-183-jspt1409;</span><br><span class="line">##JSPT-240x</span><br><span class="line">#      server 192.168.1.182:2400 srun_id=jvm-182-jspt2400;</span><br><span class="line">#      server 192.168.1.182:2403 srun_id=jvm-182-jspt2403;</span><br><span class="line">#      server 192.168.1.182:2406 srun_id=jvm-182-jspt2406;</span><br><span class="line">#      server 192.168.1.182:2409 srun_id=jvm-182-jspt2409;</span><br><span class="line">#      server 192.168.1.183:2400 srun_id=jvm-183-jspt2400;</span><br><span class="line">#      server 192.168.1.183:2403 srun_id=jvm-183-jspt2403;</span><br><span class="line">#      server 192.168.1.183:2406 srun_id=jvm-183-jspt2406;</span><br><span class="line">#      server 192.168.1.183:2409 srun_id=jvm-183-jspt2409;</span><br><span class="line">      jvm_route $cookie_JSESSIONID|sessionid reverse;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-3-2、域名虚拟主机配置"><a href="#5-3-2、域名虚拟主机配置" class="headerlink" title="5.3.2、域名虚拟主机配置"></a>5.3.2、域名虚拟主机配置</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    server &#123;</span><br><span class="line">        listen       443;</span><br><span class="line">        server_name  www.ezf123.com;</span><br><span class="line">#SSL单向商业证书配置</span><br><span class="line">        ssl                  on;</span><br><span class="line">        ssl_certificate      /usr/local/nginx/ca/201712_pay/ezf123.com.crt;</span><br><span class="line">        ssl_certificate_key  /usr/local/nginx/ca/201712_pay/ezf123.com.key;</span><br><span class="line"></span><br><span class="line">        ssl_session_timeout  5m;</span><br><span class="line">        ssl_protocols  TLSv1 TLSv1.1 TLSv1.2 ;</span><br><span class="line">        ssl_ciphers ALL:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-RC4-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:DHERSA-AES128-SHA:RC4-SHA:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!DSS:!PKS;</span><br><span class="line">        ssl_prefer_server_ciphers   off;</span><br><span class="line">        ssl_session_cache shared:SSL:10m;</span><br><span class="line">#独立域名访问日志配置，默认继承nginx.conf的配置</span><br><span class="line">        access_log  /usr/local/nginx/logs/www_ezf123_access.log  access;</span><br><span class="line">        error_log   /usr/local/nginx/logs/www_ezf123_error.log;</span><br><span class="line">#首页配置</span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html/jspt/;</span><br><span class="line">            index  index_pay.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">#应用/jspt路径匹配配置</span><br><span class="line">        location /jspt/ &#123;</span><br><span class="line">        #URL重定向配置</span><br><span class="line">          if ( $request_uri ~ /jspt/payment/order-refund.action ) &#123;</span><br><span class="line">            proxy_pass http://jspt_pool;</span><br><span class="line">          &#125;</span><br><span class="line">          if ( $request_uri ~ /jspt/payment/orderRefund.action ) &#123;</span><br><span class="line">            proxy_pass http://jspt_pool;</span><br><span class="line">          &#125;</span><br><span class="line">          if ( $request_uri ~ /jspt/download/fileDownloadReq.action ) &#123;</span><br><span class="line">            proxy_pass http://jspt_pool;</span><br><span class="line">          &#125;</span><br><span class="line">          if ( $request_uri ~ /jspt/intomer/checkAccount.action ) &#123;</span><br><span class="line">            proxy_pass http://jspt_pool;</span><br><span class="line">          &#125;</span><br><span class="line">          if ( $request_uri ~ /jspt/refund/recv-back!recvupoprefback ) &#123;</span><br><span class="line">            proxy_pass http://jspt_pool;</span><br><span class="line">          &#125;</span><br><span class="line">          #引用nginx.conf中定义的清算平台负载组，将请求转发至组内服务器</span><br><span class="line">            proxy_pass http://jspt_pay_pool;</span><br><span class="line">            proxy_redirect    off;</span><br><span class="line">            #设置由后端的服务器获取客户端主机名或真实IP地址，以及代理者的真实IP地址</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header Host $http_host;</span><br><span class="line">            proxy_set_header X-Forwarded-Proto  $scheme;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        #40x、50x错误页自定义</span><br><span class="line">        error_page      404 401 404 405 406 407 408 409 410 411 412 413 414 415 416 417 /400.html;</span><br><span class="line">        error_page      500 501 502 503 504 505 /500.html;</span><br><span class="line">        error_page      403 /403.html;</span><br><span class="line"></span><br><span class="line">        location = /500.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">        location /RequestDenied&#123;</span><br><span class="line">               return 403;</span><br><span class="line">        &#125;</span><br><span class="line">        location = /400.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="6、NGINX双机热备"><a href="#6、NGINX双机热备" class="headerlink" title="6、NGINX双机热备"></a>6、NGINX双机热备</h2><h3 id="6-1、keepalived工作原理"><a href="#6-1、keepalived工作原理" class="headerlink" title="6.1、keepalived工作原理"></a>6.1、keepalived工作原理</h3><ul>
<li><strong>Keepalived是一个基于VRRP协议来实现的服务高可用方案，可以利用其来避免IP和主机单点故障，一般不会单独部署，主要与其它负载均衡技术（如lvs、haproxy、nginx）一起工作来达到集群的高可用，本文档基于Keepalived实现了Nginx服务高可用，其网络架构如下图：</strong><br><img src="http://static.zybuluo.com/a807257775/z92ijfzu8evex6ebajg85e5m/keepalive%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="keepalive架构图.png-9kB"></li>
</ul>
<hr>
<h3 id="6-2、安装keepalived"><a href="#6-2、安装keepalived" class="headerlink" title="6.2、安装keepalived"></a>6.2、安装keepalived</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># yum install -y openssl-devel</span><br><span class="line"># cd /usr/local/</span><br><span class="line"># wget http://www.keepalived.org/software/keepalived-1.3.5.tar.gz</span><br><span class="line"># tar -zvxf keepalived-1.3.5.tar.gz</span><br><span class="line"># cd keepalived-1.3.5</span><br><span class="line"># ./configure --prefix=/usr/local/keepalived</span><br><span class="line"># make &amp;&amp; make install     </span><br><span class="line">#cp /usr/local/keepalived-1.3.5/keepalived/etc/init.d/keepalived \</span><br><span class="line">/etc/rc.d/init.d/</span><br><span class="line"># cp  /usr/local/keepalived/etc/sysconfig/keepalived /etc/sysconfig/</span><br><span class="line"># mkdir /etc/keepalived/</span><br><span class="line"># cp /usr/local/keepalived/etc/keepalived/keepalived.conf  /etc/keepalived/</span><br><span class="line"># cp /usr/local/keepalived/sbin/keepalived  /usr/sbin/</span><br><span class="line"># chmod +x /etc/rc.d/init.d/keepalived      #添加执行权限</span><br><span class="line"># service keepalived start                   #启动</span><br><span class="line"># service keepalived stop                   #关闭</span><br><span class="line"># service keepalived restart                  #重启</span><br><span class="line"># service keepalived reload                  #重新载入配置</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="6-3、配置keepalived"><a href="#6-3、配置keepalived" class="headerlink" title="6.3、配置keepalived"></a>6.3、配置keepalived</h3><h4 id="6-3-1、修改主keepalived配置文件"><a href="#6-3-1、修改主keepalived配置文件" class="headerlink" title="6.3.1、修改主keepalived配置文件"></a>6.3.1、修改主keepalived配置文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim  /etc/keepalived/keepalived.conf </span><br><span class="line">#配置文件内容</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id Keepalived-MASTER</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line">    script &quot;killall -0 nginx&quot;      #服务探测，返回0说明服务是正常的</span><br><span class="line">    interval 10                    #每隔10秒探测一次</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;               #实例1</span><br><span class="line">    state MASTER                   #指定keepalived的角色，MASTER是主，BACKUP是备用</span><br><span class="line">    interface eth0                 #指定HA监测网络的接口</span><br><span class="line">    virtual_router_id 99           #虚拟路由标识，</span><br><span class="line">    priority 150                   #定义优先级，数字越大，优先级越高</span><br><span class="line">    nopreempt                      #开启非抢占模式</span><br><span class="line">    mcast_src_ip 192.168.1.189     #发送多播数据包时的源IP地址</span><br><span class="line">    advert_int 10                  #设定主与备之间同步检查的时间间隔，单位是秒</span><br><span class="line">    authentication &#123;               #设置验证类型和密码。主从必须一样</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass shkeepalived_41</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.41           #VRRP HA 虚拟地址 如果有多个VIP，继续换行填写</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;             #执行监控的服务</span><br><span class="line">      chk_nginx                #引用VRRP脚本，定期运行它们来改变优先级，引发主备切换。</span><br><span class="line">    &#125;</span><br><span class="line">    notify_master &quot;/etc/keepalived/notify.sh master&quot;  #变为master节点，执行脚本notify.sh</span><br><span class="line">    notify_backup &quot;/etc/keepalived/notify.sh backup&quot;  #变为backup节点，执行脚本notify.sh</span><br><span class="line">    notify_fault &quot;/etc/keepalived/notify.sh fault&quot;    #变为fault节点，执行脚本notify.sh</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="6-3-2、修改从keepalived配置文件"><a href="#6-3-2、修改从keepalived配置文件" class="headerlink" title="6.3.2、修改从keepalived配置文件"></a>6.3.2、修改从keepalived配置文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim  /etc/keepalived/keepalived.conf </span><br><span class="line">#从节点配置文件内容</span><br><span class="line">! Configuration File for keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">   router_id Keepalived-BACKUP</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_nginx &#123;</span><br><span class="line">    script &quot;killall -0 nginx&quot;        #服务探测，返回0说明服务是正常的</span><br><span class="line">    interval 10                      #每隔10秒探测一次</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;               #实例1</span><br><span class="line">    state BACKUP                   #指定keepalived的角色，MASTER是主，BACKUP是备用</span><br><span class="line">    interface eth0                 #指定HA监测网络的接口</span><br><span class="line">    virtual_router_id 99           #虚拟路由标识，</span><br><span class="line">    priority 100                   #定义优先级，数字越大，优先级越高</span><br><span class="line">    nopreempt                      #开启非抢占模式</span><br><span class="line">    mcast_src_ip 192.168.1.190     #发送多播数据包时的源IP地址</span><br><span class="line">    advert_int 10                  #设定主与备之间同步检查的时间间隔，单位是秒</span><br><span class="line">    authentication &#123;               #设置验证类型和密码。主从必须一样</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass shkeepalived_41</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.1.41         #VRRP HA 虚拟地址 如果有多个VIP，继续换行填写</span><br><span class="line">    &#125;</span><br><span class="line">    track_script &#123;             #执行监控的服务</span><br><span class="line">      chk_nginx                #引用VRRP脚本，定期运行它们来改变优先级，引发主备切换。</span><br><span class="line">    &#125;</span><br><span class="line">    notify_master &quot;/etc/keepalived/notify.sh master&quot;  #变为master节点，执行脚本notify.sh</span><br><span class="line">    notify_backup &quot;/etc/keepalived/notify.sh backup&quot;  #变为backup节点，执行脚本notify.sh</span><br><span class="line">    notify_fault &quot;/etc/keepalived/notify.sh fault&quot;    #变为fault节点，执行脚本notify.sh</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="6-4、配置keepalived主备日志文件"><a href="#6-4、配置keepalived主备日志文件" class="headerlink" title="6.4、配置keepalived主备日志文件"></a>6.4、配置keepalived主备日志文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#以下操作均在主备节点执行</span><br><span class="line"></span><br><span class="line">#编辑keeplived配置文件</span><br><span class="line">vim /etc/sysconfig/keepalived</span><br><span class="line">#启用keepalived的日志定义到rsyslog的local0</span><br><span class="line">KEEPALIVED_OPTIONS=&quot;-f /etc/keepalived/keepalived.conf  -D -S 0&quot;  </span><br><span class="line"></span><br><span class="line">#编辑keeplived服务器syslog配置文件</span><br><span class="line">vim  /etc/rsyslog.conf   </span><br><span class="line">local0.*          /var/log/keepalived/keepalived.log  #定义日志保存路径</span><br><span class="line"></span><br><span class="line">mkdir /var/log/keepalived      #创建keepalived的日志目录</span><br><span class="line">touch /var/log/keepalived/keepalived.log       #创建keepalived的日志文件       </span><br><span class="line">service rsyslog  reload</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="6-5、配置keepalived主备切换通知脚本"><a href="#6-5、配置keepalived主备切换通知脚本" class="headerlink" title="6.5、配置keepalived主备切换通知脚本"></a>6.5、配置keepalived主备切换通知脚本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#以下操作均在主备节点执行</span><br><span class="line"></span><br><span class="line">vim  /etc/keepalived/notify.sh</span><br><span class="line">#!/bin/bash</span><br><span class="line">case &quot;$1&quot; in                               #判断输入的参数</span><br><span class="line">    master)</span><br><span class="line">        /etc/rc.d/init.d/nginx restart     #若keepalived节点为master，重启nginx</span><br><span class="line">        echo &quot;master&quot; &gt; /tmp/notify        #输出master信息到zabbix监控文件中</span><br><span class="line">        exit 0</span><br><span class="line">    ;;</span><br><span class="line">    backup)</span><br><span class="line">        /etc/rc.d/init.d/nginx restart    #若keepalived节点为backup，重启nginx</span><br><span class="line">        echo &quot;backup&quot; &gt; /tmp/notify       #输出backup信息到zabbix监控文件中</span><br><span class="line">        exit 0</span><br><span class="line">    ;;</span><br><span class="line">    fault)</span><br><span class="line">        /etc/rc.d/init.d/nginx  stop      #若keepalived节点为fault，关闭nginx</span><br><span class="line">        echo &quot;fault&quot; &gt; /tmp/notify        #输出fault信息到zabbix监控文件中</span><br><span class="line">        exit 0</span><br><span class="line">    ;;</span><br><span class="line">    *)                                    #若输入为违规情况，输出使用方法</span><br><span class="line">        echo &apos;Usage: `basename $0` &#123;master|backup|fault&#125;&apos;</span><br><span class="line">echo &quot;unknown&quot; &gt; /tmp/notify              #输出funknown信息到zabbix监控文件中</span><br><span class="line">        exit 1</span><br><span class="line">    ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="6-6、验证结果"><a href="#6-6、验证结果" class="headerlink" title="6.6、验证结果"></a>6.6、验证结果</h3><h2 id><a href="#" class="headerlink" title></a><img src="http://static.zybuluo.com/a807257775/0qlcobbddmrp13etagp1n1js/image_1d8lct7731p50l3i1uif11cr3rnl.png" alt="image_1d8lct7731p50l3i1uif11cr3rnl.png-41.4kB"></h2><h2 id="7、NGINX目前状况"><a href="#7、NGINX目前状况" class="headerlink" title="7、NGINX目前状况"></a>7、NGINX目前状况</h2><h3 id="7-1、商业并购"><a href="#7-1、商业并购" class="headerlink" title="7.1、商业并购"></a>7.1、商业并购</h3><ul>
<li>3月11日，F5与NGINX 宣布了一项最终协议，根据该协议，F5将收购 NGINX 的所有已发行股票，总价值约为6.7 亿美元。</li>
<li>F5 是应用交付网络（ADN）领域的全球领先厂商，其解决方案有助于整合不同的技术，以便更好地控制基础架构，提高应用交付和数据管理能力，并使用户能够通过企业桌面系统和智能设备无缝、安全并更快速地接入应用。而 NGINX 最知名产品 Nginx 是互联网上最受欢迎的 Web 服务器之一，NGINX 提供一整套用于开发和交付现代应用的技术，同时它也是应用交付领域的开源领导者。</li>
</ul>
<p><img src="http://static.zybuluo.com/a807257775/pwjfl9t4wdbenqrlblpfv26f/F5%E5%90%88%E5%B9%B6NGINX.jpg" alt="F5合并NGINX.jpg-67.3kB"></p>
<ul>
<li><p><strong>被收购后 Nginx 会不会闭源？</strong></p>
<blockquote>
<p>1、微软收购了 GitHub，并免费开放私有仓库，微软用75亿美元收购了全球最大的社交编程及代码托管网站 GitHub。并承诺保持 GitHub 的独立运营，随后又做出免费开放私有仓库的决定。但也不是所有的收购，都能保证其原始的开源承诺<br>2、Oracle 收购了 MySQL，并更改了开源协议（GPL），MySQL在收购前一直使用 GPL 许可分发，而 GPL 许可是不可撤销的，这意味着至少被收购之前的最后一个 Release 可以无限制地免费使用（包括源代码），而且源代码可以被社区二次开发。这就是为什么，mysql现在有企业版和社区版的区别，就好像jdk和openjdk一样。所以NGINX未来被闭源的可能性是很低的，依然可能会像现在这样，出现nginx plus企业版和社区版，两条不同的分支</p>
</blockquote>
</li>
<li><p><strong>有没有 Nginx 的替代方案？</strong></p>
<blockquote>
<p>Tengine<br>  Tengine是由淘宝网发起的Web服务器项目。它在 Nginx 的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。<br>  从2011年12月开始，Tengine成为一个开源项目，Tengine团队在积极地开发和维护着它。Tengine团队的核心成员来自于淘宝、搜狗等互联网企业</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>NGINX文档</category>
      </categories>
      <tags>
        <tag>NGINX代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx+Naxsi模块使用方法</title>
    <url>/2019/05/06/Nginx-Naxsi%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Nginx-Naxsi模块使用方法"><a href="#Nginx-Naxsi模块使用方法" class="headerlink" title="Nginx+Naxsi模块使用方法"></a>Nginx+Naxsi模块使用方法</h1><h2 id="1、什么是Naxsi"><a href="#1、什么是Naxsi" class="headerlink" title="1、什么是Naxsi"></a>1、什么是Naxsi</h2><ul>
<li>Naxsi是一个开放源代码、高效、低维护规则的Nginx Web应用防火墙模块，Naxsi的主要目标是帮助人们加固Web应用程序，以抵御SQL注入、跨站脚本、跨域伪造请求、本地和远程文件等包含的漏洞。</li>
<li>Naxsi与其它WAF的区别是，它不靠后签名来检测和阻止攻击。它使用一个简单的模型，而不是试图发现已知的攻击，它在HTTP请求/参数检测意外的字符。</li>
<li>中文文档：<ul>
<li style="list-style: none"><input type="checkbox" checked> <a href="http://bluereader.org/article/32032789" target="_blank" rel="noopener">http://bluereader.org/article/32032789</a>(有高级使用方法)</li>
<li style="list-style: none"><input type="checkbox" checked> <a href="http://www.myhack58.com/Article/html/3/7/2013/40279_2.htm" target="_blank" rel="noopener">http://www.myhack58.com/Article/html/3/7/2013/40279_2.htm</a></li>
</ul>
</li>
<li>官方英文文档：<ul>
<li style="list-style: none"><input type="checkbox" checked> <a href="https://github.com/nbs-system/naxsi/wiki" target="_blank" rel="noopener">https://github.com/nbs-system/naxsi/wiki</a></li>
</ul>
</li>
</ul>
<h2 id="1、Naxsi规则文件生成与说明"><a href="#1、Naxsi规则文件生成与说明" class="headerlink" title="1、Naxsi规则文件生成与说明"></a>1、Naxsi规则文件生成与说明</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">###默认Naxsi规则文件路径：</span><br><span class="line">    naxsi-master\naxsi_config\naxsi_core.rules</span><br><span class="line"></span><br><span class="line">###创建Naxsi规则使用方法：</span><br><span class="line">    vim /usr/local/nginx/conf/my_naxsi.rules</span><br><span class="line">    #LearningMode; #Enables learning mode 若开启该模式，不会拦截任何请求</span><br><span class="line">    SecRulesEnabled;</span><br><span class="line">    #SecRulesDisabled;</span><br><span class="line"></span><br><span class="line">###拒绝URL地址指向</span><br><span class="line">    DeniedUrl &quot;/RequestDenied&quot;;</span><br><span class="line"></span><br><span class="line">###白名单</span><br><span class="line">    include &quot;/usr/local/nginx/conf/wl.conf&quot;;</span><br><span class="line"> </span><br><span class="line">###check rules（满足得分项及拦截）</span><br><span class="line">    CheckRule &quot;$SQL &gt;= 8&quot; BLOCK;</span><br><span class="line">    CheckRule &quot;$RFI &gt;= 8&quot; BLOCK;</span><br><span class="line">    CheckRule &quot;$TRAVERSAL &gt;= 4&quot; BLOCK;</span><br><span class="line">    CheckRule &quot;$EVADE &gt;= 4&quot; BLOCK;</span><br><span class="line">    CheckRule &quot;$XSS &gt;= 8&quot; BLOCK;</span><br></pre></td></tr></table></figure>
<h2 id="2、NGINX配置文件的引用"><a href="#2、NGINX配置文件的引用" class="headerlink" title="2、NGINX配置文件的引用"></a>2、NGINX配置文件的引用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#针对支持模块化的nginx配置</span><br><span class="line">load_module /../modules/ngx_http_naxsi_module.so;</span><br><span class="line">events &#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line"> include     	/usr/local/nginx/conf/naxsi_core.rules;</span><br><span class="line"> ...</span><br><span class="line"> server &#123;</span><br><span class="line">  listen ...;</span><br><span class="line">  server_name  ...;</span><br><span class="line">  location / &#123;</span><br><span class="line">	include		/usr/local/nginx/conf/my_naxsi.rules	</span><br><span class="line">   #naxsi logs goes there</span><br><span class="line">   error_log /.../foo.log;</span><br><span class="line">   ...</span><br><span class="line">  &#125;</span><br><span class="line">  #This is where the blocked requests are going</span><br><span class="line">  location = /RequestDenied &#123;</span><br><span class="line">  return 418;</span><br><span class="line">  	&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3、Naxsi支持的变量"><a href="#3、Naxsi支持的变量" class="headerlink" title="3、Naxsi支持的变量"></a>3、Naxsi支持的变量</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">URL   </span><br><span class="line">ARGS get参数值</span><br><span class="line">BODY post参数值</span><br><span class="line">$HEADERS_VAR:Cookie  http请求头</span><br><span class="line">FILE_EXT  multipart POST文件上传名</span><br></pre></td></tr></table></figure>
<h2 id="4、Naxsi支持的操作符"><a href="#4、Naxsi支持的操作符" class="headerlink" title="4、Naxsi支持的操作符:"></a>4、Naxsi支持的操作符:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">str 字符串 </span><br><span class="line">rx  正则匹配</span><br><span class="line">均大小写不敏感</span><br></pre></td></tr></table></figure>
<h2 id="5、防护规则：naxsi-core-rules的配置与内容"><a href="#5、防护规则：naxsi-core-rules的配置与内容" class="headerlink" title="5、防护规则：naxsi_core.rules的配置与内容"></a>5、防护规则：naxsi_core.rules的配置与内容</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	MainRule &quot;rx:select|union|update|delete|insert|table|from|ascii|hex|unhex|drop&quot; &quot;msg:sql keywords&quot; &quot;mz:BODY|URL|ARGS|$HEADERS_VAR:Cookie&quot; &quot;s:$SQL:4&quot; id:1000;</span><br><span class="line">	MainRule &quot;str:\&quot;&quot; &quot;msg:double quote&quot; &quot;mz:BODY|URL|ARGS|$HEADERS_VAR:Cookie&quot; &quot;s:$SQL:8,$XSS:8&quot; id:1001;</span><br><span class="line">    MainRule negative &quot;rx:multipart/form-data|application/x-www-form-urlencoded&quot; &quot;msg:Content is neither mulipart/x-www-form..&quot; &quot;mz:$HEADERS_VAR:Content-type&quot; &quot;s:$EVADE:4&quot; id:1402;</span><br><span class="line"></span><br><span class="line">指令说明：</span><br><span class="line">	rx: 正则匹配</span><br><span class="line">	str: 字符串匹配</span><br><span class="line">	msg: 规则含义</span><br><span class="line">	mz: 匹配的HTTP协议部分</span><br><span class="line">	s: 规则的类型与相应的评分</span><br><span class="line">	id: 规则id</span><br></pre></td></tr></table></figure>
<h2 id="6、规则组成"><a href="#6、规则组成" class="headerlink" title="6、规则组成"></a>6、规则组成</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1) 内部规则1-999 协议解析中的异常问题</span><br><span class="line">(2) SQL注入规则1000-1099</span><br><span class="line">(3) OBVIOUS RFI规则1100-1100</span><br><span class="line">(4) 目录遍历漏洞规则1200-1299</span><br><span class="line">(5) XSS漏洞规则1300-1399</span><br><span class="line">(6) Evading tricks规则1400-1500</span><br><span class="line">(7) 文件上传1500-1600</span><br></pre></td></tr></table></figure>
<h2 id="7、规则实例"><a href="#7、规则实例" class="headerlink" title="7、规则实例"></a>7、规则实例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1) get参数</span><br><span class="line"> ARGS</span><br><span class="line"> $ARGS_VAR （字符串匹配）</span><br><span class="line">BasicRule wl:1100 &quot;mz:$ARGS_VAR:redirect_to&quot;;</span><br><span class="line"> $ARGS_VAR_X （正则匹配）</span><br><span class="line"></span><br><span class="line">(2) post参数</span><br><span class="line">BODY</span><br><span class="line">$BODY_VAR</span><br><span class="line">BasicRule wl:1000 &quot;mz:$BODY_VAR:save&quot;;</span><br><span class="line">$BODY_VAR_X</span><br><span class="line"></span><br><span class="line">(3) 请求头</span><br><span class="line">HEADERS</span><br><span class="line">HEADERS_VAR</span><br><span class="line">BasicRule wl:1402 &quot;mz:$HEADERS_VAR:content-type&quot;;</span><br><span class="line">HEADERS_VAR_X</span><br><span class="line"></span><br><span class="line">(4) URL</span><br><span class="line">URL    （uri &quot;？&quot;前面的部分）</span><br><span class="line">BasicRule wl:1000 &quot;mz:URL|$URL:/wp-admin/update.php&quot;;</span><br><span class="line">$URL_X</span><br><span class="line"></span><br><span class="line">(5) 上传文件名</span><br><span class="line">FILE_EXT 上传文件名</span><br></pre></td></tr></table></figure>
<h2 id="8、开源白名单规则"><a href="#8、开源白名单规则" class="headerlink" title="8、开源白名单规则"></a>8、开源白名单规则</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">白名单规则集规则集-wordpress/DokuWiki/ruTorrent</span><br><span class="line">git clone https://github.com/nbs-system/naxsi-rules.git</span><br></pre></td></tr></table></figure>
<h2 id="9、白名单实例："><a href="#9、白名单实例：" class="headerlink" title="9、白名单实例："></a>9、白名单实例：</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">###白名单配置文件：</span><br><span class="line">/usr/local/nginx/conf/wl.conf</span><br><span class="line"></span><br><span class="line">BasicRule wl:0 &quot;mz:|URL&quot;;</span><br><span class="line">BasicRule wl:0 &quot;mz:|HEADERS&quot;;</span><br><span class="line">BasicRule wl:1000,1005,1010,1011,1015,1310,1315 &quot;mz:|HEADERS&quot;;</span><br><span class="line">BasicRule wl:0 &quot;mz:|BODY|NAME&quot;;</span><br><span class="line">BasicRule wl:0 &quot;mz:|BODY&quot;;</span><br><span class="line">BasicRule wl:11 &quot;mz:|$URL:/jfpt_common/ws/webServiceManage|BODY&quot;;</span><br><span class="line">BasicRule wl:16 &quot;mz:|$URL:/cjpt_xj/UrlLoginServlet|BODY&quot;;</span><br><span class="line">BasicRule wl:0 &quot;mz:|$URL:/ccbms/ajax/validator.php|ARGS&quot;;</span><br><span class="line">BasicRule wl:1005 &quot;mz:|$URL:/jfpt_common/jfsetting/commanage-orders!print.action|ARGS&quot;;</span><br><span class="line">BasicRule wl:1000,1005 &quot;mz:|$URL:/jfpt_common/jfsetting/commanage-orders!batchPrint.action|ARGS|NAME&quot;;</span><br></pre></td></tr></table></figure>
<h2 id="10、NGINX错误日志解析：nginx-error-log"><a href="#10、NGINX错误日志解析：nginx-error-log" class="headerlink" title="10、NGINX错误日志解析：nginx_error.log"></a>10、NGINX错误日志解析：nginx_error.log</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">id0=1008 </span><br><span class="line">MainRule &quot;str:;&quot; &quot;msg:; in stuff&quot; &quot;mz:BODY|URL|ARGS&quot; &quot;s:$SQL:4,$XSS:8&quot; id:1008;</span><br><span class="line"></span><br><span class="line">id1=1010</span><br><span class="line">MainRule &quot;str:(&quot; &quot;msg:parenthesis, probable sql/xss&quot; &quot;mz:ARGS|URL|BODY|$HEADERS_VAR:Cookie&quot; &quot;s:$SQL:4,$XSS:8&quot; id:1010;</span><br><span class="line"></span><br><span class="line">id3=1302 （命中了两次）</span><br><span class="line">MainRule &quot;str:&lt;&quot; &quot;msg:html open tag&quot; &quot;mz:ARGS|URL|BODY|$HEADERS_VAR:Cookie&quot; &quot;s:$XSS:8&quot; id:1302;</span><br><span class="line"></span><br><span class="line">id4=1303（命中了两次）</span><br><span class="line">MainRule &quot;str:&gt;&quot; &quot;msg:html close tag&quot; &quot;mz:ARGS|URL|BODY|$HEADERS_VAR:Cookie&quot; &quot;s:$XSS:8&quot; id:1303;</span><br><span class="line"></span><br><span class="line">SQL得分为12=4+4+4</span><br><span class="line">XSS得分为56=8+8+8+8*2+8*2</span><br></pre></td></tr></table></figure>
<h2 id="11、注意事项"><a href="#11、注意事项" class="headerlink" title="11、注意事项"></a>11、注意事项</h2><ul>
<li>Naxis的拦截机制是满足预设分值才进行阻断，所以 当触发了某条规则之后（naxsi_core.rules），就会进行逐步加分，当满足（my_naxsi.rules）中的CheckRule的分值就会触发拦截，详见日志，经验总结：“可以针对个别域名，创建多个规则，采用include的方式进行配置，规则的触发和分数阈值有很大关系，无法拦截或者出现多次拦截匹配等，都会加分，触发阈值就拦截”<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1)分数阈值</span><br><span class="line">CheckRule &quot;$SQL &gt;= 8&quot; BLOCK;</span><br><span class="line">(2)加分项</span><br><span class="line">MainRule &quot;rx:\band\b|\bor\b&quot; &quot;msg:SQL, probable sql/xss&quot; &quot;mz:BODY&quot; &quot;s:$SQL:8&quot; id:1009;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>NGINX文档</category>
      </categories>
      <tags>
        <tag>NGINX代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx会话保持模块详解-sticky</title>
    <url>/2019/10/28/Nginx%E4%BC%9A%E8%AF%9D%E4%BF%9D%E6%8C%81%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3-sticky/</url>
    <content><![CDATA[<h1 id="Nginx会话保持模块详解-sticky"><a href="#Nginx会话保持模块详解-sticky" class="headerlink" title="Nginx会话保持模块详解-sticky"></a>Nginx会话保持模块详解-sticky</h1><h2 id="1、模块简介"><a href="#1、模块简介" class="headerlink" title="1、模块简介"></a>1、模块简介</h2><blockquote>
<p>官方REDEME：A nginx module to add a sticky cookie to be always forwarded to the same upstream server.<br>When dealing with several backend servers, it’s sometimes useful that one client (browser) is always served by the same backend server (for session persistance for example).<br>Using a persistance by IP (with the ip_hash upstream module) is maybe not a good idea because there could be situations where a lot of different browsers are coming with the same IP address (behind proxies)and the load balancing system won’t be fair.</p>
</blockquote>
<ul>
<li>翻译&amp;个人理解：这是一个会话保持模块，用于在浏览器保持cookie，将用户请求始终转发到一组服务器，当有多个后端服务器时，列如一下登录页面，那么会话持久性就很有必要，但cookie粘贴本身存在安全问题，session的最终解决方案，建议在后端进行实现.</li>
</ul>
<h3 id="1-1、模块下载地址"><a href="#1-1、模块下载地址" class="headerlink" title="1.1、模块下载地址"></a>1.1、模块下载地址</h3><blockquote>
<p><a href="https://github.com/bymaximus/nginx-sticky-module-ng" target="_blank" rel="noopener">https://github.com/bymaximus/nginx-sticky-module-ng</a></p>
</blockquote>
<ul>
<li>注意：目前仅是在<code>nginx-1.10.3</code>下测试可以安装，其他版本请自行测试</li>
</ul>
<h2 id="2、模块的安装"><a href="#2、模块的安装" class="headerlink" title="2、模块的安装"></a>2、模块的安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test0002 nginx-1.10.3]# ./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_stub_status_module --with-http_ssl_module --without-mail_pop3_module --without-mail_smtp_module --without-mail_imap_module --add-module=/soft/ngx_http_proxy_connect_module-0.0.1/ --add-module=/soft/nginx-sticky-module-ng-1.2.6/</span><br><span class="line">[root@test0002 nginx-1.10.3]# make</span><br><span class="line">[root@test0002 nginx-1.10.3]# make install</span><br><span class="line">[root@test0002 sbin]# ./nginx -V</span><br><span class="line">nginx version: nginx/1.10.3</span><br><span class="line">built by gcc 4.4.7 20120313 (Red Hat 4.4.7-23) (GCC) </span><br><span class="line">built with OpenSSL 1.0.1e-fips 11 Feb 2013</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --user=www --group=www --with-http_stub_status_module --with-http_ssl_module --without-mail_pop3_module --without-mail_smtp_module --without-mail_imap_module --add-module=/soft/ngx_http_proxy_connect_module-0.0.1/ --add-module=/soft/nginx-sticky-module-ng-1.2.6/</span><br></pre></td></tr></table></figure>
<h2 id="3、配置语法"><a href="#3、配置语法" class="headerlink" title="3、配置语法"></a>3、配置语法</h2><h3 id="3-1、upstream配置方法"><a href="#3-1、upstream配置方法" class="headerlink" title="3.1、upstream配置方法"></a>3.1、upstream配置方法</h3><blockquote>
<p>sticky <code>[name=route]</code> <code>[domain=.foo.bar]</code> <code>[path=/]</code> <code>[expires=1h]</code> <code>[hash=index|md5|sha1]</code> <code>[no_fallback]</code> <code>[secure]</code> <code>[httponly]</code>;</p>
</blockquote>
<ul>
<li><code>name</code>：设置用来记录会话的cookie名称；</li>
<li><code>domain</code>：哪些域名下可以使用这个cookie；</li>
<li><code>path</code>：设置cookie作用的URL路径，默认根目录；</li>
<li><code>hash=index|md5|sha1</code>：设置cookie中服务器的标识是用明文还是使用md5值，默认使用md5</li>
<li><code>expires</code>：设置cookie的生存期，默认不设置，浏览器关闭即失效，需要是大于1秒的值；</li>
<li><code>no_fallback</code>：如果cookie对应的服务器宕机了，那么将会返回502报错，不建议设置；</li>
<li><code>secure</code>：设置启用安全的cookie，需要HTTPS支持；</li>
<li><code>httponly</code>：允许cookie不通过JS泄漏；</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">upstream lisir_cluster&#123;</span><br><span class="line">  sticky;</span><br><span class="line">  server 127.0.0.1:9000;</span><br><span class="line">  server 127.0.0.1:9001;</span><br><span class="line">  server 127.0.0.1:9002;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>NGINX文档</category>
      </categories>
      <tags>
        <tag>NGINX代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx-rewrite模块详解与Location配置总结</title>
    <url>/2019/06/20/Nginx-rewrite%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3%E4%B8%8ELocation%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="Nginx-rewrite模块详解与Location配置总结"><a href="#Nginx-rewrite模块详解与Location配置总结" class="headerlink" title="Nginx-rewrite模块详解与Location配置总结"></a>Nginx-rewrite模块详解与Location配置总结</h1><h2 id="一、rewrite模块介绍"><a href="#一、rewrite模块介绍" class="headerlink" title="一、rewrite模块介绍"></a>一、rewrite模块介绍</h2><ul>
<li>官方README<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The ngx_http_rewrite_module module is used to change request URI using PCRE regular expressions, return redirects, and conditionally select configurations.</span><br><span class="line">#将用户请求的URI基于PCRE regex所描述的模式进行检查，而后完成重定向替换</span><br><span class="line">The break, if, return, rewrite, and set directives are processed in the following order:</span><br><span class="line">#break、if、return、rewrite和set指令的处理顺序如下：</span><br><span class="line">	the directives of this module specified on the server level are executed sequentially;</span><br><span class="line">	#该模块在server段中以指定的指令顺序执行；</span><br><span class="line">	repeatedly:</span><br><span class="line">		a location is searched based on a request URI;</span><br><span class="line">		#根据请求URL搜索location配置；</span><br><span class="line">		the directives of this module specified inside the found location are executed sequentially;</span><br><span class="line">		#在指定的location中按照顺序执行模块指令；</span><br><span class="line">		the loop is repeated if a request URI was rewritten, but not more than 10 times.</span><br><span class="line">		#如果重写请求URI，则重复循环，但不超过10次；</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="二、rewrite模块指令"><a href="#二、rewrite模块指令" class="headerlink" title="二、rewrite模块指令"></a>二、rewrite模块指令</h2><h3 id="2-1、break指令"><a href="#2-1、break指令" class="headerlink" title="2.1、break指令"></a>2.1、break指令</h3><ul>
<li>语法: <code>break</code></li>
<li>默认值: <code>none</code></li>
<li>作用域: <code>server</code>, <code>location</code>, <code>if</code></li>
<li>功能：完成当前设置的重写规则，停止执行其他的重写规则</li>
</ul>
<p>Example：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if ($slow) &#123;</span><br><span class="line">    limit_rate 10k;</span><br><span class="line">    break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-2、if指令"><a href="#2-2、if指令" class="headerlink" title="2.2、if指令"></a>2.2、if指令</h3><ul>
<li>语法: <code>if (condition) { ... }</code></li>
<li>默认值：<code>none</code></li>
<li>作用域：<code>server, location</code></li>
<li>功能：对给定的条件condition进行判断。如果为真，大括号内的rewrite指令将被执行</li>
<li>if条件(conditon)可以是如下任何内容:</li>
<li style="list-style: none"><input type="checkbox" checked> 一个变量名；false如果这个变量是空字符串或者以0开始的字符串；</li>
<li style="list-style: none"><input type="checkbox" checked> 使用<code>=</code> ,<code>!=</code> 比较的一个变量和字符串</li>
<li style="list-style: none"><input type="checkbox" checked> 是用<code>~</code>， <code>~*</code>与正则表达式匹配的变量，如果这个正则表达式中包含}，;则整个表达式需要用” 或’ 包围</li>
<li style="list-style: none"><input type="checkbox" checked> 使用<code>-f</code> ，<code>!-f</code> 检查一个文件是否存在</li>
<li style="list-style: none"><input type="checkbox" checked> 使用<code>-d</code>, <code>!-d</code> 检查一个目录是否存在</li>
<li style="list-style: none"><input type="checkbox" checked> 使用<code>-e</code> ，<code>!-e</code> 检查一个文件、目录、符号链接是否存在</li>
<li style="list-style: none"><input type="checkbox" checked> 使用<code>-x</code> ， <code>!-x</code> 检查一个文件是否可执行</li>
</ul>
<p>Example One：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if ($http_user_agent ~ MSIE) &#123;</span><br><span class="line">    rewrite ^(.*)$ /msie/$1 break;</span><br><span class="line">&#125;</span><br><span class="line">if ($http_cookie ~* &quot;id=([^;]+)(?:;|$)&quot;) &#123;</span><br><span class="line">    set $id $1;</span><br><span class="line">&#125;</span><br><span class="line">if ($request_method = POST) &#123;</span><br><span class="line">    return 405;</span><br><span class="line">&#125;</span><br><span class="line">if ($slow) &#123;</span><br><span class="line">    limit_rate 10k;</span><br><span class="line">&#125;</span><br><span class="line">if ($invalid_referer) &#123;</span><br><span class="line">    return 403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-3、return指令"><a href="#2-3、return指令" class="headerlink" title="2.3、return指令"></a>2.3、return指令</h3><ul>
<li>语法: <code>return code [text];</code> <code>return code URL;</code> <code>return URL;</code></li>
<li>默认值: <code>none</code></li>
<li>作用域: <code>server</code>, <code>location</code>, <code>if</code></li>
<li>功能：停止处理并返回指定状态码(code)给客户端。非标准状态码444表示关闭连接且不给客户端发响应头。从0.8.42版本起，return支持响应URL重定向(对于301，302，303，307），或者文本响应(对于其他状态码).对于文本或者URL重定向可以包含变量</li>
</ul>
<h3 id="2-4、rewrite指令"><a href="#2-4、rewrite指令" class="headerlink" title="2.4、rewrite指令"></a>2.4、rewrite指令</h3><ul>
<li>语法: <code>rewrite regex replacement [flag];</code></li>
<li>默认值: <code>none</code></li>
<li>作用域: <code>server</code>, <code>location</code>, <code>if</code></li>
<li>功能：按照相关的正则表达式与字符串修改URI，指令按照在配置文件中出现的顺序执行。可以在重写指令后面添加标记。<strong>注意</strong>：如果替换的字符串以http://开头，请求将被重定向，并且不再执行多余的rewrite指令。</li>
<li>尾部的标记(flag)可以是以下的值：</li>
<li style="list-style: none"><input type="checkbox" checked> last - 停止处理重写模块指令，之后搜索location与更改后的URI匹配</li>
<li style="list-style: none"><input type="checkbox" checked> break - 完成重写指令</li>
<li style="list-style: none"><input type="checkbox" checked> redirect - 返回302临时重定向，如果替换字段用http://开头则被使用</li>
<li style="list-style: none"><input type="checkbox" checked> permanent - 返回301永久重定向</li>
</ul>
<p>Example One：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#如果这些rewrite放到 “/download/” location如下所示, 那么应使用break而不是last , 使用last将循环10次匹配，然后返回 500错误</span><br><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line">    rewrite ^(/download/.*)/media/(.*)\..*$ $1/mp3/$2.mp3 last;</span><br><span class="line">    rewrite ^(/download/.*)/audio/(.*)\..*$ $1/mp3/$2.ra  last;</span><br><span class="line">    return  403;</span><br><span class="line">    ...</span><br><span class="line">&#125;    </span><br><span class="line">location /download/ &#123;</span><br><span class="line">    rewrite ^(/download/.*)/media/(.*)\..*$ $1/mp3/$2.mp3 break;</span><br><span class="line">    rewrite ^(/download/.*)/audio/(.*)\..*$ $1/mp3/$2.ra  break;</span><br><span class="line">    return  403;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#对于重写后的URL（replacement）包含原请求的请求参数，原URL的?后的内容。如果不想带原请求的参数 ，可以在replacement后加一个问号。如下，我们加了一个自定义的参数user=$1,然后在结尾处放了一个问号?,把原请的参数去掉</span><br><span class="line">rewrite ^/users/(.*)$ /show?user=$1? last;</span><br><span class="line">#如果正则表达regex式中包含 “&#125;” 或 “;”, 那么整个表达式需要用双引号或单引号包围</span><br></pre></td></tr></table></figure>
<h3 id="2-5、rewrite-log指令"><a href="#2-5、rewrite-log指令" class="headerlink" title="2.5、rewrite_log指令"></a>2.5、rewrite_log指令</h3><ul>
<li>语法: <code>rewrite_log on | off;</code></li>
<li>默认值: <code>rewrite_log off;</code></li>
<li>作用域: <code>http</code>, <code>server</code>, <code>location</code>, <code>if</code></li>
<li>功能：开启或关闭以notice级别打印rewrite处理日志到error log文件。</li>
</ul>
<p>Example One：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#打开rewrite_log on</span><br><span class="line">#把error log的级别调整到 notice</span><br><span class="line">rewrite_log on;</span><br><span class="line">error_log logs/xxx.error.log notice;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-6、set指令"><a href="#2-6、set指令" class="headerlink" title="2.6、set指令"></a>2.6、set指令</h3><ul>
<li>语法: <code>set $variable value;</code></li>
<li>默认值: <code>none</code></li>
<li>作用域: <code>server</code>, <code>location</code>, <code>if</code></li>
<li>功能：定义一个变量并赋值，值可以是文本，变量或者文本变量混合体。</li>
</ul>
<p>Example One:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#nginx日志打印cookie信息，在vhosts，server段中配置如下：</span><br><span class="line">set $jvm_cookie &quot;&quot;;</span><br><span class="line">if ($http_cookie ~* &quot;JSESSIONID=([[:alnum:]]*\.[[:alnum:]]*-[[:alnum:]]*)&quot;) &#123;</span><br><span class="line">  set $jvm_cookie $1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-7、uninitialized-variable-warn指令"><a href="#2-7、uninitialized-variable-warn指令" class="headerlink" title="2.7、uninitialized_variable_warn指令"></a>2.7、uninitialized_variable_warn指令</h3><ul>
<li>语法: <code>uninitialized_variable_warn on | off;</code></li>
<li>默认值: <code>uninitialized_variable_warn on;</code></li>
<li>作用域: <code>http</code>, <code>server</code>, <code>location</code>, <code>if</code></li>
<li>功能：控制是否记录未初始化变量的警告信息</li>
</ul>
<h2 id="三、location配置"><a href="#三、location配置" class="headerlink" title="三、location配置"></a>三、location配置</h2><h3 id="3-1、location正则表达式匹配"><a href="#3-1、location正则表达式匹配" class="headerlink" title="3.1、location正则表达式匹配"></a>3.1、location正则表达式匹配</h3><blockquote>
<p><strong>匹配顺序</strong>：<br>(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ~,~* 正则顺序) &gt; (location 部分起始路径) &gt; (/)</p>
</blockquote>
<ul>
<li style="list-style: none"><input type="checkbox" checked> <code>~</code> 为区分大小写匹配</li>
<li style="list-style: none"><input type="checkbox" checked> <code>~*</code> 为不区分大小写匹配</li>
<li style="list-style: none"><input type="checkbox" checked> <code>!~</code> 和 <code>!~*</code> 分别为区分大小写不匹配及不区分大小写不匹配</li>
<li style="list-style: none"><input type="checkbox" checked> <code>^</code> 以什么开头的匹配</li>
<li style="list-style: none"><input type="checkbox" checked> <code>$</code> 以什么结尾的匹配</li>
<li style="list-style: none"><input type="checkbox" checked> <code>\</code> 转义字符。可以转. * ?等</li>
<li style="list-style: none"><input type="checkbox" checked> <code>*</code> 代表任意字符</li>
<li style="list-style: none"><input type="checkbox" checked> <code>=</code> 开头表示精确匹配</li>
<li style="list-style: none"><input type="checkbox" checked> <code>^~</code> 开头表示uri以某个常规字符串开头，不是正则匹配</li>
<li style="list-style: none"><input type="checkbox" checked> <code>/</code> 通用匹配, 如果没有其它匹配,任何请求都会匹配到</li>
</ul>
<h3 id="3-2、location生产配置建议"><a href="#3-2、location生产配置建议" class="headerlink" title="3.2、location生产配置建议"></a>3.2、location生产配置建议</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">所以实际使用中，个人觉得至少有三个匹配规则定义，如下：</span><br><span class="line">#直接匹配网站根，通过域名访问网站首页比较频繁，使用这个会加速处理，官网如是说。</span><br><span class="line">#这里是直接转发给后端应用服务器了，也可以是一个静态首页</span><br><span class="line"># 第一个必选规则</span><br><span class="line">location = / &#123;</span><br><span class="line">    proxy_pass http://tomcat:8080/index</span><br><span class="line">&#125;</span><br><span class="line"># 第二个必选规则是处理静态文件请求，这是nginx作为http服务器的强项</span><br><span class="line"># 有两种配置模式，目录匹配或后缀匹配,任选其一或搭配使用</span><br><span class="line">location ^~ /static/ &#123;</span><br><span class="line">    root /webroot/static/;</span><br><span class="line">&#125;</span><br><span class="line">location ~* \.(gif|jpg|jpeg|png|css|js|ico)$ &#123;</span><br><span class="line">    root /webroot/res/;</span><br><span class="line">&#125;</span><br><span class="line">#第三个规则就是通用规则，用来转发动态请求到后端应用服务器</span><br><span class="line">#非静态文件请求就默认是动态请求，自己根据实际把握</span><br><span class="line">#毕竟目前的一些框架的流行，带.php,.jsp后缀的情况很少了</span><br><span class="line">location / &#123;</span><br><span class="line">    proxy_pass http://tomcat:8080/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="四、rewrite与flag标记配置"><a href="#四、rewrite与flag标记配置" class="headerlink" title="四、rewrite与flag标记配置"></a>四、rewrite与flag标记配置</h2><ul>
<li>rewrite功能就是，使用nginx提供的全局变量或自己设置的变量，结合正则表达式和标志位实现url重写以及重定向。rewrite只能放在server{},location{},if{}中，并且只能对域名后边的除去传递的参数外的字符串起作用，例如 <a href="http://seanlook.com/a/we/index.php?id=1&amp;u=str" target="_blank" rel="noopener">http://seanlook.com/a/we/index.php?id=1&amp;u=str</a> 只对/a/we/index.php重写。语法rewrite regex replacement [flag];</li>
<li>如果相对域名或参数字符串起作用，可以使用全局变量匹配，也可以使用proxy_pass反向代理。</li>
<li>表明看rewrite和location功能有点像，都能实现跳转，主要区别在于rewrite是在同一域名内更改获取资源的路径，而location是对一类路径做控制访问或反向代理，可以proxy_pass到其他机器。很多情况下rewrite也会写在location里，</li>
<li>它们的执行顺序是：<br>1、执行server块的rewrite指令<br>2、执行location匹配<br>3、执行选定的location中的rewrite指令<br>4、如果其中某步URI被重写，则重新循环执行1-3，直到找到真实存在的文件；循环超过10次，则返回500 Internal Server Error错误。</li>
</ul>
<blockquote>
<p>提示：因为301和302不能简单的只返回状态码，还必须有重定向的URL，这就是return指令无法返回301,302的原因了。这里 last 和 break 区别有点难以理解：<br>last一般写在server和if中，而break一般使用在location中<br>last不终止重写后的url匹配，即新的url会再从server走一遍匹配流程，而break终止重写后的匹配<br>break和last都能组织继续执行后面的rewrite指令</p>
</blockquote>
<p>Example One：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#对/images/bla_500x400.jpg的文件请求，重写到/resizer/bla.jpg?width=500&amp;height=400地址，并会继续尝试匹配location</span><br><span class="line">rewrite ^/images/(.*)_(\d+)x(\d+)\.(png|jpg|gif)$ /resizer/$1.$4?width=$2&amp;height=$3? last;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">    # 重写规则信息</span><br><span class="line">    error_log logs/rewrite.log notice; </span><br><span class="line">    # 注意这里要用‘’单引号引起来，避免&#123;&#125;</span><br><span class="line">    rewrite &apos;^/images/([a-z]&#123;2&#125;)/([a-z0-9]&#123;5&#125;)/(.*)\.(png|jpg|gif)$&apos; /data?file=$3.$4;</span><br><span class="line">    # 注意不能在上面这条规则后面加上“last”参数，否则下面的set指令不会执行</span><br><span class="line">    set $image_file $3;</span><br><span class="line">    set $image_type $4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Example Two：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    # 定义image日志格式</span><br><span class="line">    log_format imagelog &apos;[$time_local] &apos; $image_file &apos; &apos; $image_type &apos; &apos; $body_bytes_sent &apos; &apos; $status;</span><br><span class="line">    # 开启重写日志</span><br><span class="line">    rewrite_log on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        root /home/www;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                # 重写规则信息</span><br><span class="line">                error_log logs/rewrite.log notice; </span><br><span class="line">                # 注意这里要用‘’单引号引起来，避免&#123;&#125;</span><br><span class="line">                rewrite &apos;^/images/([a-z]&#123;2&#125;)/([a-z0-9]&#123;5&#125;)/(.*)\.(png|jpg|gif)$&apos; /data?file=$3.$4;</span><br><span class="line">                # 注意不能在上面这条规则后面加上“last”参数，否则下面的set指令不会执行</span><br><span class="line">                set $image_file $3;</span><br><span class="line">                set $image_type $4;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /data &#123;</span><br><span class="line">                # 指定针对图片的日志格式，来分析图片类型和大小</span><br><span class="line">                access_log logs/images.log mian;</span><br><span class="line">                root /data/images;</span><br><span class="line">                # 应用前面定义的变量。判断首先文件在不在，不在再判断目录在不在，如果还不在就跳转到最后一个url里</span><br><span class="line">                try_files /$arg_file /image404.html;</span><br><span class="line">        &#125;</span><br><span class="line">        location = /image404.html &#123;</span><br><span class="line">                # 图片不存在返回特定的信息</span><br><span class="line">                return 404 &quot;image not found\n&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="五、if指令与全局变量配置"><a href="#五、if指令与全局变量配置" class="headerlink" title="五、if指令与全局变量配置"></a>五、if指令与全局变量配置</h2><ul>
<li>if判断指令，语法为if(condition){…}，对给定的条件condition进行判断。如果为真，大括号内的rewrite指令将被执行。</li>
<li>if条件(conditon)可以是如下任何内容：</li>
<li style="list-style: none"><input type="checkbox" checked> 当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false</li>
<li style="list-style: none"><input type="checkbox" checked> 直接比较变量和内容时，使用=或!=</li>
<li style="list-style: none"><input type="checkbox" checked> <code>~</code>正则表达式匹配，<code>~*</code>不区分大小写的匹配，!~区分大小写的不匹配</li>
<li style="list-style: none"><input type="checkbox" checked> <code>-f</code>和<code>!-f</code>用来判断是否存在文件</li>
<li style="list-style: none"><input type="checkbox" checked> <code>-d</code>和<code>!-d</code>用来判断是否存在目录</li>
<li style="list-style: none"><input type="checkbox" checked> <code>-e</code>和<code>!-e</code>用来判断是否存在文件或目录</li>
<li style="list-style: none"><input type="checkbox" checked> <code>-x</code>和<code>!-x</code>用来判断文件是否可执行</li>
</ul>
<blockquote>
<p>提示：可以利用全局或自定义变量进行if，请移步<a href="https://www.lisirlife.com/2019/05/10/Nginx%E5%86%85%E7%BD%AE%E5%8F%98%E9%87%8F%E9%80%9F%E6%9F%A5%E8%A1%A8/" target="_blank" rel="noopener">NGINX内置变量速查表</a>。</p>
</blockquote>
<p>Example One：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if ($http_user_agent ~ MSIE) &#123;</span><br><span class="line">    rewrite ^(.*)$ /msie/$1 break;</span><br><span class="line">&#125; //如果UA包含&quot;MSIE&quot;，rewrite请求到/msid/目录下</span><br><span class="line"></span><br><span class="line">if ($http_cookie ~* &quot;id=([^;]+)(?:;|$)&quot;) &#123;</span><br><span class="line">    set $id $1;</span><br><span class="line"> &#125; //如果cookie匹配正则，设置变量$id等于正则引用部分</span><br><span class="line"></span><br><span class="line">if ($request_method = POST) &#123;</span><br><span class="line">    return 405;</span><br><span class="line">&#125; //如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302</span><br><span class="line"></span><br><span class="line">if ($slow) &#123;</span><br><span class="line">    limit_rate 10k;</span><br><span class="line">&#125; //限速，$slow可以通过 set 指令设置</span><br><span class="line"></span><br><span class="line">if (!-f $request_filename)&#123;</span><br><span class="line">    break;</span><br><span class="line">    proxy_pass  http://127.0.0.1; </span><br><span class="line">&#125; //如果请求的文件名不存在，则反向代理到localhost 。这里的break也是停止rewrite检查</span><br><span class="line"></span><br><span class="line">if ($args ~ post=140)&#123;</span><br><span class="line">    rewrite ^ http://example.com/ permanent;</span><br><span class="line">&#125; //如果query string中包含&quot;post=140&quot;，永久重定向到example.com</span><br><span class="line"></span><br><span class="line">location ~* \.(gif|jpg|png|swf|flv)$ &#123;</span><br><span class="line">    valid_referers none blocked www.jefflei.com www.leizhenfang.com;</span><br><span class="line">    if ($invalid_referer) &#123;</span><br><span class="line">        return 404;</span><br><span class="line">    &#125; //防盗链</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Example Two：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#判断如果请求为/jfpt_common/logon!toAdminlogon.action?appid=(6|2760|5117|251|7259)$结尾，则rewrite为：https://$server_name/jfpt_common_sw/jfpt_common/logon!toAdminlogon.action?appid=(6|2760|5117|251|7259)</span><br><span class="line"></span><br><span class="line">if ( $request_uri ~ /jfpt_common/logon!toAdminlogon.action\?appid=(6|2760|5117|251|7259)$ ) &#123;</span><br><span class="line">       rewrite ^/jfpt_common/(.*) https://$server_name/jfpt_common_sw/$1 redirect;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#判断如果请求为/xxdkdf/login!toLogon.action，则rewrite为：https://$server_name/xxdkdf/login!toLogon.action</span><br><span class="line"></span><br><span class="line">if ( $request_uri ~ /xxdkdf/logon\!toLogon\.action ) &#123;</span><br><span class="line">       rewrite ^(.*) https://$server_name$1 redirect;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#永久重定向HTTPS</span><br><span class="line"></span><br><span class="line">if ( $request_uri ~ /) &#123;</span><br><span class="line">       rewrite ^(.*) https://$server_name$1 permanent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="六、nginx常用正则"><a href="#六、nginx常用正则" class="headerlink" title="六、nginx常用正则"></a>六、nginx常用正则</h2><ul>
<li>分享：<a href="https://www.jianshu.com/p/1af0493b474d" title="PCRE正则表达式全集" target="_blank" rel="noopener">PCRE正则表达式全集</a></li>
<li style="list-style: none"><input type="checkbox" checked> <code>.</code> ： 匹配除换行符以外的任意字符</li>
<li style="list-style: none"><input type="checkbox" checked> <code>?</code> ： 重复0次或1次</li>
<li style="list-style: none"><input type="checkbox" checked> <code>+</code> ： 重复1次或更多次</li>
<li style="list-style: none"><input type="checkbox" checked> <code>*</code> ： 重复0次或更多次</li>
<li style="list-style: none"><input type="checkbox" checked> <code>\d</code> ：匹配数字</li>
<li style="list-style: none"><input type="checkbox" checked> <code>^</code> ： 匹配字符串的开始</li>
<li style="list-style: none"><input type="checkbox" checked> <code>$</code> ： 匹配字符串的介绍</li>
<li style="list-style: none"><input type="checkbox" checked> <code>{n}</code> ： 重复n次</li>
<li style="list-style: none"><input type="checkbox" checked> <code>{n,}</code> ： 重复n次或更多次</li>
<li style="list-style: none"><input type="checkbox" checked> <code>[c]</code> ： 匹配单个字符c</li>
<li style="list-style: none"><input type="checkbox" checked> <code>[a-z]</code> ： 匹配a-z小写字母的任意一个</li>
</ul>
<blockquote>
<p>提示：小括号()之间匹配的内容，可以在后面通过$1来引用，$2表示的是前面第二个()里的内容。正则里面容易让人困惑的是\转义特殊字符。</p>
</blockquote>
<h2 id="七、关于location-理解误区"><a href="#七、关于location-理解误区" class="headerlink" title="七、关于location 理解误区"></a>七、关于location 理解误区</h2><ul>
<li>location 的匹配顺序是“先匹配正则，再匹配普通”。</li>
</ul>
<blockquote>
<p>矫正： location 的匹配顺序其实是“先匹配普通，再匹配正则”。我这么说，大家一定会反驳我，因为按“先匹配普通，再匹配正则”解释不了大家平时习惯的按“先匹配正则，再匹配普通”的实践经验。这里我只能暂时解释下，造成这种误解的原因是：正则匹配会覆盖普通匹配（实际的规则，比这复杂，后面会详细解释）。</p>
</blockquote>
<ul>
<li>location 的执行逻辑跟 location 的编辑顺序无关。</li>
</ul>
<blockquote>
<p>矫正：这句话不全对，“普通 location ”的匹配规则是“最大前缀”，因此“普通 location ”的确与 location 编辑顺序无关；但是“正则 location ”的匹配规则是“顺序匹配，且只要匹配到第一个就停止后面的匹配”；“普通 location”与“正则 location ”之间的匹配顺序是？先匹配普通 location，再“考虑”匹配正则 location 。注意这里的“考虑”是“可能”的意思，也就是说匹配完“普通 location ”后，有的时候需要继续匹配“正则 location ”，有的时候则不需要继续匹配“正则 location ”。两种情况下，不需要继续匹配正则 location ：（ 1 ）当普通 location 前面指定了“ ^~ ”，特别告诉 Nginx 本条普通 location 一旦匹配上，则不需要继续正则匹配；（ 2 ）当普通 location 恰好严格匹配上，不是最大前缀匹配，则不再继续匹配正则。</p>
</blockquote>
<ul>
<li><strong>总结一句话：正则 location 匹配让步普通 location 的严格精确匹配结果；但覆盖普通 location 的最大前缀匹配结果</strong></li>
</ul>
]]></content>
      <categories>
        <category>NGINX文档</category>
      </categories>
      <tags>
        <tag>NGINX代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx内置变量速查表</title>
    <url>/2019/05/10/Nginx%E5%86%85%E7%BD%AE%E5%8F%98%E9%87%8F%E9%80%9F%E6%9F%A5%E8%A1%A8/</url>
    <content><![CDATA[<h1 id="Nginx内置变量速查表"><a href="#Nginx内置变量速查表" class="headerlink" title="Nginx内置变量速查表"></a>Nginx内置变量速查表</h1><h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><ul>
<li>goacces做日志分析时，及日常的一些虚拟主机配置、rewirte配置等，均会使用到nginx变量，特此收录网上文章，进行整理，用作配置速查。</li>
</ul>
<h2 id="2、Nginx内置变量"><a href="#2、Nginx内置变量" class="headerlink" title="2、Nginx内置变量"></a>2、Nginx内置变量</h2><blockquote>
<p>内置变量存放在  ngx_http_core_module模块中，变量的命名方式和apache服务器变量是一致的。总而言之，这<br>些变量代表着客户端请求头的内容，例如$http_user_agent,$http_cookie,等等。</p>
</blockquote>
<ul>
<li><strong>下面是nginx支持的所有内置变量：</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$args                    #请求中的参数值</span><br><span class="line">$query_string            #同 $args</span><br><span class="line">$arg_NAME                #GET请求中NAME的值</span><br><span class="line">$is_args                 #如果请求中有参数，值为&quot;?&quot;，否则为空字符串</span><br><span class="line">$uri                     #请求中的当前URI(不带请求参数，参数位于$args)，可以不同于浏览器传递的$request_uri的值，它可以通过内部重定向，或者使用index指令进行修改，$uri不包含主机名，如&quot;/foo/bar.html&quot;。</span><br><span class="line">$document_uri            #同 $uri</span><br><span class="line">$document_root           #当前请求的文档根目录或别名</span><br><span class="line">$host                    #优先级：HTTP请求行的主机名&gt;&quot;HOST&quot;请求头字段&gt;符合请求的服务器名.请求中的主机头字段，如果请求中的主机头不可用，则为服务器处理请求的服务器名称</span><br><span class="line">$hostname                #主机名</span><br><span class="line">$https                   #如果开启了SSL安全模式，值为&quot;on&quot;，否则为空字符串。</span><br><span class="line">$binary_remote_addr      #客户端地址的二进制形式，固定长度为4个字节</span><br><span class="line">$body_bytes_sent         #传输给客户端的字节数，响应头不计算在内；这个变量和Apache的mod_log_config模块中的&quot;%B&quot;参数保持兼容</span><br><span class="line">$bytes_sent              #传输给客户端的字节数</span><br><span class="line">$connection              #TCP连接的序列号</span><br><span class="line">$connection_requests     #TCP连接当前的请求数量</span><br><span class="line">$content_length          #&quot;Content-Length&quot; 请求头字段</span><br><span class="line">$content_type            #&quot;Content-Type&quot; 请求头字段</span><br><span class="line">$cookie_name             #cookie名称</span><br><span class="line">$limit_rate              #用于设置响应的速度限制</span><br><span class="line">$msec                    #当前的Unix时间戳</span><br><span class="line">$nginx_version           #nginx版本</span><br><span class="line">$pid                     #工作进程的PID</span><br><span class="line">$pipe                    #如果请求来自管道通信，值为&quot;p&quot;，否则为&quot;.&quot;</span><br><span class="line">$proxy_protocol_addr     #获取代理访问服务器的客户端地址，如果是直接访问，该值为空字符串</span><br><span class="line">$realpath_root           #当前请求的文档根目录或别名的真实路径，会将所有符号连接转换为真实路径</span><br><span class="line">$remote_addr             #客户端地址</span><br><span class="line">$remote_port             #客户端端口</span><br><span class="line">$remote_user             #用于HTTP基础认证服务的用户名</span><br><span class="line">$request                 #代表客户端的请求地址</span><br><span class="line">$request_body            #客户端的请求主体：此变量可在location中使用，将请求主体通过proxy_pass，fastcgi_pass，uwsgi_pass和scgi_pass传递给下一级的代理服务器</span><br><span class="line">$request_body_file       #将客户端请求主体保存在临时文件中。文件处理结束后，此文件需删除。如果需要之一开启此功能，需要设置client_body_in_file_only。如果将次文件传 递给后端的代理服务器，需要禁用request body，即设置proxy_pass_request_body off，fastcgi_pass_request_body off，uwsgi_pass_request_body off，or scgi_pass_request_body off</span><br><span class="line">$request_completion      #如果请求成功，值为&quot;OK&quot;，如果请求未完成或者请求不是一个范围请求的最后一部分，则为空</span><br><span class="line">$request_filename        #当前连接请求的文件路径，由root或alias指令与URI请求生成</span><br><span class="line">$request_length          #请求的长度 (包括请求的地址，http请求头和请求主体)</span><br><span class="line">$request_method          #HTTP请求方法，通常为&quot;GET&quot;或&quot;POST&quot;</span><br><span class="line">$request_time            #处理客户端请求使用的时间,单位为秒，精度毫秒； 从读入客户端的第一个字节开始，直到把最后一个字符发送给客户端后进行日志写入为止。</span><br><span class="line">$request_uri             #这个变量等于包含一些客户端请求参数的原始URI，它无法修改，请查看$uri更改或重写URI，不包含主机名，例如：&quot;/cnphp/test.php?arg=freemouse&quot;</span><br><span class="line">$scheme                  #请求使用的Web协议，&quot;http&quot; 或 &quot;https&quot;</span><br><span class="line">$server_addr             #服务器端地址，需要注意的是：为了避免访问linux系统内核，应将ip地址提前设置在配置文件中</span><br><span class="line">$server_name             #服务器名</span><br><span class="line">$server_port             #服务器端口</span><br><span class="line">$server_protocol         #服务器的HTTP版本，通常为 &quot;HTTP/1.0&quot; 或 &quot;HTTP/1.1&quot;</span><br><span class="line">$status                  #HTTP响应代码</span><br><span class="line">$time_iso8601            #服务器时间的ISO 8610格式</span><br><span class="line">$time_local              #服务器时间（LOG Format 格式）</span><br><span class="line">$cookie_NAME             #客户端请求Header头中的cookie变量，前缀&quot;$cookie_&quot;加上cookie名称的变量，该变量的值即为cookie名称的值</span><br><span class="line">$http_NAME               #匹配任意请求头字段；变量名中的后半部分NAME可以替换成任意请求头字段，如在配置文件中需要获取http请求头：&quot;Accept-Language&quot;，$http_accept_language即可</span><br><span class="line">$http_cookie</span><br><span class="line">$http_host               #请求地址，即浏览器中你输入的地址（IP或域名）</span><br><span class="line">$http_referer            #url跳转来源,用来记录从那个页面链接访问过来的</span><br><span class="line">$http_user_agent         #用户终端浏览器等信息</span><br><span class="line">$http_x_forwarded_for</span><br><span class="line">$sent_http_NAME          #可以设置任意http响应头字段；变量名中的后半部分NAME可以替换成任意响应头字段，如需要设置响应头Content-length，$sent_http_content_length即可</span><br><span class="line">$tcpinfo_rtt, $tcpinfo_rttvar, $tcpinfo_snd_cwnd, $tcpinfo_rcv_space        #客户端TCP连接的具体信息</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3、Exmpale"><a href="#3、Exmpale" class="headerlink" title="3、Exmpale"></a>3、Exmpale</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://localhost:88/test1/test2/test.php</span><br><span class="line">$host：localhost</span><br><span class="line">$server_port：88</span><br><span class="line">$request_uri：http://localhost:88/test1/test2/test.php</span><br><span class="line">$document_uri：/test1/test2/test.php</span><br><span class="line">$document_root：/var/www/html</span><br><span class="line">$request_filename：/var/www/html/test1/test2/test.php</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>NGINX文档</category>
      </categories>
      <tags>
        <tag>NGINX代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx后端限连模块详解-nginx-limit-upstream</title>
    <url>/2019/05/10/Nginx%E5%90%8E%E7%AB%AF%E9%99%90%E8%BF%9E%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3-nginx-limit-upstream/</url>
    <content><![CDATA[<h1 id="Nginx后端限连模块详解-nginx-limit-upstream"><a href="#Nginx后端限连模块详解-nginx-limit-upstream" class="headerlink" title="Nginx后端限连模块详解-nginx-limit-upstream"></a>Nginx后端限连模块详解-nginx-limit-upstream</h1><h2 id="1、后端限连模块（nginx-limit-upstream）介绍"><a href="#1、后端限连模块（nginx-limit-upstream）介绍" class="headerlink" title="1、后端限连模块（nginx-limit-upstream）介绍"></a>1、后端限连模块（nginx-limit-upstream）介绍</h2><h3 id="1-1、官方README"><a href="#1-1、官方README" class="headerlink" title="1.1、官方README"></a>1.1、官方README</h3><blockquote>
<p>When you use nginx as a proxy, there is a problem you may have to face:a upstream server is able to achieve high QPS within a relatively low resourcestress. For example, mysql works well at the speed of 8000-9000 QPS within 60 parallelconnections, but only 2000 QPS when the number of connections increases to 500.I do not find any module that will solve the problem because they all face client,not the upstream. I tried the limit_req, but failed. when I write down “limit_req rate=8000/s”,I find there are over 2000 active connections between nginx and mysql,and when I write down “limit_req rate=60/s”, Jesus, it is really 60 QPS for my nginx.So, I have a try, and the limit_upstream module comes. This module will limit thenumber of connections to a upstream server identified by its ip address. With it, Icould control the upstream connections. When it reaches the set threshold, new requestswill suspend and wait until a active upstream request finishes and wake them up,otherwise, they will die when they get timeout. Of course, I can also specify the lengthof waiting queue, and the waiting timeout, as limit_req do.In this module, each worker suspend its requests when upstreams’ counters reach thethreshold, and resume them or cancel them all by itself. The only things they shareare the global upstreams’ counters. A special case for a request be allowed to go toupstream even when the threshold is reached is that, no request related to that upstreamis being processed at that time for the worker. as a result, the maximum number ofestablished connections to a upstream server is (‘limit’ + ‘worker_processes’).</p>
</blockquote>
<ul>
<li><strong>大致原意：某些短连接应用类似MYSQL在并发连接60时，可以达到8000-9000 QPS性能，反而在连接达到500时，仅有2000 QPS的性能，此模块便是解决此类场景，有效的控制后端连接并发数，防止后端应用出现阻塞、卡死等现象，始终保持后端服务器的负载处于健康状态（除极端情况外）。</strong></li>
</ul>
<h3 id="1-2、模块官方下载地址"><a href="#1-2、模块官方下载地址" class="headerlink" title="1.2、模块官方下载地址"></a>1.2、模块官方下载地址</h3><blockquote>
<p>目前已支持Nginx-1.4.4、1.8.1、1.10.1、1.12.1等版本</p>
</blockquote>
<ul>
<li>GitHub地址:<ul>
<li style="list-style: none"><input type="checkbox" checked> <a href="https://github.com/cfsego/nginx-limit-upstream" target="_blank" rel="noopener">https://github.com/cfsego/nginx-limit-upstream</a></li>
</ul>
</li>
<li>README:<ul>
<li style="list-style: none"><input type="checkbox" checked> <a href="https://github.com/cfsego/nginx-limit-upstream/blob/master/README" target="_blank" rel="noopener">https://github.com/cfsego/nginx-limit-upstream/blob/master/README</a></li>
</ul>
</li>
</ul>
<h2 id="2、模块Install"><a href="#2、模块Install" class="headerlink" title="2、模块Install"></a>2、模块Install</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">patch -p2 &lt; nginx.patch (nginx 1.0.X, 1.2.X)</span><br><span class="line">patch -p1 &lt; nginx-1.4.4.patch (nginx 1.4.X, nginx 1.6.X)</span><br><span class="line">patch -p0 &lt; nginx-1.8.1.patch  (nginx 1.8.X, nginx 1.9.X)</span><br><span class="line">patch -p0 &lt; nginx-1.10.1.patch  (nginx 1.10.X)</span><br><span class="line">cp /path/to/module/nginx.1.10.1.patch /path/to/nginx-1.10.0/debian/patches (nginx 1.10 on debian)</span><br><span class="line">patch -p1 &lt; nginx-1.12.1.patch  (nginx 1.12.X)</span><br><span class="line"></span><br><span class="line">if you want to use the module for stream, use this patch in addition:</span><br><span class="line">patch -p1 &lt; nginx-1.12.1-stream.patch</span><br><span class="line"></span><br><span class="line">./configure --add-module=/path/to/module</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h2 id="3、模块Example"><a href="#3、模块Example" class="headerlink" title="3、模块Example"></a>3、模块Example</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        location = /test &#123;</span><br><span class="line">            #引用负载组upstream(lisirlife_com)</span><br><span class="line">            proxy_pass http://lisirlife_com;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #定于一个内存共享缓冲区test</span><br><span class="line">    limit_upstream_zone test 10m;</span><br><span class="line"></span><br><span class="line">    upstream lisirlife_com &#123;</span><br><span class="line">        server 127.0.0.1:8080;</span><br><span class="line">        server 127.0.0.1:8081;</span><br><span class="line">        server 127.0.0.1:8082;</span><br><span class="line">        ...</span><br><span class="line">        #限制限制此upstream组内连接数上限为260，内存缓冲区test，可堆积连接数10000，若堆积的连接时间超过180s，则返回客户端408错误；</span><br><span class="line">        limit_upstream_conn limit=260 zone=test backlog=10000 timeout=180s;</span><br><span class="line">        #设置日志级别</span><br><span class="line">        limit_upstream_log_level error;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4、模块配置语法"><a href="#4、模块配置语法" class="headerlink" title="4、模块配置语法"></a>4、模块配置语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#作用：定于一个内存共享缓冲区</span><br><span class="line">syntax:  limit_upstream_zone zone_name size;</span><br><span class="line">default: -</span><br><span class="line">context: http, stream</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#释义：zone=引用如上内存池； limit=要限制的连接数量；backlog=挤压连接数量控制；timeout=设置超过挤压连接数的超时时间,若超时反馈408报错；</span><br><span class="line">syntax:  limit_upstream_conn zone=zone_name limit=limit [backlog=length] [timeout=timeout | nodelay] [instant_hook];</span><br><span class="line">default: -</span><br><span class="line">context: upstream</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#释义：设置limit_upstream日志级别，默认输出error.log</span><br><span class="line">syntax:  limit_upstream_log_level [ error | warn | notice | info ];</span><br><span class="line">default: limit_upstream_log_level notice;</span><br><span class="line">context: http, stream, upstream</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>NGINX文档</category>
      </categories>
      <tags>
        <tag>NGINX代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx正向代理模块详解-http-proxy-connect</title>
    <url>/2019/10/28/Nginx%E6%AD%A3%E5%90%91%E4%BB%A3%E7%90%86%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3-http-proxy-connect/</url>
    <content><![CDATA[<h1 id="Nginx正向代理模块详解-http-proxy-connect"><a href="#Nginx正向代理模块详解-http-proxy-connect" class="headerlink" title="Nginx正向代理模块详解-http-proxy-connect"></a>Nginx正向代理模块详解-http-proxy-connect</h1><h2 id="1、模块简介"><a href="#1、模块简介" class="headerlink" title="1、模块简介"></a>1、模块简介</h2><ul>
<li>官方REDEME：This module provides support for the CONNECT method request. This method is mainly used to tunnel SSL requests through proxy servers.</li>
</ul>
<blockquote>
<p>该模块为CONNECT方法请求提供支持。 此方法主要用于通过代理服务器转发SSL请求。</p>
</blockquote>
<h3 id="1-1、模块下载地址"><a href="#1-1、模块下载地址" class="headerlink" title="1.1、模块下载地址"></a>1.1、模块下载地址</h3><blockquote>
<p><a href="https://github.com/chobits/ngx_http_proxy_connect_module" target="_blank" rel="noopener">https://github.com/chobits/ngx_http_proxy_connect_module</a></p>
</blockquote>
<ul>
<li>目前支持版本支持如下（请前往如上地址实时查看）：</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">nginx version</th>
<th style="text-align:left">enable REWRITE phase</th>
<th style="text-align:left">patch</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1.4.x ~ 1.12.x</td>
<td style="text-align:left">NO</td>
<td style="text-align:left"><a href="patch/proxy_connect.patch">proxy_connect.patch</a></td>
</tr>
<tr>
<td style="text-align:left">1.4.x ~ 1.12.x</td>
<td style="text-align:left">YES</td>
<td style="text-align:left"><a href="patch/proxy_connect_rewrite.patch">proxy_connect_rewrite.patch</a></td>
</tr>
<tr>
<td style="text-align:left">1.13.x ~ 1.14.x</td>
<td style="text-align:left">NO</td>
<td style="text-align:left"><a href="patch/proxy_connect_1014.patch">proxy_connect_1014.patch</a></td>
</tr>
<tr>
<td style="text-align:left">1.13.x ~ 1.14.x</td>
<td style="text-align:left">YES</td>
<td style="text-align:left"><a href="patch/proxy_connect_rewrite_1014.patch">proxy_connect_rewrite_1014.patch</a></td>
</tr>
<tr>
<td style="text-align:left">1.15.2</td>
<td style="text-align:left">YES</td>
<td style="text-align:left"><a href="patch/proxy_connect_rewrite_1015.patch">proxy_connect_rewrite_1015.patch</a></td>
</tr>
<tr>
<td style="text-align:left">1.15.4 ~ 1.16.x</td>
<td style="text-align:left">YES</td>
<td style="text-align:left"><a href="patch/proxy_connect_rewrite_101504.patch">proxy_connect_rewrite_101504.patch</a></td>
</tr>
<tr>
<td style="text-align:left">1.17.x</td>
<td style="text-align:left">YES</td>
<td style="text-align:left"><a href="patch/proxy_connect_rewrite_101504.patch">proxy_connect_rewrite_101504.patch</a></td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">OpenResty version</th>
<th style="text-align:left">enable REWRITE phase</th>
<th style="text-align:left">patch</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1.13.6</td>
<td style="text-align:left">NO</td>
<td style="text-align:left"><a href="patch/proxy_connect_1014.patch">proxy_connect_1014.patch</a></td>
</tr>
<tr>
<td style="text-align:left">1.13.6</td>
<td style="text-align:left">YES</td>
<td style="text-align:left"><a href="patch/proxy_connect_rewrite_1014.patch">proxy_connect_rewrite_1014.patch</a></td>
</tr>
<tr>
<td style="text-align:left">1.15.8</td>
<td style="text-align:left">YES</td>
<td style="text-align:left"><a href="patch/proxy_connect_rewrite_101504.patch">proxy_connect_rewrite_101504.patch</a></td>
</tr>
</tbody>
</table>
<h2 id="2、安装环境介绍"><a href="#2、安装环境介绍" class="headerlink" title="2、安装环境介绍"></a>2、安装环境介绍</h2><table>
<thead>
<tr>
<th style="text-align:left">平台</th>
<th style="text-align:left">IP</th>
<th style="text-align:left">NGINX版本</th>
<th style="text-align:left">安装模块</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">CentOS 6.7 64Bit</td>
<td style="text-align:left">192.168.1.219</td>
<td style="text-align:left">NGINX-1.10.3</td>
<td style="text-align:left">ngx_http_proxy_connect_module</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="3、模块安装"><a href="#3、模块安装" class="headerlink" title="3、模块安装"></a>3、模块安装</h2><h3 id="3-1、Build-nginx"><a href="#3-1、Build-nginx" class="headerlink" title="3.1、Build nginx"></a>3.1、Build nginx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test0002 soft]# tar xzvf nginx-1.10.3.tar.gz </span><br><span class="line">[root@test0002 soft]# tar xzvf nginx-sticky-module-ng-1.2.6.tar.gz</span><br><span class="line">[root@test0002 soft]# tar xzvf ngx_http_proxy_connect_module-0.0.1.tar.gz</span><br><span class="line">[root@test0002 nginx-1.10.3]# patch -p1 &lt; /soft/ngx_http_proxy_connect_module-0.0.1/patch/proxy_connect.patch </span><br><span class="line">[root@test0002 nginx-1.10.3]# useradd -s /sbin/nologin -M www</span><br><span class="line">[root@test0002 nginx-1.10.3]# ./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_stub_status_module --with-http_ssl_module --without-mail_pop3_module --without-mail_smtp_module --without-mail_imap_module --add-module=/soft/ngx_http_proxy_connect_module-0.0.1/</span><br><span class="line">[root@test0002 nginx-1.10.3]# make &amp;&amp; make install</span><br><span class="line">[root@test0002 nginx-1.10.3]# chmod a+x /etc/init.d/nginx</span><br><span class="line">[root@test0002 nginx-1.10.3]# chkconfig --add nginx</span><br><span class="line">[root@test0002 nginx-1.10.3]# chkconfig nginx on</span><br><span class="line">[root@test0002 sbin]# ./nginx -V</span><br><span class="line">nginx version: nginx/1.10.3</span><br><span class="line">built by gcc 4.4.7 20120313 (Red Hat 4.4.7-23) (GCC) </span><br><span class="line">built with OpenSSL 1.0.1e-fips 11 Feb 2013</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/usr/local/nginx --user=www --group=www --with-http_stub_status_module --with-http_ssl_module --without-mail_pop3_module --without-mail_smtp_module --without-mail_imap_module --add-module=/soft/ngx_http_proxy_connect_module-0.0.1/</span><br></pre></td></tr></table></figure>
<h3 id="3-2、Config-nginx"><a href="#3-2、Config-nginx" class="headerlink" title="3.2、Config nginx"></a>3.2、Config nginx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test0002 vhost_conf]# vim proxy_9999.conf</span><br><span class="line"> server &#123;</span><br><span class="line">     listen                         3128;</span><br><span class="line"></span><br><span class="line">     # dns resolver used by forward proxying</span><br><span class="line">     resolver                       8.8.8.8;</span><br><span class="line"></span><br><span class="line">     # forward proxy for CONNECT request</span><br><span class="line">     proxy_connect;</span><br><span class="line">     proxy_connect_allow            443 563;</span><br><span class="line">     proxy_connect_connect_timeout  10s;</span><br><span class="line">     proxy_connect_read_timeout     10s;</span><br><span class="line">     proxy_connect_send_timeout     10s;</span><br><span class="line"></span><br><span class="line">     # forward proxy for non-CONNECT request</span><br><span class="line">     location / &#123;</span><br><span class="line">         proxy_pass http://$host;</span><br><span class="line">         proxy_set_header Host $host;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-3、Error-Log"><a href="#3-3、Error-Log" class="headerlink" title="3.3、Error Log"></a>3.3、Error Log</h3><ul>
<li>This module logs its own error message beginning with <code>&quot;proxy_connect:&quot;</code> string.<br>Some typical error logs are shown as following：The proxy_connect module tries to establish tunnel connection with backend server, but the TCP connection timeout occurs.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2019/08/07 17:27:20 [error] 19257#0: *1 proxy_connect: upstream connect timed out (peer:216.58.200.4:443) while connecting to upstream, client: 127.0.0.1, server: , request: &quot;CONNECT www.google.com:443 HTTP/1.1&quot;, host: &quot;www.google.com:443&quot;</span><br></pre></td></tr></table></figure>
<h3 id="3-4、Directive"><a href="#3-4、Directive" class="headerlink" title="3.4、Directive"></a>3.4、Directive</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_connect</span><br><span class="line">- Syntax: proxy_connect </span><br><span class="line">- Default: `none`  </span><br><span class="line">- Context: `server`  </span><br><span class="line">Enable &quot;CONNECT&quot; HTTP method support.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_connect_allow</span><br><span class="line">- Syntax: proxy_connect_allow `all | [port ...] | [port-range ...]`</span><br><span class="line">- Default: `443 563`</span><br><span class="line">- Context: `server`</span><br><span class="line">The value `all` will allow all ports to proxy.</span><br><span class="line">The value `port` will allow specified port to proxy.</span><br><span class="line">The value `port-range` will allow specified range of port to proxy, for example:</span><br><span class="line">proxy_connect_allow 1000-2000 3000-4000; # allow range of port from 1000 to 2000, from 3000 to 4000.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_connect_connect_timeout</span><br><span class="line">- Syntax: proxy_connect_connect_timeout `time`</span><br><span class="line">- Default: `none`  </span><br><span class="line">- Context: `server`  </span><br><span class="line">Defines a timeout for establishing a connection with a proxied server.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_connect_read_timeout</span><br><span class="line">- Syntax: proxy_connect_read_timeout `time`</span><br><span class="line">- Default: `60s`  </span><br><span class="line">- Context: `server`  </span><br><span class="line">Defines a timeout for reading a response from the proxied server.  </span><br><span class="line">The timeout is set only between two successive read operations, not for the transmission of the whole response.  </span><br><span class="line">If the proxied server does not transmit anything within this time, the connection is closed.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_connect_send_timeout</span><br><span class="line">- Syntax: proxy_connect_send_timeout `time`</span><br><span class="line">- Default: `60s`  </span><br><span class="line">- Context: `server`  </span><br><span class="line"></span><br><span class="line">Sets a timeout for transmitting a request to the proxied server.  </span><br><span class="line">The timeout is set only between two successive write operations, not for the transmission of the whole request.  </span><br><span class="line">If the proxied server does not receive anything within this time, the connection is closed.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_connect_address</span><br><span class="line">- Syntax: proxy_connect_address `address | off`</span><br><span class="line">- Default: `none`  </span><br><span class="line">- Context: `server`  </span><br><span class="line">Specifiy an IP address of the proxied server. The address can contain variables.  </span><br><span class="line">The special value off is equal to none, which uses the IP address resolved from host name of CONNECT request line.  </span><br><span class="line"></span><br><span class="line">NOTE: If using `set $&lt;nginx variable&gt;` and `proxy_connect_address $&lt;nginx variable&gt;` together, you should use `proxy_connect_rewrite.patch` instead, see [Install](#install) for more details.</span><br></pre></td></tr></table></figure>
<h3 id="3-5、Variables"><a href="#3-5、Variables" class="headerlink" title="3.5、Variables"></a>3.5、Variables</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$connect_host</span><br><span class="line">- host name from CONNECT request line.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$connect_port</span><br><span class="line">- port from CONNECT request line.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$connect_addr</span><br><span class="line">- IP address and port of the remote host, e.g. &quot;192.168.1.5:12345&quot;.</span><br><span class="line">- IP address is resolved from host name of CONNECT request line.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$proxy_connect_connect_timeout</span><br><span class="line">- Get or set timeout of [`proxy_connect_connect_timeout` directive](#proxy_connect_connect_timeout).</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#For example:</span><br><span class="line"># Set default value</span><br><span class="line"></span><br><span class="line">proxy_connect_connect_timeout   10s;</span><br><span class="line">proxy_connect_read_timeout      10s;</span><br><span class="line">proxy_connect_send_timeout      10s;</span><br><span class="line"></span><br><span class="line"># Overlap default value</span><br><span class="line"></span><br><span class="line">if ($host = &quot;test.com&quot;) &#123;</span><br><span class="line">    set $proxy_connect_connect_timeout  &quot;10ms&quot;;</span><br><span class="line">    set $proxy_connect_read_timeout     &quot;10ms&quot;;</span><br><span class="line">    set $proxy_connect_send_timeout     &quot;10ms&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$proxy_connect_read_timeout</span><br><span class="line">- Get or set a timeout of [`proxy_connect_read_timeout` directive](#proxy_connect_read_timeout).</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$proxy_connect_send_timeout</span><br><span class="line">- Get or set a timeout of [`proxy_connect_send_timeout` directive](#proxy_connect_send_timeout).</span><br></pre></td></tr></table></figure>
<h2 id="4、正向代理访问测试"><a href="#4、正向代理访问测试" class="headerlink" title="4、正向代理访问测试"></a>4、正向代理访问测试</h2><h3 id="4-1、Example-for-curl"><a href="#4-1、Example-for-curl" class="headerlink" title="4.1、Example for curl"></a>4.1、Example for curl</h3><ul>
<li>With above configuration, you can get any https website via HTTP CONNECT tunnel. A simple test with command curl is as following:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test0002 vhost_conf]# curl https://www.baidu.com/ -v -x 127.0.0.1:9999</span><br><span class="line">* About to connect() to proxy 127.0.0.1 port 9999 (#0)</span><br><span class="line">*   Trying 127.0.0.1... connected</span><br><span class="line">* Connected to 127.0.0.1 (127.0.0.1) port 9999 (#0)</span><br><span class="line">* Establish HTTP proxy tunnel to www.baidu.com:443</span><br><span class="line">&gt; CONNECT www.baidu.com:443 HTTP/1.1</span><br><span class="line">&gt; Host: www.baidu.com:443</span><br><span class="line">&gt; User-Agent: curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.27.1 zlib/1.2.3 libidn/1.18 libssh2/1.4.2</span><br><span class="line">&gt; Proxy-Connection: Keep-Alive</span><br><span class="line">&gt; </span><br><span class="line">&lt; HTTP/1.1 200 Connection Established</span><br><span class="line">&lt; Proxy-agent: nginx</span><br><span class="line">&lt; </span><br><span class="line">* Proxy replied OK to CONNECT request</span><br><span class="line">* Initializing NSS with certpath: sql:/etc/pki/nssdb</span><br><span class="line">*   CAfile: /etc/pki/tls/certs/ca-bundle.crt</span><br><span class="line">  CApath: none</span><br><span class="line">* Server certificate:</span><br><span class="line">* 	subject: CN=baidu.com,O=&quot;Beijing Baidu Netcom Science Technology Co., Ltd&quot;,OU=service operation department,L=beijing,ST=beijing,C=CN</span><br><span class="line">* 	start date: 5月 09 01:22:02 2019 GMT</span><br><span class="line">* 	expire date: 6月 25 05:31:02 2020 GMT</span><br><span class="line">* 	common name: baidu.com</span><br><span class="line">* 	issuer: CN=GlobalSign Organization Validation CA - SHA256 - G2,O=GlobalSign nv-sa,C=BE</span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; User-Agent: curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.27.1 zlib/1.2.3 libidn/1.18 libssh2/1.4.2</span><br><span class="line">&gt; Host: www.baidu.com</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; </span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Accept-Ranges: bytes</span><br><span class="line">&lt; Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform</span><br><span class="line">&lt; Connection: Keep-Alive</span><br><span class="line">&lt; Content-Length: 2443</span><br><span class="line">&lt; Content-Type: text/html</span><br><span class="line">&lt; Date: Mon, 28 Oct 2019 01:57:28 GMT</span><br><span class="line">&lt; Etag: &quot;58860401-98b&quot;</span><br><span class="line">&lt; Last-Modified: Mon, 23 Jan 2017 13:24:17 GMT</span><br><span class="line">&lt; Pragma: no-cache</span><br><span class="line">&lt; Server: bfe/1.0.8.18</span><br><span class="line">&lt; Set-Cookie: BDORZ=27315; max-age=86400; domain=.baidu.com; path=/</span><br></pre></td></tr></table></figure>
<h3 id="4-2、Example-for-browser"><a href="#4-2、Example-for-browser" class="headerlink" title="4.2、Example for browser"></a>4.2、Example for browser</h3><ul>
<li>You can configure your browser to use this nginx as PROXY server.</li>
</ul>
<p><img src="http://static.zybuluo.com/a807257775/dnzsb5nh86gmo5h1zeam33e6/image_1do81jb5s1t8g61qfv13001bmd19.png" alt="image_1do81jb5s1t8g61qfv13001bmd19.png-108.1kB"></p>
<h3 id="4-3、linux客户端测试"><a href="#4-3、linux客户端测试" class="headerlink" title="4.3、linux客户端测试"></a>4.3、linux客户端测试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test0002 ~]# vim /etc/profile</span><br><span class="line">http_proxy=http://192.168.1.220:9999/</span><br><span class="line">https_proxy=http://192.168.1.220:9999/</span><br><span class="line">[root@test0002 ~]# export http_proxy https_proxy</span><br><span class="line">[root@test0002 ~]# source /etc/profile</span><br><span class="line">[root@test0002 ~]# echo $http_proxy $https_proxy</span><br><span class="line">http://192.168.1.220:9999/ http://192.168.1.220:9999/</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@test0002 ~]# curl -v https://www.baidu.com/</span><br><span class="line">* About to connect() to proxy 192.168.1.220 port 9999 (#0)</span><br><span class="line">*   Trying 192.168.1.220... connected</span><br><span class="line">* Connected to 192.168.1.220 (192.168.1.220) port 9999 (#0)</span><br><span class="line">* Establish HTTP proxy tunnel to www.baidu.com:443</span><br><span class="line">&gt; CONNECT www.baidu.com:443 HTTP/1.1</span><br><span class="line">&gt; Host: www.baidu.com:443</span><br><span class="line">&gt; User-Agent: curl/7.19.7 (x86_64-redhat-linux-gnu) libcurl/7.19.7 NSS/3.27.1 zlib/1.2.3 libidn/1.18 libssh2/1.4.2</span><br><span class="line">&gt; Proxy-Connection: Keep-Alive</span><br><span class="line">&gt; </span><br><span class="line">&lt; HTTP/1.1 200 Connection Established</span><br><span class="line">&lt; Proxy-agent: nginx</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>NGINX文档</category>
      </categories>
      <tags>
        <tag>NGINX代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx缓存模块详解-proxy-cache</title>
    <url>/2019/09/25/Nginx%E7%BC%93%E5%AD%98%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3-proxy-cache/</url>
    <content><![CDATA[<h1 id="Nginx缓存模块详解-proxy-cache"><a href="#Nginx缓存模块详解-proxy-cache" class="headerlink" title="Nginx缓存模块详解-proxy-cache"></a>Nginx缓存模块详解-proxy-cache</h1><h2 id="1、基本缓存概念"><a href="#1、基本缓存概念" class="headerlink" title="1、基本缓存概念"></a>1、基本缓存概念</h2><blockquote>
<p>一个web缓存坐落于客户端和“原始服务器（origin server）”中间，它保留了所有可见内容的拷贝。如果一个客户端请求的内容在缓存中存储，则可以直接在缓存中获得该内容而不需要与服务器通信。这样一来，由于web缓存距离客户端“更近”，就可以提高响应性能，并更有效率的使用应用服务器，因为服务器不用每次请求都进行页面生成工作，在浏览器和应用服务器之间，存在多种“潜在”缓存，如：客户端浏览器缓存、中间缓存、内容分发网络（CDN）和服务器上的负载平衡和反向代理。缓存，仅在反向代理和负载均衡的层面，就对性能提高有很大的帮助。</p>
</blockquote>
<p>图一：<img src="http://static.zybuluo.com/a807257775/j05almasvue815pbkcidyedf/image_1dagv7ecj1b9q1cou187p1e5iupj9.png" alt="image_1dagv7ecj1b9q1cou187p1e5iupj9.png-293.3kB"></p>
<h2 id="2、Proxy-Cache模块常用指令解析"><a href="#2、Proxy-Cache模块常用指令解析" class="headerlink" title="2、Proxy Cache模块常用指令解析"></a>2、Proxy Cache模块常用指令解析</h2><blockquote>
<p>本章节主要解析一下nginx ngx_http_proxy_module中的cache相关配置参数<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#默认为off，即关闭proxy_cache功能，zone为用于存放缓存的内存区域名称。例：proxy_cache my_zone;从nginx0.7.66版本开始，proxy_cache机制开启后会检测被代理端的HTTP响应头中的&quot;Cache-Control&quot;、&quot;Expire&quot;头域。如，Cache-Control为no-cache时，是不会缓存数据的。</span><br><span class="line">proxy_cache</span><br><span class="line">Syntax: proxy_cache zone | off;</span><br><span class="line">Default: proxy_cache off;</span><br><span class="line">Context: http, server, location</span><br></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#定义缓存存放路径、缓存大小、缓存时间等参数</span><br><span class="line">proxy_cache_path</span><br><span class="line">Syntax: proxy_cache_path path [levels=levels] [use_temp_path=on|off] keys_zone=name:size [inactive=time] [max_size=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=on|off] [purger_files=number] [purger_sleep=time] [purger_threshold=time];</span><br><span class="line">Default: —</span><br><span class="line">Context: http</span><br><span class="line">#path 缓存文件路径</span><br><span class="line">#levels 设置缓存文件目录层次；levels=1:2 表示两级目录</span><br><span class="line">#keys_zone 设置缓存名字和共享内存大小</span><br><span class="line">#max_size 最大缓存空间，如果缓存空间满，默认覆盖掉缓存时间最长的资源</span><br><span class="line">#inactive：内存中缓存的过期检查周期。示例配置中如果 2h 内都没有被访问，则不论状态是否为 expired，都会清除缓存。需要注意的是，inactive 和 expired 配置项的含义是不同的，expired 只是判断过期时间，不会删除缓存；而 inactive 是直接删除过期缓存</span><br><span class="line">#use_temp_path：如果为 off，则 nginx 会将缓存文件直接写入指定的 cache 文件中，而不使用 temp_path 指定的临时存储路径</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#指定哪些响应在某些值不为空或不为0的情况下不走缓存，比如proxy_cache_bypass $http\_pragma $http_authorization;</span><br><span class="line">proxy_cache_bypass</span><br><span class="line">Syntax:	proxy_cache_bypass string ...;</span><br><span class="line">Default: —</span><br><span class="line">Context: http, server, location</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#定义 proxy_cache 生成文件的名称。值可以为 Nginx 支持的变量和字符串</span><br><span class="line">proxy_cache_key</span><br><span class="line">Syntax:	proxy_cache_key string;</span><br><span class="line">Default: proxy_cache_key $scheme$proxy_host$request_uri;</span><br><span class="line">Context: http, server, location</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#默认不开启，开启的话则每次只能有一个请求更新相同的缓存，其他请求要么等待缓存有数据要么限时等待锁释放;nginx 1.1.12才开始有</span><br><span class="line">proxy_cache_lock</span><br><span class="line">Syntax:	proxy_cache_lock on | off;</span><br><span class="line">Default: proxy_cache_lock off;</span><br><span class="line">Context: http, server, location</span><br><span class="line">#提示：This directive appeared in version 1.1.12.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#等待缓存锁超时之后将直接请求后端，结果不会被缓存 ; nginx 1.1.12才开始有</span><br><span class="line">proxy_cache_lock_timeout</span><br><span class="line">Syntax:	proxy_cache_lock_timeout time;</span><br><span class="line">Default: proxy_cache_lock_timeout 5s;</span><br><span class="line">Context: http, server, location</span><br><span class="line">#提示：This directive appeared in version 1.1.12.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#指定在多少次请求之后才缓存响应内容</span><br><span class="line">proxy_cache_min_uses</span><br><span class="line">Syntax:	proxy_cache_min_uses number;</span><br><span class="line">Default: proxy_cache_min_uses 1;</span><br><span class="line">Context: http, server, location</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#指定在后端服务器在返回什么状态码的情况下可以使用过期的缓存，比如proxy_cache_use_stale error timeout invalid_header http_500 http_502 http_503 http_504;</span><br><span class="line">proxy_cache_use_stale</span><br><span class="line">Syntax:	proxy_cache_use_stale error | timeout | invalid_header | updating | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | http_429 | off ...;</span><br><span class="line">Default: proxy_cache_use_stale off;</span><br><span class="line">Context: http, server, location</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#没有默认值，实例如proxy_cache_valid 200 302 10m，针对不同的response code设定不同的缓存时间，如果不设置code，默认为200,301,302,也可以用any指定所有code</span><br><span class="line">proxy_cache_valid</span><br><span class="line">Syntax:	proxy_cache_valid [code ...] time;</span><br><span class="line">Default: —</span><br><span class="line">Context: http, server, location</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#与Proxy cache有关的一项参数与配置，expires控制缓存生存期</span><br><span class="line">expires</span><br><span class="line">Syntax:	expires [time|epoch|max|off]</span><br><span class="line">Default: expires off</span><br><span class="line">Context: http, server, location</span><br><span class="line">#epoch：指定“Expires”的值为 1 January, 1970, 00:00:01 GMT。</span><br><span class="line">#max：指定“Expires”的值为 31 December 2037 23:59:59 GMT，“Cache-Control”的值为10年。</span><br><span class="line">#-1：指定“Expires”的值为 服务器当前时间 -1s,即永远过期</span><br><span class="line">#“Cache-Control”头标的值由您指定的时间来决定：</span><br><span class="line">#负数：Cache-Control: no-cache</span><br><span class="line">#正数或零：Cache-Control: max-age = #, # 为您指定时间的秒数。</span><br><span class="line">#&quot;off&quot;：表示不修改“Expires”和“Cache-Control”的值</span><br><span class="line">#提示：使用本指令可以控制HTTP应答中的“Expires”和“Cache-Control”的头标，（起到控制页面缓存的作用）。可以在time值中使用正数或负数。“Expires”头标的值将通过当前系统时间加上您设定的 time 值来获得。</span><br></pre></td></tr></table></figure>
<h2 id="3、生产配置详解"><a href="#3、生产配置详解" class="headerlink" title="3、生产配置详解"></a>3、生产配置详解</h2><h3 id="3-1、生产安装版本"><a href="#3-1、生产安装版本" class="headerlink" title="3.1、生产安装版本"></a>3.1、生产安装版本</h3><table>
<thead>
<tr>
<th>平台</th>
<th>IP</th>
<th>NGINX版本</th>
<th>安装模块</th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS 6.7 64Bit</td>
<td>192.168.2.245</td>
<td>NGINX-1.12.1</td>
<td>naxsi\nginx-limit-upstream\nginx-upstream-jvm-route</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="3-2、NGINX生产配置"><a href="#3-2、NGINX生产配置" class="headerlink" title="3.2、NGINX生产配置"></a>3.2、NGINX生产配置</h3><ul>
<li><p>nginx主配置文件：<code>/usr/local/nginx/conf/nginx.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">proxy_cache_path /dev/shm/ngx_cache levels=1:2 keys_zone=cache_one:1m max_size=10m;</span><br><span class="line">#proxy_cache_path 缓存文件路径</span><br><span class="line">#levels 设置缓存文件目录层次；levels=1:2 表示两级目录</span><br><span class="line">#keys_zone 设置缓存名字和共享内存大小</span><br><span class="line">#max_size 最大缓存空间，如果缓存空间满，默认覆盖掉缓存时间最长的资源</span><br></pre></td></tr></table></figure>
</li>
<li><p>域名配置文件：<code>/usr/local/nginx/conf/vhost_conf/wxejf123.conf</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location /jfpt &#123;</span><br><span class="line">    rewrite ^(.*)/template_abc_weixin/(.*)$ $1/template_weixins/$2 break;</span><br><span class="line">    proxy_pass http://jfpt_load_balancing;</span><br><span class="line">    include comproxy.conf;</span><br><span class="line">    include /usr/local/nginx/conf/ccbejf.rules;</span><br><span class="line">    access_log /usr/local/nginx/logs/ccbmob_access.log access;</span><br><span class="line">    error_log /usr/local/nginx/logs/ccbmob_error.log;</span><br><span class="line">    limit_except GET POST &#123;</span><br><span class="line">    deny  all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">location ~ /jfpt/.*\.(gif|jpg|png|css|js)$ &#123;</span><br><span class="line">     proxy_cache cache_one;.</span><br><span class="line">     #使用名为cache_one的对应缓存配置</span><br><span class="line">     proxy_cache_valid 200 304 12h;</span><br><span class="line">     #对httpcode为200、304的缓存12小时</span><br><span class="line">     proxy_cache_key $host$uri$is_args$args;</span><br><span class="line">     #定义缓存唯一key,通过唯一key来进行hash存取</span><br><span class="line">     expires 30d;</span><br><span class="line">     #expires 指缓存过期时间为30天</span><br><span class="line">     proxy_pass http://jfpt_load_balancing;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>关于proxy.conf中的一项配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#控制缓存生存期，开启此配置默认会缓存所有内容</span><br><span class="line">add_header Cache-Control max-age=86400;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>NGINX文档</category>
      </categories>
      <tags>
        <tag>NGINX代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx直播系统rtmp&amp;ffmpeg</title>
    <url>/2021/04/19/Nginx%E7%9B%B4%E6%92%AD%E7%B3%BB%E7%BB%9Frtmp&amp;ffmpeg/</url>
    <content><![CDATA[<h1 id="Nginx直播系统rtmp-amp-ffmpeg"><a href="#Nginx直播系统rtmp-amp-ffmpeg" class="headerlink" title="Nginx直播系统rtmp&amp;ffmpeg"></a>Nginx直播系统rtmp&amp;ffmpeg</h1><h2 id="1、主流直播系统三大协议简介"><a href="#1、主流直播系统三大协议简介" class="headerlink" title="1、主流直播系统三大协议简介"></a>1、主流直播系统三大协议简介</h2><ul>
<li><p><code>HLS</code>，是苹果公司实现的基于 HTTP 的流媒体传输协议，全称 HTTP Live Streaming，可支持流媒体的直播和点播，主要应用在 iOS 系统，为 iOS 设备（如 iPhone、iPad）提供音视频直播和点播方案；</p>
</li>
<li><p><code>RTMP</code>，全称 Real Time Messaging Protocol，即实时消息传送协议。Adobe 公司为 Flash播放器和服务器之间音视频数据传输开发的私有协议。工作在TCP之上的明文协议，默认使用端口1935。协议中的基本数据单元成为消息（Message），传输的过程中消息会被拆分为更小的消息块（Chunk）单元。最后将分割后的消息块通过 TCP 协议传输，接收端再反解接收的消息块恢复成流媒体数据；</p>
</li>
<li><p><code>HTTP-FLV</code>即，将流媒体数据封装成FLV格式，然后通过HTTP协议传输给客户端。HTTP-FLV依靠MIME的特性，根据协议中的Content-Type来选择相应的程序去处理相应的内容，使得流媒体可以通过HTTP传输。相较于RTMP协议，HTTP-FLV能够好的穿透防火墙，它是基于HTTP/80传输，有效避免被防火墙拦截。除此之外，它可以通过 HTTP 302 跳转灵活调度/负载均衡，支持使用 HTTPS 加密传输，也能够兼容支持 Android，iOS 的移动端；</p>
</li>
</ul>
<p>图一：<img src="http://static.zybuluo.com/a807257775/j4001wstgr9q9jjixzuykmt7/image_1e5os8576150o18hl17vh4kr1ko816.png" alt="image_1e5os8576150o18hl17vh4kr1ko816.png-221.8kB"></p>
<h2 id="2、基于Nginx构建直播系统"><a href="#2、基于Nginx构建直播系统" class="headerlink" title="2、基于Nginx构建直播系统"></a>2、基于Nginx构建直播系统</h2><blockquote>
<p>如图二所示，利用nginx rtmp模块+ffmpeg工具，实现rtmp及hls协议分流+水印的直播系统，通过ffmpeg将直播流hls推送至阿里云、腾讯云，用户可通过本地地址或云端地址观看直播，有无水印取决ffmpeg推流配置；</p>
</blockquote>
<p>图二：<img src="http://static.zybuluo.com/a807257775/4bevf4x04zqdw9yc1ocq5rkn/image_1e5oraqup16tp1ho89lllk7q8lp.png" alt="image_1e5oraqup16tp1ho89lllk7q8lp.png-62.1kB"></p>
<ul>
<li>提示：<code>FFmpeg</code>是一套可以用来记录、转换数字音频、视频，并能将其转化为流的开源计算机程序。采用LGPL或GPL许可证。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频/视频编解码库libavcodec，为了保证高可移植性和编解码质量，libavcodec里很多code都是从头开发的；</li>
</ul>
<h2 id="3、环境及相关软件介绍"><a href="#3、环境及相关软件介绍" class="headerlink" title="3、环境及相关软件介绍"></a>3、环境及相关软件介绍</h2><h3 id="3-1、实验环境"><a href="#3-1、实验环境" class="headerlink" title="3.1、实验环境"></a>3.1、实验环境</h3><table>
<thead>
<tr>
<th>平台</th>
<th>IP</th>
<th>用途</th>
<th>所需软件</th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS release 6.9 64Bit</td>
<td>172.21.0.5</td>
<td>拉端+水印处理+分流</td>
<td>nginx-1.16.1.tar.gz</td>
<td>x265_3.3.tar.gz</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td>nginx-rtmp-module-1.2.1.zip </td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td>ffmpeg-4.2.1.tar.bz2 </td>
</tr>
<tr>
<td>Windows 7</td>
<td>192.168.1.106</td>
<td>推端</td>
<td>OBS+PotPlayer </td>
</tr>
</tbody>
</table>
<blockquote>
<p>提示：安装ffmpeg的过程相对比较麻烦，如需要开启更多ffmpeg功能，则对应的依赖关系就复杂</p>
</blockquote>
<h2 id="4、安装及部署"><a href="#4、安装及部署" class="headerlink" title="4、安装及部署"></a>4、安装及部署</h2><blockquote>
<p>提示：安装过程均基于oh my zsh的shell下进行</p>
</blockquote>
<h3 id="4-1、nginx及rtmp模块编译安装"><a href="#4-1、nginx及rtmp模块编译安装" class="headerlink" title="4.1、nginx及rtmp模块编译安装"></a>4.1、nginx及rtmp模块编译安装</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># root @ VM_0_5_centos in /soft [12:50:41]</span><br><span class="line">$ x nginx-1.16.1.tar.gz</span><br><span class="line">$ x nginx-rtmp-module-1.2.1.zip</span><br><span class="line">$ yum install vim telnet wget nethogs htop glances dstat traceroute lrzsz goaccess ntpdate dos2unix openssl-devel tcpdump lrzsz fio -y</span><br><span class="line">$ yum install pcre-devel zlib-devel libjpeg-devel libpng-devel freetype-devel openssl-devel curl curl-devel libxml2 libxml2-devel libjpeg libjpeg-devel libpng libpng-devel libmcrypt libmcrypt-devel openldap openldap-devel openssh-client -y</span><br><span class="line">$ useradd -s /sbin/nologin -M www</span><br><span class="line"># root @ VM_0_5_centos in /soft/nginx-1.16.1 [12:51:41]</span><br><span class="line">$ ./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_stub_status_module --with-http_ssl_module --without-mail_pop3_module --without-mail_smtp_module --without-mail_imap_module --add-module=/soft/nginx-rtmp-module-1.2.1/nginx-rtmp-module-1.2.1/</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line">$ cd /etc/init.d</span><br><span class="line"># root @ VM_0_5_centos in /etc/init.d [12:58:18]</span><br><span class="line">$ vim nginx</span><br><span class="line">$ chmod 777 nginx</span><br><span class="line">$ chkconfig nginx on</span><br></pre></td></tr></table></figure>
<h3 id="4-2、nginx配置及rtmp运行参数"><a href="#4-2、nginx配置及rtmp运行参数" class="headerlink" title="4.2、nginx配置及rtmp运行参数"></a>4.2、nginx配置及rtmp运行参数</h3><p>附件：<img src="http://static.zybuluo.com/a807257775/t9o7ak1b0ug7tnbb7ermzqkw/nginx%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%8F%8Artmp%E8%BF%90%E8%A1%8C%E5%8F%82%E6%95%B0.zip" alt="nginx配置文件及rtmp运行参数.zip-3.9kB"></p>
<h3 id="4-2、ffmpeg编译安装"><a href="#4-2、ffmpeg编译安装" class="headerlink" title="4.2、ffmpeg编译安装"></a>4.2、ffmpeg编译安装</h3><blockquote>
<p>提示：安装ffmpeg前需解决相关依赖问题，并安装相关开发依赖组件，详见通用模板机安装手册；</p>
</blockquote>
<h4 id="4-2-1、dk-aac-2-0-1-tar-gz"><a href="#4-2-1、dk-aac-2-0-1-tar-gz" class="headerlink" title="4.2.1、dk-aac-2.0.1.tar.gz"></a>4.2.1、dk-aac-2.0.1.tar.gz</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x fdk-aac-2.0.1.tar.gz</span><br><span class="line">cd fdk-aac-2.0.1</span><br><span class="line">autoreconf -fiv</span><br><span class="line">./configure --disable-shared</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h4 id="4-2-2、lame-3-100-tar-gz"><a href="#4-2-2、lame-3-100-tar-gz" class="headerlink" title="4.2.2、lame-3.100.tar.gz"></a>4.2.2、lame-3.100.tar.gz</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x lame-3.100.tar.gz</span><br><span class="line">cd /soft/lame-3.100</span><br><span class="line">./configure --disable-shared --enable-nasm</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h4 id="4-2-3、opus-1-3-1-tar-gz"><a href="#4-2-3、opus-1-3-1-tar-gz" class="headerlink" title="4.2.3、opus-1.3.1.tar.gz"></a>4.2.3、opus-1.3.1.tar.gz</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x opus-1.3.1.tar.gz</span><br><span class="line">cd /soft/opus-1.3.1</span><br><span class="line">./configure --disable-shared</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h4 id="4-2-3、libvpx-zip"><a href="#4-2-3、libvpx-zip" class="headerlink" title="4.2.3、libvpx.zip"></a>4.2.3、libvpx.zip</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://chromium.googlesource.com/webm/libvpx.git/+archive/7ec7a33a081aeeb53fed1a8d87e4cbd189152527.tar.gz</span><br><span class="line">x libvpx.zip</span><br><span class="line">./configure --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=yasm</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h4 id="4-4-4、llibvorbis-1-3-6-zip"><a href="#4-4-4、llibvorbis-1-3-6-zip" class="headerlink" title="4.4.4、llibvorbis-1.3.6.zip"></a>4.4.4、llibvorbis-1.3.6.zip</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://ftp.osuosl.org/pub/xiph/releases/vorbis/libvorbis-1.3.6.zip</span><br><span class="line">x libvorbis-1.3.6.zip</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h4 id="4-4-5、libogg-1-3-0-tar-gz"><a href="#4-4-5、libogg-1-3-0-tar-gz" class="headerlink" title="4.4.5、libogg-1.3.0.tar.gz"></a>4.4.5、libogg-1.3.0.tar.gz</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http://downloads.xiph.org/releases/ogg/libogg-1.3.0.tar.gz</span><br><span class="line">x libogg-1.3.0.tar.gz</span><br><span class="line">cd libogg-1.3.0</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h4 id="4-4-6、SDL-1-2-15-tar-gz"><a href="#4-4-6、SDL-1-2-15-tar-gz" class="headerlink" title="4.4.6、SDL-1.2.15.tar.gz"></a>4.4.6、SDL-1.2.15.tar.gz</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http://www.libsdl.org/release/SDL-1.2.15.tar.gz</span><br><span class="line">x SDL-1.2.15.tar.gz</span><br><span class="line">cd SDL-1.2.15</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h4 id="4-4-8、nasm-2-13-03-tar-xz"><a href="#4-4-8、nasm-2-13-03-tar-xz" class="headerlink" title="4.4.8、nasm-2.13.03.tar.xz"></a>4.4.8、nasm-2.13.03.tar.xz</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget http://www.nasm.us/pub/nasm/releasebuilds/2.13.03/nasm-2.13.03.tar.xz</span><br><span class="line">x nasm-2.13.03.tar.xz</span><br><span class="line">cd nasm-2.13.03</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h4 id="4-4-7、x264"><a href="#4-4-7、x264" class="headerlink" title="4.4.7、x264"></a>4.4.7、x264</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone --depth 1 https://code.videolan.org/videolan/x264.gi</span><br><span class="line">cd x264</span><br><span class="line">export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/</span><br><span class="line">./configure --enable-static</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h4 id="4-4-8、x265-3-3-tar-gz"><a href="#4-4-8、x265-3-3-tar-gz" class="headerlink" title="4.4.8、x265_3.3.tar.gz"></a>4.4.8、x265_3.3.tar.gz</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar xvf x265_3.3.tar.gz</span><br><span class="line">cd x265_3.3</span><br><span class="line">cd build/linux</span><br><span class="line">cmake -G &quot;Unix Makefiles&quot; -DENABLE_SHARED:bool=off ../../source</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<h4 id="4-4-9、ffmpeg-4-2-1-tar-bz2"><a href="#4-4-9、ffmpeg-4-2-1-tar-bz2" class="headerlink" title="4.4.9、ffmpeg-4.2.1.tar.bz2"></a>4.4.9、ffmpeg-4.2.1.tar.bz2</h4><ul>
<li><code>ffmpeg</code>下载地址：<a href="http://ffmpeg.org/download.html" target="_blank" rel="noopener">http://ffmpeg.org/download.html</a></li>
<li><code>ffmpeg</code>官方安装手册：<a href="https://trac.ffmpeg.org/wiki/CompilationGuide/Centos" target="_blank" rel="noopener">https://trac.ffmpeg.org/wiki/CompilationGuide/Centos</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># root @ VM_0_5_centos in /soft/ffmpeg-4.2.1 [12:59:35]</span><br><span class="line">$ yum install librtmp librtmp-devel libtheora libtheora-devel libwebp libwebp-devel -y  </span><br><span class="line">$ yum install autoconf automake bzip2 cmake freetype-devel gcc gcc-c++ git libtool make mercurial pkgconfig zlib-devel x264-devel yasm -y</span><br><span class="line">$ cd /usr/local/lib</span><br><span class="line">$ cp -rfp lib* /lib64</span><br><span class="line">$ tar xvJf ffmpeg-4.2.2.tar.xz</span><br><span class="line">$ cd ffmpeg-4.2.2</span><br><span class="line">$ export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/</span><br><span class="line">$ ./configure --prefix=/usr/local --pkg-config-flags=&quot;--static&quot; --extra-cflags=&quot;-I/usr/local/include&quot; --extra-ldflags=&quot;-L/usr/local/lib&quot; --enable-version3 --enable-gpl --enable-nonfree --enable-small --enable-libmp3lame --enable-libx264 --enable-libx265 --enable-libvpx --enable-libtheora --enable-libvorbis --enable-libopus --enable-libfdk-aac --enable-libass --enable-libwebp --enable-librtmp --enable-postproc --enable-avresample --enable-libfreetype --enable-openssl --disable-debug --disable-doc --disable-ffplay</span><br><span class="line">$ make &amp;&amp; make install</span><br><span class="line"># root @ VM_0_5_centos in ~ [14:03:21] </span><br><span class="line">$ ffmpeg  -version</span><br><span class="line">ffmpeg version 4.2.1 Copyright (c) 2000-2019 the FFmpeg developers</span><br><span class="line">built with gcc 4.4.7 (GCC) 20120313 (Red Hat 4.4.7-23)</span><br><span class="line">configuration: --prefix=/usr/local --pkg-config-flags=--static --extra-cflags=-I/usr/local/include --extra-ldflags=-L/usr/local/lib --enable-version3 --enable-gpl --enable-nonfree --enable-small --enable-libmp3lame --enable-libx264 --enable-libx265 --enable-libvpx --enable-libtheora --enable-libvorbis --enable-libopus --enable-libfdk-aac --enable-libass --enable-libwebp --enable-librtmp --enable-postproc --enable-avresample --enable-libfreetype --enable-openssl --disable-debug --disable-doc --disable-ffplay</span><br><span class="line">libavutil      56. 31.100 / 56. 31.100</span><br><span class="line">libavcodec     58. 54.100 / 58. 54.100</span><br><span class="line">libavformat    58. 29.100 / 58. 29.100</span><br><span class="line">libavdevice    58.  8.100 / 58.  8.100</span><br><span class="line">libavfilter     7. 57.100 /  7. 57.100</span><br><span class="line">libavresample   4.  0.  0 /  4.  0.  0</span><br><span class="line">libswscale      5.  5.100 /  5.  5.100</span><br><span class="line">libswresample   3.  5.100 /  3.  5.100</span><br><span class="line">libpostproc    55.  5.100 / 55.  5.100</span><br></pre></td></tr></table></figure>
<h2 id="4、直播实战"><a href="#4、直播实战" class="headerlink" title="4、直播实战"></a>4、直播实战</h2><ul>
<li>手机直播地址：<code>http://49.232.152.80/hls/ar640.m3u8</code>（不依赖flash任意浏览器均可播放）</li>
<li>手机直播地址（有水印）：<code>http://49.232.152.80/hls/ar1280_wm.m3u8</code>（不依赖flash任意浏览器均可播放）</li>
<li>PC客户端直播地址：<code>http://49.232.152.80:1935/stream/ar1280</code>（需下载播放器potplayer）</li>
</ul>
<h3 id="4-1、OBS推流软件配置"><a href="#4-1、OBS推流软件配置" class="headerlink" title="4.1、OBS推流软件配置"></a>4.1、OBS推流软件配置</h3><p><img src="http://static.zybuluo.com/a807257775/hadbrptqmh5pna1adolutrem/image_1e5p2kddedkj1pd71b9i178ofvm1v.png" alt="image_1e5p2kddedkj1pd71b9i178ofvm1v.png-34.2kB"><br><img src="http://static.zybuluo.com/a807257775/5v4uzx634e3uz0ijo5jstgiy/image_1e5p2s96ei9d50dfto1dkk1v8u2c.png" alt="image_1e5p2s96ei9d50dfto1dkk1v8u2c.png-117.3kB"></p>
<h3 id="4-2、PC端-amp-手机端观看直播"><a href="#4-2、PC端-amp-手机端观看直播" class="headerlink" title="4.2、PC端&amp;手机端观看直播"></a>4.2、PC端&amp;手机端观看直播</h3><ul>
<li>PC端使用PotPlayer播放rtmp流<br><img src="http://static.zybuluo.com/a807257775/0e7g82h0g1y2pw5pp7e58hjk/image_1e5p3gt9p1hv51oq3thl1jdpojh43.png" alt="image_1e5p3gt9p1hv51oq3thl1jdpojh43.png-42.6kB"><br><img src="http://static.zybuluo.com/a807257775/0kxxfzenmnm6frf9mszb2a3h/image_1e5p3gg3l1ejf1vb94mm1odb18m3m.png" alt="image_1e5p3gg3l1ejf1vb94mm1odb18m3m.png-56.6kB"></li>
<li>手机端浏览器播放直播<br>有水印：<img src="http://static.zybuluo.com/a807257775/f7gy0j2vdb3f5abun4teozwg/image_1e5p3jaan1bld1nlncouq1aj0s4g.png" alt="image_1e5p3jaan1bld1nlncouq1aj0s4g.png-106.3kB"><br>无水印：<img src="http://static.zybuluo.com/a807257775/dv6p4so2jgm9zdn5amg89feh/image_1e5p3cl3a1ugvt5v1rqf1l3tvq2p.png" alt="image_1e5p3cl3a1ugvt5v1rqf1l3tvq2p.png-92.8kB"></li>
</ul>
<h3 id="4-3、扩展部分"><a href="#4-3、扩展部分" class="headerlink" title="4.3、扩展部分"></a>4.3、扩展部分</h3><blockquote>
<p>提示：可构建h5页面，嵌套rtmp播放流，手机网页即可实现实时观看直播</p>
</blockquote>
]]></content>
      <categories>
        <category>NGINX文档</category>
      </categories>
      <tags>
        <tag>NGINX代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx限速模块详解-req&amp;conn</title>
    <url>/2019/05/07/Nginx%E9%99%90%E9%80%9F%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3-req-conn/</url>
    <content><![CDATA[<h1 id="Nginx限速模块详解-req-amp-conn"><a href="#Nginx限速模块详解-req-amp-conn" class="headerlink" title="Nginx限速模块详解-req&amp;conn"></a>Nginx限速模块详解-req&amp;conn</h1><h2 id="1、req-amp-conn模块介绍"><a href="#1、req-amp-conn模块介绍" class="headerlink" title="1、req&amp;conn模块介绍"></a>1、req&amp;conn模块介绍</h2><ul>
<li><code>ngx_http_limit_req_module</code> 模块用于限制对每个定义键的请求处理速率，例如，单客户端IP的每秒请求数。实现的原理是使用“漏桶”原理。</li>
<li><code>ngx_http_limit_conn_module</code>模块用于限制每个定义的键的连接数，特别是每个IP的连接数。</li>
</ul>
<h2 id="2、req模块指令解析"><a href="#2、req模块指令解析" class="headerlink" title="2、req模块指令解析"></a>2、req模块指令解析</h2><blockquote>
<p>提示：速率是指每秒的请求指定速率，如果要设置每秒请求低于一个请求的速率，可以设置为r/每分钟，例如30r/m<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#设置共享内存区，以及请求最大数。当请求的速率大于配置的速率，那么这些请求将会被延迟处理。如果，有过多的请求被延迟，超过了最大的限制，服务器将返回503状态码。默认情况下，最大限制为0。</span><br><span class="line">Syntax: limit_req zone=name [burst=number] [nodelay];  </span><br><span class="line">Default: -</span><br><span class="line">Context: http, server, location</span><br></pre></td></tr></table></figure></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#设置服务器拒绝请求速率，或者延迟处理的情况下的日志级别。对于延迟的请求来说，日志的级	别比拒绝请求要低。例如，“limit_req_log_level notice” 是通知级别，那么，延迟请求只是信息的日志级别</span><br><span class="line">Syntax: limit_req_log_level info | notice | warn | error;  </span><br><span class="line">Default: limit_req_log_level error;  </span><br><span class="line">Context: http, server, location  </span><br><span class="line">This directive appeared in version 0.8.18.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#设置拒绝请求时候的http返回状态码。</span><br><span class="line">Syntax: limit_req_status code;  </span><br><span class="line">Default: limit_req_status 503;  </span><br><span class="line">Context: http, server, location  </span><br><span class="line">This directive appeared in version 1.3.15.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#为各种定义的键配置共享内存大小，包括当前连接数。key可以是文本、变量、也可以是文本与变量结合，对于空的key请求，不会进行计数。</span><br><span class="line">Syntax: limit_req_zone key zone=name:size rate=rate;  </span><br><span class="line">Default: —  </span><br><span class="line">Context: http</span><br></pre></td></tr></table></figure>
<h3 id="2-1、req指令example"><a href="#2-1、req指令example" class="headerlink" title="2.1、req指令example"></a>2.1、req指令example</h3><blockquote>
<p>示例一、此配置会对当前所有站点进行单个IP的访问速率进行限制<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">limit_req_zone $binary_remote_addr zone=perip:10m rate=1r/s;  </span><br><span class="line">limit_req_zone $server_name zone=perserver:10m rate=10r/s;   </span><br><span class="line">server &#123;  </span><br><span class="line">    ...  </span><br><span class="line">    limit_req zone=perip burst=5 nodelay;  </span><br><span class="line">    limit_req zone=perserver burst=10;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p>示例二、此配置仅针对引用此<code>zone=one</code>的vhosts生效。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#允许1秒钟不超过1个请求，最大延迟请求数量不大于5.</span><br><span class="line">#如果请求不需要被延迟，添加nodelay参数，服务器会立刻返回503状态码</span><br><span class="line">limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;  </span><br><span class="line">limit_req zone=one burst=5 nodelay;  </span><br><span class="line">server &#123;  </span><br><span class="line">location /search/ &#123;  </span><br><span class="line">    limit_req zone=one burst=5;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<ul>
<li>列子解析：<blockquote>
<p>以上的例子，客户端IP作为了一个键值。注意到这里使用了<code>$binary_remote_addr</code>，而不是<code>$remote_addr</code>。<code>$remote_addr</code>变量的大小在7到15个字节之间，存储占用32位平台上的32或64字节的内存，并且在64位平台上总是有64个字节内存。<code>$binary_remote_addr</code>变量总是占用4个字节内存，存储占用32位平台上的32字节的内存，并且在64位平台上总是有64个字节内存。一个存储区可以保存3200个32字节或1600个64字节。如果存储区满，服务器将对其他请求相应503状态码。</p>
</blockquote>
</li>
</ul>
<h2 id="3、conn模块指令解析"><a href="#3、conn模块指令解析" class="headerlink" title="3、conn模块指令解析"></a>3、conn模块指令解析</h2><blockquote>
<p><strong>提示：对于每个http请求，只有当请求的header被完全读取的时候，才被计算作1个链接数。</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#设置zone的共享内存大小，以及连接数的最大允许值。当超过这个限制的时候，服务器将返回503状态值。</span><br><span class="line">Syntax:	limit_conn zone number;</span><br><span class="line">Default: —</span><br><span class="line">Context: http, server, location</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#设置当前服务器限制连接数下所需的日志记录级别。</span><br><span class="line">Syntax:	limit_conn_log_level info | notice | warn | error;</span><br><span class="line">Default:	</span><br><span class="line">limit_conn_log_level error;</span><br><span class="line">Context: http, server, location</span><br><span class="line">This directive appeared in version 0.8.18.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#设置拒绝连接后响应的http状态码，默认是503.</span><br><span class="line">Syntax:	limit_conn_status code;</span><br><span class="line">Default: limit_conn_status 503;</span><br><span class="line">Context: http, server, location</span><br><span class="line">This directive appeared in version 1.3.15.</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#以下指令发布于版本1.1.8，并且在版本1.7.6中移除。等效limit_conn_zone 语法为：</span><br><span class="line">Syntax:	limit_conn_zone key zone=name:size;</span><br><span class="line">Default: —</span><br><span class="line">Context: http</span><br></pre></td></tr></table></figure>
<h2 id="4、生产实际案例配置示范"><a href="#4、生产实际案例配置示范" class="headerlink" title="4、生产实际案例配置示范"></a>4、生产实际案例配置示范</h2><h3 id="4-1、需求：对指定域名的指定localtion做限流限速"><a href="#4-1、需求：对指定域名的指定localtion做限流限速" class="headerlink" title="4.1、需求：对指定域名的指定localtion做限流限速"></a>4.1、需求：对指定域名的指定<code>localtion</code>做限流限速</h3><blockquote>
<p>如下配置均在NGINX HTTP段中进行全局配置，VHOSTS进行引用生效</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#针对站点进行限速。设置内存共享区为10m，以及最大请求数为每秒1次，当请求的速率大于配置的速率，那么这些请求将会被延迟处理。如果，有过多的请求被延迟，超过了最大的限制，服务器将返回503状态码。默认情况下，最大限制为0</span><br><span class="line">limit_req_zone $server_name zone=perserver:10m rate=1r/s;</span><br><span class="line"></span><br><span class="line">#针对源IP地址进行限速。设置内存共享区为10m，以及最大请求数为每秒1次，当请求的速率大于配置的速率，那么这些请求将会被延迟处理。如果，有过多的请求被延迟，超过了最大的限制，服务器将返回503状态码。默认情况下，最大限制为0</span><br><span class="line">limit_req_zone $binary_remote_addr zone=perip:10m rate=1r/s;</span><br><span class="line"></span><br><span class="line">#设置拒绝请求时候的http返回状态码。</span><br><span class="line">limit_req_status 503;</span><br><span class="line"></span><br><span class="line">#设置服务器拒绝请求速率，或者延迟处理的情况下的日志级别。对于延迟的请求来说，日志的级别比拒绝请求要低。例如，“limit_req_log_level notice” 是通知级别，那么，延迟请求只是信息的日志级别</span><br><span class="line">limit_req_log_level error;</span><br><span class="line"></span><br><span class="line">#针对源IP地址进行连接限制。设置内存共享区为10m，如果，有过多的连接，超过了最大的限制，服务器将返回503状态码。默认情况下，最大限制为0</span><br><span class="line">limit_conn_zone $binary_remote_addr zone=peripconn:10m;</span><br><span class="line"></span><br><span class="line">#针对站点进行连接限制。设置内存共享区为10m，如果，有过多的连接，超过了最大的限制，服务器将返回503状态码。默认情况下，最大限制为0</span><br><span class="line">limit_conn_zone $server_name zone=perserverconn:10m;</span><br><span class="line"></span><br><span class="line">#设置拒绝请求时候的http返回状态码。</span><br><span class="line">limit_conn_status 503;</span><br><span class="line"></span><br><span class="line">#设置服务器拒绝请求连接，或者延迟处理的情况下的日志级别。对于延迟的请求来说，日志的级别比拒绝请求要低。例如，“limit_req_log_level notice” 是通知级别，那么，延迟请求只是信息的日志级别</span><br><span class="line">limit_conn_log_level error;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">location ~ /lisirlife/alipayRefundNotify.action&#123;</span><br><span class="line">  proxy_pass http://jscs_load_balancing;</span><br><span class="line">  include  cmsproxy.conf;</span><br><span class="line">  error_log  logs/lisirlife_error.log  error;</span><br><span class="line">  #允许1秒钟不超过1个请求，最大延迟请求数量不大于5. 如果请求不需要被延迟，添加nodelay参数，服务器会立刻返回503状态码。</span><br><span class="line">  limit_req zone=perip burst=1;</span><br><span class="line">  #针对源IP地址进行连接限制，限制同一IP并发连接数为1</span><br><span class="line">  limit_conn peripconn 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>NGINX文档</category>
      </categories>
      <tags>
        <tag>NGINX代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx隐藏版本及错误信息</title>
    <url>/2019/05/10/Nginx%E9%9A%90%E8%97%8F%E7%89%88%E6%9C%AC%E5%8F%8A%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h1 id="Nginx隐藏版本及错误信息"><a href="#Nginx隐藏版本及错误信息" class="headerlink" title="Nginx隐藏版本及错误信息"></a>Nginx隐藏版本及错误信息</h1><h2 id="操作步骤如下："><a href="#操作步骤如下：" class="headerlink" title="操作步骤如下："></a><strong>操作步骤如下：</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx-1.12.1]# vim src/core/nginx.h</span><br><span class="line"></span><br><span class="line">#define NGINX_VERSION      &quot;1.12.1&quot;</span><br><span class="line">#define NGINX_VER          &quot;NGINX/&quot; NGINX_VERSION</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx-1.12.1]# vim src/http/ngx_http_header_filter_module.c </span><br><span class="line">static char ngx_http_server_string[] = &quot;Server: nginx&quot; CRLF;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx-1.12.1]# vim src/http/ngx_http_special_response.c </span><br><span class="line">&quot;&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;&quot; CRLF</span><br><span class="line">&quot;&lt;/body&gt;&quot; CRLF</span><br><span class="line">&quot;&lt;/html&gt;&quot; CRLF</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>NGINX文档</category>
      </categories>
      <tags>
        <tag>NGINX代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Oracle11G R2部署手册</title>
    <url>/2020/12/02/Oracle11G%20R2%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h1 id="Oracle11G-R2部署手册"><a href="#Oracle11G-R2部署手册" class="headerlink" title="Oracle11G R2部署手册"></a>Oracle11G R2部署手册</h1><h2 id="1、实验环境："><a href="#1、实验环境：" class="headerlink" title="1、实验环境："></a>1、实验环境：</h2><table>
<thead>
<tr>
<th>平台</th>
<th>IP</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS 7.8 64Bit</td>
<td>192.168.x.x</td>
<td>Oracle11G R2</td>
</tr>
</tbody>
</table>
<h2 id="2、基础环境配置与优化"><a href="#2、基础环境配置与优化" class="headerlink" title="2、基础环境配置与优化"></a>2、基础环境配置与优化</h2><h3 id="2-1、配置yum源，均采用阿里云yum源"><a href="#2-1、配置yum源，均采用阿里云yum源" class="headerlink" title="2.1、配置yum源，均采用阿里云yum源"></a>2.1、配置yum源，均采用阿里云yum源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/* /tmp</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line">curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure>
<h3 id="2-2、时区与时间同步"><a href="#2-2、时区与时间同步" class="headerlink" title="2.2、时区与时间同步"></a>2.2、时区与时间同步</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br><span class="line">yum install dnf ntpdate -y</span><br><span class="line">dnf makecache</span><br><span class="line">ntpdate ntp.aliyun.com</span><br></pre></td></tr></table></figure>
<h3 id="2-3、安装开发组件"><a href="#2-3、安装开发组件" class="headerlink" title="2.3、安装开发组件"></a>2.3、安装开发组件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum groupinstall &quot;Development Tools&quot; --setopt=group_package_types=mandatory,default,optional</span><br></pre></td></tr></table></figure>
<h3 id="2-4、安装常用工具软件"><a href="#2-4、安装常用工具软件" class="headerlink" title="2.4、安装常用工具软件"></a>2.4、安装常用工具软件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install tree net-tools bind-utils tree sysstat NetworkManager-tui ntp iftop vim telnet wget nethogs htop glances dstat traceroute lrzsz goaccess ntpdate dos2unix openssl-devel tcpdump lrzsz fio nss curl ca-certificates socat -y</span><br></pre></td></tr></table></figure>
<h3 id="2-5、安装oracle数据库依赖"><a href="#2-5、安装oracle数据库依赖" class="headerlink" title="2.5、安装oracle数据库依赖"></a>2.5、安装oracle数据库依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install binutils-2.* compat-libstdc++-33* elfutils-libelf-0.* elfutils-libelf-devel-* gcc-4.* gcc-c++-4.* glibc-2.* glibc-common-2.* glibc-devel-2.* glibc-headers-2.* ksh-2* libaio-0.* libaio-devel-0.* libgcc-4.* libstdc++-4.* libstdc++-devel-4.* make-3.* sysstat-7.* unixODBC-2.* unixODBC-devel-2.* pdksh* -y</span><br></pre></td></tr></table></figure>
<h4 id="2-6、关闭selinux"><a href="#2-6、关闭selinux" class="headerlink" title="2.6、关闭selinux"></a>2.6、关闭selinux</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">sed -i &apos;s/^SELINUX=enforcing$/SELINUX=disabled/&apos; /etc/selinux/config</span><br></pre></td></tr></table></figure>
<h3 id="2-7、关闭防火墙"><a href="#2-7、关闭防火墙" class="headerlink" title="2.7、关闭防火墙"></a>2.7、关闭防火墙</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl disable --now firewalld</span><br></pre></td></tr></table></figure>
<h3 id="2-8、设置ulimit"><a href="#2-8、设置ulimit" class="headerlink" title="2.8、设置ulimit"></a>2.8、设置ulimit</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed -i &quot;s/4096/65536/g&quot; /etc/security/limits.d/20-nproc.conf</span><br><span class="line">vim /etc/security/limits.conf</span><br><span class="line">    oracle          soft    nproc  2047</span><br><span class="line">    oracle          hard    nproc  16384</span><br><span class="line">    oracle          soft    nofile  1024</span><br><span class="line">    oracle          hard    nofile  65536</span><br><span class="line">    # End of file</span><br><span class="line">    * - nofile 65536</span><br></pre></td></tr></table></figure>
<h3 id="2-9、配置内核参数"><a href="#2-9、配置内核参数" class="headerlink" title="2.9、配置内核参数"></a>2.9、配置内核参数</h3><ul>
<li>vim /etc/sysctl.conf<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#filemax</span><br><span class="line">fs.file-max = 6815744</span><br><span class="line">kernel.sem = 250 32000 100 128</span><br><span class="line">#关闭ipv6</span><br><span class="line">net.ipv6.conf.all.disable_ipv6 = 1</span><br><span class="line">net.ipv6.conf.default.disable_ipv6 = 1</span><br><span class="line"># 避免放大攻击</span><br><span class="line">net.ipv4.icmp_echo_ignore_broadcasts = 1</span><br><span class="line"># 开启恶意icmp错误消息保护</span><br><span class="line">net.ipv4.icmp_ignore_bogus_error_responses = 11</span><br><span class="line">#决定检查过期多久邻居条目</span><br><span class="line">net.ipv4.neigh.default.gc_stale_time=120</span><br><span class="line">#使用arp_announce / arp_ignore解决ARP映射问题</span><br><span class="line">net.ipv4.conf.default.arp_announce = 2</span><br><span class="line">net.ipv4.conf.all.arp_announce=2</span><br><span class="line">net.ipv4.conf.lo.arp_announce=2</span><br><span class="line">#处理无源路由的包</span><br><span class="line">net.ipv4.conf.all.accept_source_route = 0</span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line">kernel.sysrq = 0</span><br><span class="line">#core文件名中添加pid作为扩展名</span><br><span class="line">kernel.core_uses_pid = 1 </span><br><span class="line">#修改消息队列长度</span><br><span class="line">kernel.msgmnb = 65536</span><br><span class="line">kernel.msgmax = 65536</span><br><span class="line">#开机路由转发</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">#开启反向路径过滤</span><br><span class="line">net.ipv4.conf.all.rp_filter = 1</span><br><span class="line">net.ipv4.conf.default.rp_filter = 1</span><br><span class="line">#设置最大内存共享段大小bytes</span><br><span class="line">kernel.shmmax = 68719476736</span><br><span class="line">kernel.shmall = 4294967296</span><br><span class="line">#timewait的数量，默认180000</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 20000</span><br><span class="line">net.ipv4.tcp_sack = 1</span><br><span class="line">net.ipv4.tcp_window_scaling = 1</span><br><span class="line">net.ipv4.tcp_rmem = 4096 87380 4194304</span><br><span class="line">net.ipv4.tcp_wmem = 4096 16384 4194304</span><br><span class="line">net.core.wmem_default = 8388608</span><br><span class="line">net.core.rmem_default = 8388608</span><br><span class="line">net.core.rmem_max = 16777216</span><br><span class="line">net.core.wmem_max = 16777216</span><br><span class="line">#每个网络接口接收数据包的速率比内核处理这些包的速率快时，允许送到队列的数据包的最大数目。</span><br><span class="line">net.core.netdev_max_backlog = 32768</span><br><span class="line">#记录的那些尚未收到客户端确认信息的连接请求的最大值。对于有128M内存的系统而言，缺省值是1024</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 65536</span><br><span class="line">#web应用中listen函数的backlog默认会给我们内核参数的net.core.somaxconn限制到128，而nginx定义的NGX_LISTEN_BACKLOG默认为511，所以有必要调整这个值。</span><br><span class="line">net.core.somaxconn = 32768</span><br><span class="line">#限制仅仅是为了防止简单的DoS 攻击</span><br><span class="line">net.ipv4.tcp_max_orphans = 3276800</span><br><span class="line">#未收到客户端确认信息的连接请求的最大值</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 262144</span><br><span class="line">net.ipv4.tcp_timestamps = 0</span><br><span class="line">#内核放弃建立连接之前发送SYNACK 包的数量</span><br><span class="line">net.ipv4.tcp_synack_retries = 1</span><br><span class="line">#内核放弃建立连接之前发送SYN 包的数量</span><br><span class="line">net.ipv4.tcp_syn_retries = 1</span><br><span class="line">#启用timewait 快速回收</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">#开启重用。允许将TIME-WAIT sockets 重新用于新的TCP 连接</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_mem = 94500000 915000000 927000000</span><br><span class="line">net.ipv4.tcp_fin_timeout = 1</span><br><span class="line"># 开启SYN洪水攻击保护(防范少量SYN攻击)</span><br><span class="line">net.ipv4.tcp_syncookies = 1 </span><br><span class="line">#允许系统打开的端口范围</span><br><span class="line">net.ipv4.ip_local_port_range = 9000 65500</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3、安装Oracle数据库"><a href="#3、安装Oracle数据库" class="headerlink" title="3、安装Oracle数据库"></a>3、安装Oracle数据库</h2><h3 id="3-1、创建运行oracle数据库的系统用户和用户组"><a href="#3-1、创建运行oracle数据库的系统用户和用户组" class="headerlink" title="3.1、创建运行oracle数据库的系统用户和用户组"></a>3.1、创建运行oracle数据库的系统用户和用户组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">groupadd oinstall</span><br><span class="line">groupadd dba</span><br><span class="line">useradd -g oinstall -g dba -m oracle</span><br><span class="line">passwd oracle</span><br></pre></td></tr></table></figure>
<h3 id="3-2、创建oracle数据库安装目录"><a href="#3-2、创建oracle数据库安装目录" class="headerlink" title="3.2、创建oracle数据库安装目录"></a>3.2、创建oracle数据库安装目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -pv /data/&#123;oracle,oraInventory,database&#125;</span><br><span class="line">chown -R oracle:oinstall /data/</span><br></pre></td></tr></table></figure>
<h3 id="3-3、修改OS系统标识"><a href="#3-3、修改OS系统标识" class="headerlink" title="3.3、修改OS系统标识"></a>3.3、修改OS系统标识</h3><ul>
<li>oracle默认不支持CentOS系统安装，Oracle Database 11g Release 2 的 OS要求参考： <a href="https://docs.oracle.com/cd/E11882_01/install.112/e47689/pre_install.htm#LADBI1106" target="_blank" rel="noopener">https://docs.oracle.com/cd/E11882_01/install.112/e47689/pre_install.htm#LADBI1106</a></li>
<li>vim /etc/redhat-release</li>
<li>redhat-7</li>
</ul>
<h3 id="3-4、配置Oracle用户的环境变量"><a href="#3-4、配置Oracle用户的环境变量" class="headerlink" title="3.4、配置Oracle用户的环境变量"></a>3.4、配置Oracle用户的环境变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#新增如下内容</span><br><span class="line">[oracle@aupserver ~]$ cat .bash_profile </span><br><span class="line">##oracle数据库安装目录</span><br><span class="line">export ORACLE_BASE=/data/oracle</span><br><span class="line">##oracle数据库路径</span><br><span class="line">export ORACLE_HOME=$ORACLE_BASE/product/11.2.0/db_1</span><br><span class="line">##oracle启动数据库实例名</span><br><span class="line">export ORACLE_SID=oracle</span><br><span class="line">##xterm窗口模式安装</span><br><span class="line">export ORACLE_TERM=xterm</span><br><span class="line">##添加系统环境变量</span><br><span class="line">export PATH=$ORACLE_HOME/bin:/usr/sbin:$PATH</span><br><span class="line">##添加系统环境变量</span><br><span class="line">export LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib:/usr/lib</span><br><span class="line">##防止安装过程出现乱码</span><br><span class="line">export LANG=en_US</span><br><span class="line">##设置Oracle客户端字符集，必须与Oracle安装时设置的字符集保持一致</span><br><span class="line">export NLS_LANG=AMERICAN_AMERICA.ZHS16GBK</span><br><span class="line">#使其立即生效</span><br><span class="line">[oracle@aupserver ~]$ source .bash_profile</span><br></pre></td></tr></table></figure>
<h3 id="3-5、解压安装包"><a href="#3-5、解压安装包" class="headerlink" title="3.5、解压安装包"></a>3.5、解压安装包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#解压数据</span><br><span class="line">unzip linux.x64_11gR2_database_2of2.zip -d /data/database/</span><br><span class="line">#调整权限</span><br><span class="line">chown -R oracle:oinstall /data/database/database/</span><br><span class="line">#切换oracle进行安装</span><br><span class="line">su oracle</span><br></pre></td></tr></table></figure>
<h3 id="3-6、图形化界面执行安装脚本"><a href="#3-6、图形化界面执行安装脚本" class="headerlink" title="3.6、图形化界面执行安装脚本"></a>3.6、图形化界面执行安装脚本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#切换到安装包目录</span><br><span class="line">cd /data/database/database</span><br><span class="line">#图形化界面下执行</span><br><span class="line">./runInstaller</span><br></pre></td></tr></table></figure>
<ul>
<li><p>弹出oracle数据库安装的对话框<br><img src="http://static.zybuluo.com/a807257775/i79gvf1fennnoq8ujlyp8fxp/image_1els5g8nkf4m5lpqh91metrkn1p.png" alt="image_1els5g8nkf4m5lpqh91metrkn1p.png-52.2kB"></p>
</li>
<li><p>去掉I wish to receive security updates via My Oracle Surrport 选项，点击Next<br><img src="http://static.zybuluo.com/a807257775/1miuja3gvf2f54wrq1b0e7uo/image_1els5hb6pgc2dtvg0nad6mnm2m.png" alt="image_1els5hb6pgc2dtvg0nad6mnm2m.png-71.1kB"><br><img src="http://static.zybuluo.com/a807257775/kf2jup92xapnsn2a5sreiugi/image_1els5hh1i1gb81pcm9gm1pob16d133.png" alt="image_1els5hh1i1gb81pcm9gm1pob16d133.png-24.9kB"></p>
</li>
<li><p>选择Install database software only，点击Next<br><img src="http://static.zybuluo.com/a807257775/v6i64es7umiw1i4hyb44g49o/image_1els5hr351nocpkl3r31im2tg53g.png" alt="image_1els5hr351nocpkl3r31im2tg53g.png-70.5kB"></p>
</li>
<li><p>选择Single instance database installation，点击Next<br><img src="http://static.zybuluo.com/a807257775/w1rjiudtetj58h2zovrk0zxq/image_1els5igl050t1ijtutcoss1nbr3t.png" alt="image_1els5igl050t1ijtutcoss1nbr3t.png-71.5kB"></p>
</li>
<li><p>在Available Languages中点选English、Simplified Chinese、Traditional Chinese，点击两个框中间的&gt;，将选中的语言加入到右边的Selected Languages中，然后点击Next<br><img src="http://static.zybuluo.com/a807257775/i1zulbx68c30e7tfw07kazsc/image_1els5iv9m1jj91nrp16pkr20t514a.png" alt="image_1els5iv9m1jj91nrp16pkr20t514a.png-80.2kB"></p>
</li>
<li><p>按照实际情况，选择企业版本<br><img src="http://static.zybuluo.com/a807257775/c3lfhbwzb08xgu6c0lnmxwxn/image_1els5jhromuurrs1q4d1ntedpc57.png" alt="image_1els5jhromuurrs1q4d1ntedpc57.png-82.7kB"></p>
</li>
<li><p>填写Oracle的软件路径和基本路径（配置过oracle用户变量的，则已经填好了）<br><img src="http://static.zybuluo.com/a807257775/86zcjpqo0488xebvnfiffbst/image_1els5lvd44g1fejhsu2n619k76k.png" alt="image_1els5lvd44g1fejhsu2n619k76k.png-76.5kB"></p>
</li>
<li><p>选择安装日志目录（配置过oracle用户变量的，则已经填好了）<br><img src="http://static.zybuluo.com/a807257775/pblg4fww74vzzsrj6z82jkh9/image_1els5migr192o2g3j41a1fcpu71.png" alt="image_1els5migr192o2g3j41a1fcpu71.png-76.5kB"></p>
</li>
<li><p>选择dba组<br><img src="http://static.zybuluo.com/a807257775/3jotckv4gfu9hrltw9o9da9t/image_1els5n1df1ek78od1k761tn5d2c7e.png" alt="image_1els5n1df1ek78od1k761tn5d2c7e.png-82.8kB"></p>
</li>
<li><p>这一步需解决如下报错，然后点击check again重新检测，直到没有问题即可（各别问题可以忽略）<br><img src="http://static.zybuluo.com/a807257775/zn27msbvmvy6hn6wgdkrpr7c/image_1els5nfth1bd716ih194jmgc9jf7r.png" alt="image_1els5nfth1bd716ih194jmgc9jf7r.png-99.1kB"></p>
</li>
<li><p>开始安装<br><img src="http://static.zybuluo.com/a807257775/jk8uedgcy13hkupa8xkyxj4h/image_1els5pp0jq8n1o1f14c8f4bbe388.png" alt="image_1els5pp0jq8n1o1f14c8f4bbe388.png-104.3kB"></p>
</li>
<li><p>安装完用root执行如下两个脚本<br><img src="http://static.zybuluo.com/a807257775/3p1jrbau15nn7iemns1drk3g/image_1els5q68tjmu1hno1alg1bit127a8l.png" alt="image_1els5q68tjmu1hno1alg1bit127a8l.png-33.2kB"></p>
</li>
<li><p>然后点击close，结束<br><img src="http://static.zybuluo.com/a807257775/hwstl7lo3hb46kkpp3h56ydw/image_1els5qv3ajk5dnkqji1u0p1l3j92.png" alt="image_1els5qv3ajk5dnkqji1u0p1l3j92.png-68.7kB"></p>
</li>
</ul>
<h2 id="4、配置监听listener"><a href="#4、配置监听listener" class="headerlink" title="4、配置监听listener"></a>4、配置监听listener</h2><h3 id="4-1、oracle用户再开一个终端运行netca"><a href="#4-1、oracle用户再开一个终端运行netca" class="headerlink" title="4.1、oracle用户再开一个终端运行netca"></a>4.1、oracle用户再开一个终端运行netca</h3><p><img src="http://static.zybuluo.com/a807257775/orq49mpv8odvoswgwtdd2eb8/image_1els5slaf8jo1ekq16gk9is1jfb9f.png" alt="image_1els5slaf8jo1ekq16gk9is1jfb9f.png-92.3kB"><br><img src="http://static.zybuluo.com/a807257775/baibmtb4o2hzhe75qcq3wt3s/image_1els5sp4515311gul1km51qnj1pmj9s.png" alt="image_1els5sp4515311gul1km51qnj1pmj9s.png-91.1kB"><br><img src="http://static.zybuluo.com/a807257775/pbdwicnmf48me3l16l5vedc6/image_1els5ssqp1ko21g1m1mtet0ijkqa9.png" alt="image_1els5ssqp1ko21g1m1mtet0ijkqa9.png-86.6kB"><br><img src="http://static.zybuluo.com/a807257775/armynrwt5efk1whiqr9m23h9/image_1els5t0d7f6j1onr1083vtrri6am.png" alt="image_1els5t0d7f6j1onr1083vtrri6am.png-95.5kB"><br><img src="http://static.zybuluo.com/a807257775/09isvgklo2gp7m0w0te2y64r/image_1els5t4aa1n2j1kte2uf1ppecrhb3.png" alt="image_1els5t4aa1n2j1kte2uf1ppecrhb3.png-89.1kB"><br><img src="http://static.zybuluo.com/a807257775/1bbl6l6w50516h4p00tzv5su/image_1els5u263trukphhfedp6rvvcd.png" alt="image_1els5u263trukphhfedp6rvvcd.png-82.7kB"><br><img src="http://static.zybuluo.com/a807257775/gp8xfsqltgnqqs9s8gmjd68w/image_1els5u9aj1al11cd418em11a0d3kcq.png" alt="image_1els5u9aj1al11cd418em11a0d3kcq.png-85.6kB"><br><img src="http://static.zybuluo.com/a807257775/mm4cpb2yo9vas9qflpk1glli/image_1els5udh1oi47h6sqs221sdbd7.png" alt="image_1els5udh1oi47h6sqs221sdbd7.png-92.6kB"></p>
<h3 id="4-2、检查lsnrct监听是否正常"><a href="#4-2、检查lsnrct监听是否正常" class="headerlink" title="4.2、检查lsnrct监听是否正常"></a>4.2、检查lsnrct监听是否正常</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[oracle@aupserver ~]$ lsnrctl status</span><br><span class="line">LSNRCTL for Linux: Version 11.2.0.1.0 - Production on 30-OCT-2020 15:19:16</span><br><span class="line">Copyright (c) 1991, 2009, Oracle.  All rights reserved.</span><br><span class="line">Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=aupserver)(PORT=1521)))</span><br></pre></td></tr></table></figure>
<h2 id="5、创建Oracle数据实例oracle"><a href="#5、创建Oracle数据实例oracle" class="headerlink" title="5、创建Oracle数据实例oracle"></a>5、创建Oracle数据实例oracle</h2><h3 id="5-1、使用oracle用户，运行dbca命令"><a href="#5-1、使用oracle用户，运行dbca命令" class="headerlink" title="5.1、使用oracle用户，运行dbca命令"></a>5.1、使用oracle用户，运行dbca命令</h3><p><img src="http://static.zybuluo.com/a807257775/vgzmb6odqnipqrb8v9o1myfn/image_1els68g7un711fp9spbsohdnte1.png" alt="image_1els68g7un711fp9spbsohdnte1.png-41.1kB"></p>
<ul>
<li>Database Configuration Assistant图形界面启动，直接点击next<br><img src="http://static.zybuluo.com/a807257775/xbnxf0j1w4vp9zuapg3bm46s/image_1els6aicc102o193f981mdbkt8f1.png" alt="image_1els6aicc102o193f981mdbkt8f1.png-89.6kB"><br><img src="http://static.zybuluo.com/a807257775/k7074it8bhebvtpcdjakgrr1/image_1els6b29dq04cb93dsn301t86fe.png" alt="image_1els6b29dq04cb93dsn301t86fe.png-92kB"></li>
<li>选择Custom Database<br><img src="http://static.zybuluo.com/a807257775/lakwx9fyhv88ev9fak5an7dw/image_1els6ccdo1q00nj1tht1gri1c97he.png" alt="image_1els6ccdo1q00nj1tht1gri1c97he.png-83.2kB"></li>
<li>Global Database Name框：输入前面确定的数据库名SID框<br><img src="http://static.zybuluo.com/a807257775/haxiqqom5yy6vsh4dcumkds9/image_1els6copn1pcffq41j03l7ffhhr.png" alt="image_1els6copn1pcffq41j03l7ffhhr.png-83.1kB"><br><img src="http://static.zybuluo.com/a807257775/v4hdv70toq5m712s7jiayi8h/image_1els6d1fms32c7o1ubq1oih1ruti8.png" alt="image_1els6d1fms32c7o1ubq1oih1ruti8.png-79.3kB"><br><img src="http://static.zybuluo.com/a807257775/i9c6ju1myhiehzjpinc08wcp/image_1els6dvan4u4hh0bcu1o9e1a5uj5.png" alt="image_1els6dvan4u4hh0bcu1o9e1a5uj5.png-87.5kB"><br><img src="http://static.zybuluo.com/a807257775/lvi1pms7prg0na0dfb2k8851/image_1els6jccem0p1rgk8q2sur1uhql2.png" alt="image_1els6jccem0p1rgk8q2sur1uhql2.png-104.3kB"></li>
<li>Recovery ConfigurationSpecify Fast Recovery Area如果前面Management Options步骤选择了自动备份，则保留勾选，并在下方：Fast Recovery Area框：修改为快速恢复区的目录名Fast Recovery Area Size框：调整快速恢复区的大小<br><img src="http://static.zybuluo.com/a807257775/7jj2qybrj6epl23c1lkjzfz2/image_1els6kc1bmb1jp585a1fg89mqlv.png" alt="image_1els6kc1bmb1jp585a1fg89mqlv.png-100.2kB"><br><img src="http://static.zybuluo.com/a807257775/0nln1w61gpdss5cbj6cboyn5/image_1els6kisl16fnads1hsi1e1mq49mc.png" alt="image_1els6kisl16fnads1hsi1e1mq49mc.png-92kB"></li>
<li>Initialization Parameters，内存分配20%（测试库所以分小一些，生产库可以分配较大的比如40%60%等），字符集选择兼容utf8的选项<br><img src="http://static.zybuluo.com/a807257775/nd7249eiu5tfkjkuw9v9cw7e/image_1els6l1ak1lt81rdl8s81del1btqmp.png" alt="image_1els6l1ak1lt81rdl8s81del1btqmp.png-97.3kB"><br><img src="http://static.zybuluo.com/a807257775/yza0b514w8ekggd81b3ojoau/image_1els6lc4b18evrt1mhug718dnj.png" alt="image_1els6lc4b18evrt1mhug718dnj.png-102.8kB"></li>
<li>击File Location Variables，里面可以看到一些基础参数信息，返回，然后直接下一步，如下图所示<br><img src="http://static.zybuluo.com/a807257775/wy5stxnsignkoiwql8skeijj/image_1els6m60fm19msltlk167n1apno0.png" alt="image_1els6m60fm19msltlk167n1apno0.png-58.3kB"></li>
<li>选择Generate Database Creation Scripts，默认为 /oracle/app/oracle/admin/powerdes/scripts<br><img src="http://static.zybuluo.com/a807257775/kiwrojsuyepfgod4xzrwb8l7/image_1els6nhacs9231d1a3m1agd1jfdra.png" alt="image_1els6nhacs9231d1a3m1agd1jfdra.png-89.7kB"></li>
<li>执行mkdir /etc/oratab、chown -R oracle:oinstall /etc/oratab，解决报错<br><img src="http://static.zybuluo.com/a807257775/eu10uxpfuzkwaq2slydml9xc/image_1els6o3nlb3u1je7a1c1ifigrnrq.png" alt="image_1els6o3nlb3u1je7a1c1ifigrnrq.png-83.1kB"></li>
<li>之后点击OK按钮，开始创建数据库<br><img src="http://static.zybuluo.com/a807257775/aph6vg6cj7dqog7fz5t70694/image_1els6pqrk53rt3n16m3e21onfsa.png" alt="image_1els6pqrk53rt3n16m3e21onfsa.png-64.5kB"></li>
<li>等待20分钟后，数据库创建完毕<br><img src="http://static.zybuluo.com/a807257775/vc5hxo0delqeofutnnpbrabb/image_1els6qddm1fnn1rpl1gdsbo51hrisn.png" alt="image_1els6qddm1fnn1rpl1gdsbo51hrisn.png-139.1kB"></li>
</ul>
<h2 id="6、启动数据库进行验证"><a href="#6、启动数据库进行验证" class="headerlink" title="6、启动数据库进行验证"></a>6、启动数据库进行验证</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#启动监听</span><br><span class="line">lsnrctl start</span><br><span class="line">#使用sqlplus登录启动数据库，并创建用户及表空间后，则可以使用数据库工具进行连接使用了</span><br><span class="line">sqlplus / as sysdba</span><br><span class="line">#启动数据库</span><br><span class="line">start up</span><br><span class="line">#启动web管理界面</span><br><span class="line">emctl start dbconsole</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Oracle数据库</category>
      </categories>
      <tags>
        <tag>Oracle数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH端口转发-构建基于SSH服务的网络隧道</title>
    <url>/2020/12/03/SSH%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91-%E6%9E%84%E5%BB%BA%E5%9F%BA%E4%BA%8ESSH%E6%9C%8D%E5%8A%A1%E7%9A%84%E7%BD%91%E7%BB%9C%E9%9A%A7%E9%81%93/</url>
    <content><![CDATA[<h1 id="SSH端口转发-构建基于SSH服务的网络隧道"><a href="#SSH端口转发-构建基于SSH服务的网络隧道" class="headerlink" title="SSH端口转发-构建基于SSH服务的网络隧道"></a>SSH端口转发-构建基于SSH服务的网络隧道</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><ul>
<li>SSH有三种端口转发模式，本地端口转发<code>Local Port Forwarding</code>，远程端口转发<code>Remote Port Forwarding</code>以及动态端口转发<code>Dynamic Port Forwarding</code>。对于本地/远程端口转发，两者的方向恰好相反。动态端口转发则可以用于科学上网。</li>
<li>SSH端口转发也被称作SSH隧道(SSH Tunnel)，因为它们都是通过SSH登陆之后，在SSH客户端与SSH服务端之间建立了一个隧道，从而进行通信。SSH隧道是非常安全的，因为SSH是通过加密传输数据的(SSH全称为Secure Shell)。</li>
<li>SSH转发参数：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-C：压缩数据</span><br><span class="line">-f ：后台认证用户/密码，通常和-N连用，不用登录到远程主机。</span><br><span class="line">-N ：不执行脚本或命令，通常与-f连用。</span><br><span class="line">-g ：在-L/-R/-D参数中，允许远程主机连接到建立的转发的端口，如果不加这个参数，只允许本地主机建立连接。</span><br><span class="line">-L : 本地端口:目标IP:目标端口</span><br><span class="line">-D : 动态端口转发</span><br><span class="line">-R : 远程端口转发</span><br><span class="line">-T ：不分配 TTY 只做代理用</span><br><span class="line">-q ：安静模式，不输出 错误/警告 信息</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2、本地端口转发模式-Local-Port-Forwarding"><a href="#2、本地端口转发模式-Local-Port-Forwarding" class="headerlink" title="2、本地端口转发模式-Local Port Forwarding"></a>2、本地端口转发模式-Local Port Forwarding</h2><blockquote>
<p>说明：有本地网络服务器的某个端口，转发到远程服务器某个端口。说白了就是，将发送到本地端口的请求，转发到目标端口；</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ssh -L 本地网卡地址:本地端口:目标地址:目标端口 用户@目标地址</span><br><span class="line">#将本机的1234端口转发至本机的22端口，应用用禁止22端口的场景</span><br><span class="line">ssh -C -f -N -g -L 1234:127.0.0.1:22 iflytek@127.0.0.1</span><br><span class="line"></span><br><span class="line">#将本机的1234端口转发至远程主机31.142的22端口</span><br><span class="line">ssh -C -f -N -g -L 1234:192:168.31.142 iflytek@192:168.31.142</span><br></pre></td></tr></table></figure>
<h2 id="3、远程端口转发模式-Remote-Port-Forwarding"><a href="#3、远程端口转发模式-Remote-Port-Forwarding" class="headerlink" title="3、远程端口转发模式-Remote Port Forwarding"></a>3、远程端口转发模式-Remote Port Forwarding</h2><blockquote>
<p>说明：远程转发，即把发给远程机器的某个端口请求，转发到本地的机器上面；<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ssh -R [远程地址:]远程端口:本地地址:本地端口 远程用户@远程地址</span><br><span class="line">ssh -f -N -R 10000:127.0.0.1:22 iflytek@192.168.31.142</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="4、动态端口转发模式-Dynamic-Port-Forwarding-SOCKS代理"><a href="#4、动态端口转发模式-Dynamic-Port-Forwarding-SOCKS代理" class="headerlink" title="4、动态端口转发模式-Dynamic Port Forwarding(SOCKS代理)"></a>4、动态端口转发模式-Dynamic Port Forwarding(SOCKS代理)</h2><blockquote>
<p>场景：本机可以上网，利用<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -N -f -g -D 2222 iflytek@127.0.0.1</span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>RPM和YUM程序包的管理</title>
    <url>/2019/05/11/RPM%E5%92%8CYUM%E7%A8%8B%E5%BA%8F%E5%8C%85%E7%9A%84%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="RPM和YUM程序包的管理"><a href="#RPM和YUM程序包的管理" class="headerlink" title="RPM和YUM程序包的管理"></a>RPM和YUM程序包的管理</h1><h2 id="1、RPM简介"><a href="#1、RPM简介" class="headerlink" title="1、RPM简介"></a>1、RPM简介</h2><ul>
<li>RPM，是RPM Package Manager（RPM软件包管理器）的缩写，这一文件格式名称虽然打上了RedHat的标志，但是其原始设计理念是开放式的，现在包括OpenLinux、S.u.S.E.以及Turbo、Linux等Linux的分发版本都有采用，可以算是公认的行业标准了。</li>
</ul>
<hr>
<h2 id="2、RPM的管理和组成"><a href="#2、RPM的管理和组成" class="headerlink" title="2、RPM的管理和组成"></a>2、RPM的管理和组成</h2><h3 id="2-1、程序包管理"><a href="#2-1、程序包管理" class="headerlink" title="2.1、程序包管理"></a>2.1、程序包管理</h3><ul>
<li>内核功能：进程管理、内存管理、网络协议栈、驱动程序、…</li>
<li>应用程序：由二进制程序、管理程序文件、配置文件、文档文件、帮助手册文件组</li>
</ul>
<h3 id="2-2、程序包的组成部分"><a href="#2-2、程序包的组成部分" class="headerlink" title="2.2、程序包的组成部分"></a>2.2、程序包的组成部分</h3><ul>
<li>二进制程序：/bin, /sbin,/ /usr/bin, /usr/sbin；</li>
<li>库文件：/lib64, /usr/lib64；</li>
<li>配置文件：/etc；</li>
<li>帮助文件：/usr/share/man</li>
<li>软件手册：/usr/share/doc</li>
</ul>
<h3 id="2-3、linux软件包类型"><a href="#2-3、linux软件包类型" class="headerlink" title="2.3、linux软件包类型"></a>2.3、linux软件包类型</h3><ul>
<li>deb：debian</li>
<li>rpm：redhat package manager </li>
<li>tar：linux系统的打包工具tar打包的</li>
<li>bin：有些Linux软件不公开源代码，只发布二进制可执行程序，这类程序一般会以bin来标记</li>
</ul>
<h3 id="2-4、分包机制"><a href="#2-4、分包机制" class="headerlink" title="2.4、分包机制"></a>2.4、分包机制</h3><ul>
<li>testapp-VERSION.tar.gz</li>
<li>核心包：<code>testapp-VERSION</code></li>
<li>支包：<code>testapp-devel-VERSION</code></li>
<li>VERSION：<code>major.minor.release</code></li>
</ul>
<h3 id="2-5、rpm包的命名机制："><a href="#2-5、rpm包的命名机制：" class="headerlink" title="2.5、rpm包的命名机制："></a>2.5、rpm包的命名机制：</h3><ul>
<li>name-VERSION-RELEASE.ARCH.rpm</li>
<li>bash-4.2.4-1.el7.x86_64.rpm</li>
<li>bash-devel-4.2.4-1.el7.x86_64.rpm</li>
<li>RELEASE: rpm release</li>
<li>例子：sfotware-1.2.3-1.i386.rpm </li>
<li>软件名称：software ｜ 版本号：1.2.3 ｜修正版本：1 ｜可用平台：i386，x86平台 ｜ 类型：rpm<blockquote>
<p>提示：包和包之间：有可能存在依赖关系， X –&gt; Y –&gt; Z</p>
</blockquote>
</li>
</ul>
<h3 id="2-6、基于rpm命令实现程序包管理"><a href="#2-6、基于rpm命令实现程序包管理" class="headerlink" title="2.6、基于rpm命令实现程序包管理"></a>2.6、基于rpm命令实现程序包管理</h3><ul>
<li>如何获取rpm包：<br>1、发行版提供的程序包；<br>2、Fedora-EPEL<br>3、项目的官方站点<br>4、本地光盘<br>5、搜索引擎<br><a href="http://rpmfind.net" target="_blank" rel="noopener">http://rpmfind.net</a><br><a href="http://rpm.pbone.net" target="_blank" rel="noopener">http://rpm.pbone.net</a><br><a href="http://pkgs.org" target="_blank" rel="noopener">http://pkgs.org</a></li>
</ul>
<hr>
<h2 id="3、RPM的使用"><a href="#3、RPM的使用" class="headerlink" title="3、RPM的使用"></a>3、RPM的使用</h2><h3 id="3-1、安装RPM软件包"><a href="#3-1、安装RPM软件包" class="headerlink" title="3.1、安装RPM软件包"></a>3.1、安装RPM软件包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm &#123;-i|--install&#125; [install-options] PACKAGE_FILE ...</span><br><span class="line">  -i：install package(s)</span><br><span class="line">  -v：显示详细过程，-vv, -vvv</span><br><span class="line">  -h：打印软件包安装过程</span><br><span class="line">  </span><br><span class="line">  每个rpm包都提供一个或多个capabilities</span><br><span class="line">    --nodeps：忽略依赖关系安装</span><br><span class="line">    --replacepkgs：重装程序包</span><br></pre></td></tr></table></figure>
<blockquote>
<p>例子：安装一个RPM包<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost /]# mount /dev/cdrom /media/    #挂载光盘</span><br><span class="line">mount: block device /dev/sr0 is write-protected, mounting read-only</span><br><span class="line">[root@localhost /]# cd /media/Packages/    #切换RPM目录</span><br><span class="line">[root@localhost Packages]# rpm -ivh zsh-4.3.11-4.el6.centos.x86_64.rpm    #安装zshRPM包</span><br><span class="line">warning: zsh-4.3.11-4.el6.centos.x86_64.rpm: Header V3 RSA/SHA1 Signature, key ID c105b9de: NOKEY</span><br><span class="line">Preparing...                ########################################### [100%]</span><br><span class="line">   1:zsh                    ########################################### [100%]</span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p>例子：遇到依赖关系怎么处理？<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost Packages]# rpm -ivh mysql-server-5.1.73-5.el6_6.x86_64.rpm    #安装mysql-server</span><br><span class="line">warning: mysql-server-5.1.73-5.el6_6.x86_64.rpm: Header V3 RSA/SHA1 Signature, key ID c105b9de: NOKEY</span><br><span class="line">error: Failed dependencies:    #发生依赖关系</span><br><span class="line">        mysql = 5.1.73-5.el6_6 is needed by mysql-server-5.1.73-5.el6_6.x86_64</span><br><span class="line">        perl(DBI) is needed by mysql-server-5.1.73-5.el6_6.x86_64</span><br><span class="line">        perl-DBD-MySQL is needed by mysql-server-5.1.73-5.el6_6.x86_64</span><br><span class="line">        perl-DBI is needed by mysql-server-5.1.73-5.el6_6.x86_64</span><br><span class="line">[root@localhost Packages]# rpm -ivh mysql-server-5.1.73-5.el6_6.x86_64.rpm perl-DBD-MySQL-4.013-3.el6.x86_64.rpm perl-DBI-1.609-4.el6.x86_64.rpm mysql-5.1.73-5.el6_6.x86_64.rpm    #逐一安装所依赖的包</span><br><span class="line">warning: mysql-server-5.1.73-5.el6_6.x86_64.rpm: Header V3 RSA/SHA1 Signature, key ID c105b9de: NOKEY</span><br><span class="line">Preparing...                ########################################### [100%]</span><br><span class="line">   1:perl-DBI               ########################################### [ 25%]</span><br><span class="line">   2:perl-DBD-MySQL         ########################################### [ 50%]</span><br><span class="line">   3:mysql                  ########################################### [ 75%]</span><br><span class="line">   4:mysql-server           ########################################### [100%]</span><br><span class="line">[root@localhost Packages]# rpm -qa | grep mysql    #查询mysql是否安装完毕</span><br><span class="line">mysql-server-5.1.73-5.el6_6.x86_64</span><br><span class="line">mysql-libs-5.1.73-5.el6_6.x86_64</span><br><span class="line">mysql-5.1.73-5.el6_6.x86_64</span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p>例子：忽略依赖关系，强行安装（一般不建议这样做）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost Packages]# rpm -ivh mysql-server-5.1.73-5.el6_6.x86_64.rpm  --nodeps    #强制安装参数</span><br><span class="line">warning: mysql-server-5.1.73-5.el6_6.x86_64.rpm: Header V3 RSA/SHA1 Signature, key ID c105b9de: NOKEY</span><br><span class="line">Preparing...                ########################################### [100%]</span><br><span class="line">   1:mysql-server           ########################################### [100%]</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="3-2、RPM包升级"><a href="#3-2、RPM包升级" class="headerlink" title="3.2、RPM包升级"></a>3.2、RPM包升级</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Uvh: 如果有旧版程序包，则升级之；如果没有，则安装之；</span><br><span class="line">-Fvh: 如果有旧版程序包，则升级之；如果没有，则不安装；</span><br><span class="line">--nodeps</span><br><span class="line">--oldpackage：降级；</span><br><span class="line">--force</span><br></pre></td></tr></table></figure>
<blockquote>
<p>例子：升级sudo软件包<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost soft]# ls #先去相关站点找到最新软件包下载</span><br><span class="line">sudo-1.8.6p3-20.el6_7.x86_64.rpm        VMwareTools-9.6.1-1378637.tar.gz</span><br><span class="line">sudo-devel-1.8.6p3-20.el6_7.i686.rpm    vmware-tools-distrib</span><br><span class="line">sudo-devel-1.8.6p3-20.el6_7.x86_64.rpm</span><br><span class="line">[root@localhost soft]# rpm -qa | grep sudo</span><br><span class="line">sudo-1.8.6p3-19.el6.x86_64</span><br><span class="line">[root@localhost soft]# rpm -Uvh sudo-1.8.6p3-20.el6_7.x86_64.rpm    #进行升级</span><br><span class="line">warning: sudo-1.8.6p3-20.el6_7.x86_64.rpm: Header V3 RSA/SHA1 Signature, key ID c105b9de: NOKEY</span><br><span class="line">Preparing...                ########################################### [100%]</span><br><span class="line">   1:sudo                   ########################################### [100%]</span><br><span class="line">[root@localhost soft]# rpm -qa | grep sudo    #查询已经是最新版本</span><br><span class="line">sudo-1.8.6p3-20.el6_7.x86_64</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="3-2、RPM包卸载"><a href="#3-2、RPM包卸载" class="headerlink" title="3.2、RPM包卸载"></a>3.2、RPM包卸载</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm &#123;-e|--erase&#125; [--nodeps] [--noscripts] [--notriggers] [--test] PACKAGE_NAME ...</span><br></pre></td></tr></table></figure>
<blockquote>
<p>列子：卸载zsh软件包<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost Packages]# rpm -e zsh-4.3.11-4.el6.centos.x86_64</span><br><span class="line">[root@localhost Packages]# rpm -e zsh-4.3.11-4.el6.centos.x86_64 --nodeps</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="3-2、RPM信息查询"><a href="#3-2、RPM信息查询" class="headerlink" title="3.2、RPM信息查询"></a>3.2、RPM信息查询</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-qa: 查询本机已经安装的所有程序包；</span><br><span class="line">-qf /PATH/TO/SOMEFILE: 查询此处的文件由哪个程序包安装生成；</span><br><span class="line">-qc: 查询指定程序包安装生成的配置文件</span><br><span class="line">-qd: 查询指定的程序包安装生成的文档</span><br><span class="line">-qi: 查询指定的程序包的相关信息；</span><br><span class="line">-ql: 查询程序包安装生成的所有文件的列表；</span><br><span class="line">-q --scripts：查询程序包相关的脚本：</span><br><span class="line">preinstall: 安装前脚本</span><br><span class="line">postinstall：安装后脚本</span><br><span class="line">preuninstall: 卸载前脚本</span><br><span class="line">postuninstall: 卸载后脚本</span><br><span class="line">-p: 查询针对是未安装的程序包文件；</span><br></pre></td></tr></table></figure>
<blockquote>
<p>例子：相关查询命令使用<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost Packages]# rpm -qa | grep ^httpd    #查询httpd是否安装</span><br><span class="line">httpd-tools-2.2.15-45.el6.centos.x86_64</span><br><span class="line">httpd-2.2.15-45.el6.centos.x86_64</span><br><span class="line">[root@localhost Packages]# rpm -qf /etc/httpd/conf/httpd.conf</span><br><span class="line">httpd-2.2.15-45.el6.centos.x86_64</span><br><span class="line">[root@localhost Packages]# rpm -qc httpd</span><br><span class="line">/etc/httpd/conf.d/welcome.conf</span><br><span class="line">/etc/httpd/conf/httpd.conf</span><br><span class="line">/etc/httpd/conf/magic</span><br><span class="line">/etc/logrotate.d/httpd</span><br><span class="line">/etc/sysconfig/htcacheclean</span><br><span class="line">/etc/sysconfig/httpd</span><br><span class="line">.....</span><br><span class="line">[root@localhost Packages]# rpm -qd httpd    #查询httpd安装生成的相关文档</span><br><span class="line">/usr/share/doc/httpd-2.2.15/ABOUT_APACHE</span><br><span class="line">/usr/share/doc/httpd-2.2.15/CHANGES</span><br><span class="line">/usr/share/doc/httpd-2.2.15/LICENSE</span><br><span class="line">/usr/share/doc/httpd-2.2.15/NOTICE</span><br><span class="line">/usr/share/doc/httpd-2.2.15/README</span><br><span class="line">/usr/share/doc/httpd-2.2.15/VERSIONING</span><br><span class="line">.....</span><br><span class="line">[root@localhost Packages]# rpm -qi httpd    #查询httpd软件包的相关信息</span><br><span class="line">Name        : httpd                        Relocations: (not relocatable)</span><br><span class="line">Version     : 2.2.15                            Vendor: CentOS</span><br><span class="line">Release     : 45.el6.centos                 Build Date: 2015年07月24日 星期五 19时53分33秒</span><br><span class="line">Install Date: 2015年08月25日 星期二 21时15分23秒      Build Host: c6b9.bsys.dev.centos.org</span><br><span class="line">Group       : System Environment/Daemons    Source RPM: httpd-2.2.15-45.el6.centos.src.rpm</span><br><span class="line">Size        : 3090869                          License: ASL 2.0</span><br><span class="line">Signature   : RSA/SHA1, 2015年07月25日 星期六 04时42分58秒, Key ID 0946fca2c105b9de</span><br><span class="line">Packager    : CentOS BuildSystem &lt;http://bugs.centos.org&gt;</span><br><span class="line">URL         : http://httpd.apache.org/</span><br><span class="line">Summary     : Apache HTTP Server</span><br><span class="line">Description :</span><br><span class="line">The Apache HTTP Server is a powerful, efficient, and extensible</span><br><span class="line">web server.</span><br><span class="line">[root@localhost Packages]# rpm -ql httpd    #查询httpd程序包安装生成的所有文件的列表</span><br><span class="line">/etc/httpd</span><br><span class="line">/etc/httpd/conf</span><br><span class="line">/etc/httpd/conf.d</span><br><span class="line">/etc/httpd/conf.d/README</span><br><span class="line">/etc/httpd/conf.d/welcome.conf</span><br><span class="line">/etc/httpd/conf/httpd.conf</span><br><span class="line">/etc/httpd/conf/magic</span><br><span class="line">/etc/httpd/logs</span><br><span class="line">/etc/httpd/modules</span><br><span class="line">/etc/httpd/run</span><br><span class="line">/etc/logrotate.d/httpd</span><br><span class="line">/etc/rc.d/init.d/htcacheclean</span><br><span class="line">/etc/rc.d/init.d/httpd</span><br><span class="line">/etc/sysconfig/htcacheclean</span><br><span class="line">/etc/sysconfig/httpd</span><br><span class="line">......</span><br><span class="line">[root@localhost Packages]# rpm -q --scripts httpd    #查询httpd所要执行的相关脚本</span><br><span class="line">preinstall scriptlet (using /bin/sh):    #安装前</span><br><span class="line"># Add the &quot;apache&quot; user</span><br><span class="line">getent group apache &gt;/dev/null || groupadd -g 48 -r apache</span><br><span class="line">getent passwd apache &gt;/dev/null || \</span><br><span class="line">  useradd -r -u 48 -g apache -s /sbin/nologin \</span><br><span class="line">    -d /var/www -c &quot;Apache&quot; apache</span><br><span class="line">exit 0</span><br><span class="line">postinstall scriptlet (using /bin/sh):    #安装后</span><br><span class="line"># Register the httpd service</span><br><span class="line">/sbin/chkconfig --add httpd</span><br><span class="line">/sbin/chkconfig --add htcacheclean</span><br><span class="line">preuninstall scriptlet (using /bin/sh):   #卸载前</span><br><span class="line">if [ $1 = 0 ]; then</span><br><span class="line">        /sbin/service httpd stop &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">        /sbin/chkconfig --del httpd</span><br><span class="line">        /sbin/service htcacheclean stop &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">        /sbin/chkconfig --del htcacheclean</span><br><span class="line">fi</span><br><span class="line">posttrans scriptlet (using /bin/sh):    #卸载后</span><br><span class="line">test -f /etc/sysconfig/httpd-disable-posttrans || \</span><br><span class="line"> /sbin/service httpd condrestart &gt;/dev/null 2&gt;&amp;1 || :</span><br><span class="line"> [root@localhost Packages]# rpm -qR zsh    #查询软件所依赖的服务器库</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/zsh</span><br><span class="line">/sbin/install-info</span><br><span class="line">/sbin/install-info</span><br><span class="line">config(zsh) = 4.3.11-4.el6.centos</span><br><span class="line">coreutils</span><br><span class="line">grep</span><br><span class="line">grep</span><br><span class="line">libc.so.6()(64bit)</span><br><span class="line">libc.so.6(GLIBC_2.11)(64bit)</span><br><span class="line">libc.so.6(GLIBC_2.2.5)(64bit)</span><br><span class="line">[root@localhost Packages]# rpm -qpi php-5.3.3-40.el6_6.x86_64.rpm    #查询未安装的软件信息（需要加p选项）</span><br><span class="line">warning: php-5.3.3-40.el6_6.x86_64.rpm: Header V3 RSA/SHA1 Signature, key ID c105b9de: NOKEY</span><br><span class="line">Name        : php                          Relocations: (not relocatable)</span><br><span class="line">Version     : 5.3.3                             Vendor: CentOS</span><br><span class="line">Release     : 40.el6_6                      Build Date: 2014年10月31日 星期五 04时22分27秒</span><br><span class="line">Install Date: (not installed)               Build Host: c6b8.bsys.dev.centos.org</span><br><span class="line">Group       : Development/Languages         Source RPM: php-5.3.3-40.el6_6.src.rpm</span><br><span class="line">Size        : 3702253                          License: PHP</span><br><span class="line">Signature   : RSA/SHA1, 2014年10月31日 星期五 21时11分06秒, Key ID 0946fca2c105b9de</span><br><span class="line">Packager    : CentOS BuildSystem &lt;http://bugs.centos.org&gt;</span><br><span class="line">URL         : http://www.php.net/</span><br><span class="line">Summary     : PHP scripting language for creating dynamic web sites</span><br><span class="line">Description :</span><br><span class="line">PHP is an HTML-embedded scripting language. PHP attempts to make it</span><br><span class="line">easy for developers to write dynamically generated webpages. PHP also</span><br><span class="line">offers built-in database integration for several commercial and</span><br><span class="line">non-commercial database management systems, so writing a</span><br><span class="line">database-enabled webpage with PHP is fairly simple. The most common</span><br><span class="line">use of PHP coding is probably as a replacement for CGI scripts.</span><br><span class="line"></span><br><span class="line">The php package contains the module which adds support for the PHP</span><br><span class="line">language to Apache HTTP Server.</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="3-3、RPM包校验"><a href="#3-3、RPM包校验" class="headerlink" title="3.3、RPM包校验"></a>3.3、RPM包校验</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm &#123;-V|--verify&#125; [select-options] [verify-options]</span><br><span class="line">  S file Size differs---文件大小不同</span><br><span class="line">  M Mode differs (includes permissions and file type)---权限和文件类型不同</span><br><span class="line">  5 digest (formerly MD5 sum) differs---MD5文件校验码发生变化</span><br><span class="line">  D Device major/minor number mismatch---设备主要/次要编号不匹配</span><br><span class="line">  L readLink(2) path mismatch</span><br><span class="line">  U User ownership differs---用户属主发生变化</span><br><span class="line">  G Group ownership differs---用户属组发生变化</span><br><span class="line">  T mTime differs---文件的时间戳发生变化</span><br><span class="line">  P caPabilities differ</span><br></pre></td></tr></table></figure>
<blockquote>
<p>例子：查看相关软件文件的变化<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost Packages]# rpm -ql zsh   #查询zsh文件的相关所有文件 </span><br><span class="line">[root@localhost Packages]# vim /usr/share/zsh/4.3.11/functions/zftype   #修改zsh相关的文件</span><br><span class="line">[root@localhost Packages]# rpm -V zsh   #校验软件包</span><br><span class="line">S.5....T.    /usr/share/zsh/4.3.11/functions/zftype</span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p>例子：导入密钥<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost media]# rpm --import RPM-GPG-KEY-CentOS-6</span><br><span class="line">[root@localhost media]# cd Packages/</span><br><span class="line">[root@localhost Packages]# rpm -ivh zsh-4.3.11-4.el6.centos.x86_64.rpm</span><br><span class="line">Preparing...                ########################################### [100%]</span><br><span class="line">   1:zsh                    ########################################### [100%]</span><br></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<h2 id="4、YUM简介"><a href="#4、YUM简介" class="headerlink" title="4、YUM简介"></a>4、YUM简介</h2><ul>
<li>Yum（全称为 Yellow dog Updater,Modified），是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。</li>
</ul>
<hr>
<h2 id="5、YUM配置与管理"><a href="#5、YUM配置与管理" class="headerlink" title="5、YUM配置与管理"></a>5、YUM配置与管理</h2><h3 id="5-1、文件服务器"><a href="#5-1、文件服务器" class="headerlink" title="5.1、文件服务器"></a>5.1、文件服务器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ftp://hostname/PATH/TO/REPO</span><br><span class="line">http://hostname/PATH/TO/REPO</span><br><span class="line">file:///PATH/TO/REPO</span><br></pre></td></tr></table></figure>
<h3 id="5-2、yum程序的配置文件"><a href="#5-2、yum程序的配置文件" class="headerlink" title="5.2、yum程序的配置文件"></a>5.2、yum程序的配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/etc/yum.conf</span><br></pre></td></tr></table></figure>
<h3 id="5-3、定义全局配置"><a href="#5-3、定义全局配置" class="headerlink" title="5.3、定义全局配置"></a>5.3、定义全局配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#对所有仓库都适用的配置，一个文件通常用于一个或一组功能相近或相关的仓库</span><br><span class="line">/etc/yum.repos.d/*.repo</span><br></pre></td></tr></table></figure>
<h3 id="5-4、定义一个仓库指向"><a href="#5-4、定义一个仓库指向" class="headerlink" title="5.4、定义一个仓库指向"></a>5.4、定义一个仓库指向</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[REPO_ID]</span><br><span class="line">name=</span><br><span class="line">baseurl=</span><br><span class="line"># mirrorlist=SCHEME://HOSTNAME/PATH/TO/MIRROR_LIST_FILE</span><br><span class="line">enabled=&#123;1|0&#125;</span><br><span class="line">gpgcheck=&#123;1|0&#125;</span><br><span class="line">gpgkey=</span><br><span class="line">cost=</span><br></pre></td></tr></table></figure>
<blockquote>
<p>例子：配置实例<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[a]</span><br><span class="line">name=a    #定义yum源名字</span><br><span class="line">baseurl=file:///media    #来源仓库类型 </span><br><span class="line">gpgcheck=0    #关闭校验</span><br><span class="line">enabled=1    #开启本源</span><br><span class="line"></span><br><span class="line">[163]</span><br><span class="line">name=163yum    #定义yum源名字</span><br><span class="line">baserul=http://mirrors.163.com/centos/6.7/os/x86_64/    #来源仓库类型 </span><br><span class="line">gpgcheck=0    #关闭校验</span><br><span class="line">enabled=1    #开启本源</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="5-5、定义仓库指向可用变量"><a href="#5-5、定义仓库指向可用变量" class="headerlink" title="5.5、定义仓库指向可用变量"></a>5.5、定义仓库指向可用变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$releasever: 引用当前系统的主版本号；</span><br><span class="line">$basearch: 当前系统的基本架构；</span><br><span class="line">i386, i486, i586, i686: i386</span><br><span class="line">http://mirrors.magedu.com/CentOS/$releasever/os/$basearch</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="6、YUM命令详解与使用"><a href="#6、YUM命令详解与使用" class="headerlink" title="6、YUM命令详解与使用"></a>6、YUM命令详解与使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum [options] [command] [package ...]</span><br><span class="line">命令：</span><br><span class="line">安装：install</span><br><span class="line">卸载：remove</span><br><span class="line">升级：update</span><br><span class="line">查询：</span><br><span class="line">  info</span><br><span class="line">  search KEYWORD</span><br><span class="line">  list all|installed|availiable</span><br><span class="line">  provides /PATH/TO/SOMEFILE: 查询指定文件由哪个包安装生成</span><br><span class="line">重新安装：reinstall</span><br><span class="line">降级：downgrade</span><br><span class="line">清理缓存：clean [ packages | metadata | expire-cache | rpmdb | plugins | all ]</span><br><span class="line">生动生成缓存：makecache</span><br></pre></td></tr></table></figure>
<blockquote>
<p>例子：yum命令相关操作<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost yum.repos.d]# yum clean all   #清理yum所有缓存</span><br><span class="line">已加载插件：fastestmirror, refresh-packagekit, security</span><br><span class="line">Cleaning repos: 163 a</span><br><span class="line">清理一切</span><br><span class="line">Cleaning up list of fastest mirrors</span><br><span class="line">[root@localhost yum.repos.d]# yum makecache   #刷新yum缓存（一般是有新的yum仓库）</span><br><span class="line">已加载插件：fastestmirror, refresh-packagekit, security</span><br><span class="line">Determining fastest mirrors</span><br><span class="line">163                                                                 | 3.7 kB     00:00</span><br><span class="line">163/group_gz                                                        | 219 kB     00:00</span><br><span class="line">163/filelists_db                                                    | 6.3 MB     00:13</span><br><span class="line">163/primary_db                                                      | 4.6 MB     00:09</span><br><span class="line">163/other_db                                                        | 2.8 MB     00:06</span><br><span class="line">a                                                                   | 4.0 kB     00:00 ...</span><br><span class="line">a/group_gz                                                          | 219 kB     00:00 ...</span><br><span class="line">a/filelists_db                                                      | 6.2 MB     00:00 ...</span><br><span class="line">a/primary_db                                                        | 4.6 MB     00:00 ...</span><br><span class="line">a/other_db                                                          | 2.8 MB     00:00 ...</span><br><span class="line">元数据缓存已建立</span><br><span class="line">[root@localhost yum.repos.d]# yum remove wget telnet -y    #安装wget 和telnet</span><br><span class="line">已安装:</span><br><span class="line">  telnet.x86_64 1:0.17-48.el6                 wget.x86_64 0:1.12-5.el6_6.1</span><br><span class="line"></span><br><span class="line">完毕！</span><br><span class="line"></span><br><span class="line">[root@localhost yum.repos.d]# yum remove wget telnet -y    #卸载wget和telnet</span><br><span class="line">删除:</span><br><span class="line">  telnet.x86_64 1:0.17-48.el6                                                           wget.x86_64 0:1.12-5.el6_6.1</span><br><span class="line"></span><br><span class="line">完毕！</span><br><span class="line">[root@localhost yum.repos.d]# yum list    #查询当前源所有安装包</span><br><span class="line">[root@localhost yum.repos.d]# yum list installed    #查询所有以安装的包</span><br><span class="line">[root@localhost yum.repos.d]# yum list all    #查询所有安装和源仓库的包</span><br><span class="line">[root@localhost yum.repos.d]# yum info php-mysql    #查询指定软件的相关信息</span><br><span class="line">已加载插件：fastestmirror, refresh-packagekit, security</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">可安装的软件包</span><br><span class="line">Name        : php-mysql</span><br><span class="line">Arch        : x86_64</span><br><span class="line">Version     : 5.3.3</span><br><span class="line">Release     : 40.el6_6</span><br><span class="line">Size        : 84 k</span><br><span class="line">Repo        : 163</span><br><span class="line">Summary     : A module for PHP applications that use MySQL databases</span><br><span class="line">URL         : http://www.php.net/</span><br><span class="line">License     : PHP</span><br><span class="line">Description : The php-mysql package contains a dynamic shared object that will add</span><br><span class="line">            : MySQL database support to PHP. MySQL is an object-relational database</span><br><span class="line">            : management system. PHP is an HTML-embeddable scripting language. If</span><br><span class="line">            : you need MySQL support for PHP applications, you will need to install</span><br><span class="line">            : this package and the php package.</span><br><span class="line">[root@localhost yum.repos.d]# yum provides /etc/fstab    #查询指定文件的安装包</span><br><span class="line">已加载插件：fastestmirror, refresh-packagekit, security</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">setup-2.8.14-20.el6_4.1.noarch : A set of system configuration and setup files</span><br><span class="line">Repo        : 163</span><br><span class="line">匹配来自于:</span><br><span class="line">Filename    : /etc/fstab</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setup-2.8.14-20.el6_4.1.noarch : A set of system configuration and setup files</span><br><span class="line">Repo        : a</span><br><span class="line">匹配来自于:</span><br><span class="line">Filename    : /etc/fstab</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setup-2.8.14-20.el6_4.1.noarch : A set of system configuration and setup files</span><br><span class="line">Repo        : installed</span><br><span class="line">匹配来自于:</span><br><span class="line">Other       : 提供依赖满足：/etc/fstab</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="6-1、包组（group）操作指令"><a href="#6-1、包组（group）操作指令" class="headerlink" title="6.1、包组（group）操作指令"></a>6.1、包组（group）操作指令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grouplist</span><br><span class="line">groupinfo &quot;GRP_NAME&quot;</span><br><span class="line">groupinstall &quot;GRP_NAME&quot;</span><br><span class="line">groupremove &quot;GRP_NAME&quot;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>例子：安装一个仓库组<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost yum.repos.d]# yum groupinstall &quot;Development Tools&quot; -y</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="6-2、仓库（repo）操作指令"><a href="#6-2、仓库（repo）操作指令" class="headerlink" title="6.2、仓库（repo）操作指令"></a>6.2、仓库（repo）操作指令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">repolist [all|enabled|disabled]</span><br><span class="line">repoinfo [all|enabled|disabled]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>例子：查看当前yum仓库有哪些<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost yum.repos.d]# yum repolist</span><br><span class="line">已加载插件：fastestmirror, refresh-packagekit, security</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line">仓库标识                                                                              仓库名称                                                                            状态</span><br><span class="line">163                                                                                   163yum                                                                              6,575</span><br><span class="line">a                                                                                     a                                                                                   6,575</span><br><span class="line">repolist: 13,150</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="6-3、创建本地仓库-首先要安装http或ftp服务等"><a href="#6-3、创建本地仓库-首先要安装http或ftp服务等" class="headerlink" title="6.3、创建本地仓库(首先要安装http或ftp服务等)"></a>6.3、创建本地仓库(首先要安装http或ftp服务等)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#安装</span><br><span class="line">yum install createrepo</span><br><span class="line"></span><br><span class="line">#命令语法</span><br><span class="line">createrepo [option] &lt;directory&gt;</span><br><span class="line">-u  --baseurl &lt;url&gt;</span><br><span class="line">    指定Base URL的地址</span><br><span class="line">-o --outputdir &lt;url&gt;</span><br><span class="line">    指定元数据的输出位置</span><br><span class="line">-x --excludes &lt;packages&gt;</span><br><span class="line">    指定在形成元数据时需要排除的包</span><br><span class="line">-i --pkglist &lt;filename&gt;</span><br><span class="line">    指定一个文件，该文件内的包信息将被包含在即将生成的元数据中，格式为每个包信息独占一行，不含通配符、正则，以及范围表达式。</span><br><span class="line">-n --includepkg</span><br><span class="line">    通过命令行指定要纳入本地库中的包信息，需要提供URL或本地路径。</span><br><span class="line">-q --quiet</span><br><span class="line">    安静模式执行操作，不输出任何信息。</span><br><span class="line">-g --groupfile &lt;groupfile&gt;</span><br><span class="line">    指定本地软件仓库的组划分，范例如下：</span><br><span class="line">    createrepo -g comps.xml /path/to/rpms</span><br><span class="line">    注意：组文件需要和rpm包放置于同一路径下。</span><br><span class="line">-v --verbose</span><br><span class="line">    输出详细信息。</span><br><span class="line">-c --cachedir &lt;path&gt;</span><br><span class="line">    指定一个目录，用作存放软件仓库中软件包的校验和信息。</span><br><span class="line">    当createrepo在未发生明显改变的相同仓库文件上持续多次运行时，指定cachedir会明显提高其性能。</span><br><span class="line">--update</span><br><span class="line">    如果元数据已经存在，且软件仓库中只有部分软件发生了改变或增减，</span><br><span class="line">    则可用update参数直接对原有元数据进行升级，效率比重新分析rpm包依赖并生成新的元数据要高很多。</span><br><span class="line">-p --pretty</span><br><span class="line">    以整洁的格式输出xml文件。</span><br><span class="line">-d --database</span><br><span class="line">    该选项指定使用SQLite来存储生成的元数据，默认项</span><br></pre></td></tr></table></figure>
<h3 id="6-3-1、创建一个目录存放RPM安装包，然后使用createrepo来创建repository仓库"><a href="#6-3-1、创建一个目录存放RPM安装包，然后使用createrepo来创建repository仓库" class="headerlink" title="6.3.1、创建一个目录存放RPM安装包，然后使用createrepo来创建repository仓库"></a>6.3.1、创建一个目录存放RPM安装包，然后使用createrepo来创建repository仓库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir /yum/repo</span><br><span class="line">creatrepo /yum/repo  #将该目录制作成软件</span><br></pre></td></tr></table></figure>
<h3 id="6-3-2、命令执行成功后会在该目录下创建一个repodata目录"><a href="#6-3-2、命令执行成功后会在该目录下创建一个repodata目录" class="headerlink" title="6.3.2、命令执行成功后会在该目录下创建一个repodata目录"></a>6.3.2、命令执行成功后会在该目录下创建一个repodata目录</h3><p><img src="http://static.zybuluo.com/a807257775/ynfk0kghw1xfzmb9xvcnmmov/image_1daid9ehb1nvu1rg01i0c1h8ggv99.png" alt="image_1daid9ehb1nvu1rg01i0c1h8ggv99.png-35.7kB"></p>
<h3 id="6-3-3、创建-repo配置文件指向到本地仓库的路径"><a href="#6-3-3、创建-repo配置文件指向到本地仓库的路径" class="headerlink" title="6.3.3、创建.repo配置文件指向到本地仓库的路径"></a>6.3.3、创建.repo配置文件指向到本地仓库的路径</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vi /etc/yum.repos.d/test.repo</span><br><span class="line">[test]</span><br><span class="line">name=test  #yum仓库的名字</span><br><span class="line">baseurl=file:///yum/repo  #仓库路径，由于是放在本地的只能用file协议而不是http</span><br><span class="line">enabled=1  #开启该仓库</span><br><span class="line">gpgcheck=0  #不做gpg检查</span><br></pre></td></tr></table></figure>
<h3 id="6-3-4、通过yum-repolist命令查看仓库及包的数量"><a href="#6-3-4、通过yum-repolist命令查看仓库及包的数量" class="headerlink" title="6.3.4、通过yum repolist命令查看仓库及包的数量"></a>6.3.4、通过yum repolist命令查看仓库及包的数量</h3><p><img src="http://static.zybuluo.com/a807257775/7qrmtuh8lypnqt3v7uzv850o/image_1daidbrj81a3k11u113tk75h1ocmm.png" alt="image_1daidbrj81a3k11u113tk75h1ocmm.png-32kB"></p>
<h3 id="6-3-5、创建YUM仓库"><a href="#6-3-5、创建YUM仓库" class="headerlink" title="6.3.5、创建YUM仓库"></a>6.3.5、创建YUM仓库</h3><blockquote>
<p>在第二步的操作中只是在本地建立了一个YUM仓库，这样别人是无法使用的。所以通常会在计划任务中把公网YUM源同步到本地（推荐使用reposync），同步后再执行一次createrepo更新元数据，最后把仓库目录通过FTP或者Nginx、Apache、NFS服务等共享出来，然后客户端的配置文件中修改如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[test]</span><br><span class="line">name=test</span><br><span class="line">enable=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">baseurl=http://192.168.1.231</span><br></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>WMware ESXI磁盘扩容手册</title>
    <url>/2020/12/08/WMware%20ESXI%E7%A3%81%E7%9B%98%E6%89%A9%E5%AE%B9%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h1 id="WMware-ESXI磁盘扩容手册"><a href="#WMware-ESXI磁盘扩容手册" class="headerlink" title="WMware ESXI磁盘扩容手册"></a>WMware ESXI磁盘扩容手册</h1><h2 id="1、磁盘扩容需知"><a href="#1、磁盘扩容需知" class="headerlink" title="1、磁盘扩容需知"></a>1、磁盘扩容需知</h2><ul>
<li>任何类型的（精简置备、厚置备）磁盘，都无法在ESXI控制台缩减容量；</li>
<li>Linux虚机在未使用的lvm的分区格式下，可以实现磁盘在线扩容及新增硬盘，但无法合并分区，只能单独挂载目录使用；</li>
<li>Linux虚机在使用了lvm的分区格式下，可以实现磁盘在线扩容及新增硬盘，通过lvm命令，在线扩容指定分区；</li>
<li>虚拟机磁盘扩容时，任何时候都可以热添加硬盘，不受免费授权影响；</li>
<li>当ESXI宿主机磁盘空间不足时，可以通过ESXI控制台在线扩充容量，不需要停机操作，前提是已有多余的硬盘在服务器上；</li>
</ul>
<h2 id="2、Linux虚拟机磁盘扩容"><a href="#2、Linux虚拟机磁盘扩容" class="headerlink" title="2、Linux虚拟机磁盘扩容"></a>2、Linux虚拟机磁盘扩容</h2><blockquote>
<p>提示：由于Linux特殊的文件系统，若要对指定的分区（挂载目录）进行扩容，必须在首次安装系统的时候，使用LVM分区格式，否则不支持动态扩缩容；</p>
</blockquote>
<h3 id="2-1、实验环境"><a href="#2-1、实验环境" class="headerlink" title="2.1、实验环境"></a>2.1、实验环境</h3><table>
<thead>
<tr>
<th>平台</th>
<th>IP</th>
<th>磁盘类型</th>
<th>是否使用LVM</th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS 7.8 64Bit</td>
<td>192.168.8.164</td>
<td>精简置备</td>
<td>是</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="2-2、单硬盘在线扩容"><a href="#2-2、单硬盘在线扩容" class="headerlink" title="2.2、单硬盘在线扩容"></a>2.2、单硬盘在线扩容</h3><ul>
<li><strong>选择要扩容的虚拟机，点击编辑</strong><br><img src="http://static.zybuluo.com/a807257775/b2l4xgte09lkzm220tbqrwav/image_1ep3hembv1pnc3ksbkgpf5spk7j.png" alt="image_1ep3hembv1pnc3ksbkgpf5spk7j.png-122.5kB"><br><img src="http://static.zybuluo.com/a807257775/qyta721qx5z88zprqziurrsy/image_1ep3hhgqnrjs10rs1j0qee6bpr80.png" alt="image_1ep3hhgqnrjs10rs1j0qee6bpr80.png-106.5kB"><br><img src="http://static.zybuluo.com/a807257775/8mrlcjj4dchvoo55999frswy/image_1ep3hj289kbn1d9m1vgan4k11br8d.png" alt="image_1ep3hj289kbn1d9m1vgan4k11br8d.png-126.9kB"></li>
<li><strong>需执行命令对硬盘容量进行刷新，否则需要重启服务器，才可以看到变化</strong><br><img src="http://static.zybuluo.com/a807257775/xqi3s05b23vwnk8e3rgvhc2k/image_1ep3hnolmvb8158u1buh8a211lr8q.png" alt="image_1ep3hnolmvb8158u1buh8a211lr8q.png-61.7kB"></li>
<li><strong>使用fdisk命令对/dev/sda磁盘进行lvm分区</strong><br><img src="http://static.zybuluo.com/a807257775/qmm7h2i4j373h4koj3kr6l68/image_1ep58lbinle1182j1ste1eqc1j0vm.png" alt="image_1ep58lbinle1182j1ste1eqc1j0vm.png-81kB"></li>
<li><strong>执行fdisk查看磁盘分区状态</strong><br><img src="http://static.zybuluo.com/a807257775/nf7ez3v3siz6zqydegma8x0j/image_1ep3i9pmi15tnqdj11l618mm187ua1.png" alt="image_1ep3i9pmi15tnqdj11l618mm187ua1.png-57kB"></li>
<li><strong>此时系统并未出现/dev/sda3，执行partprobe命令后刷新分区表</strong><br><img src="http://static.zybuluo.com/a807257775/981epe624jo8k83fa9zbgn18/image_1ep562k9hcuj74ig7uq7vbv19.png" alt="image_1ep562k9hcuj74ig7uq7vbv19.png-31.9kB"></li>
<li><strong>创建pv物理卷</strong><br><img src="http://static.zybuluo.com/a807257775/tx6cr3aeah85722cdczmq7z6/image_1ep5929h3n5gadc2b711h7kao13.png" alt="image_1ep5929h3n5gadc2b711h7kao13.png-39.4kB"></li>
<li><strong>将新增的pv添加至vg卷组</strong><br><img src="http://static.zybuluo.com/a807257775/awh6vdf1pyh82d83vweoo7y0/image_1ep59cja6a705hk1jcm19nt9q51g.png" alt="image_1ep59cja6a705hk1jcm19nt9q51g.png-41.1kB"></li>
<li><strong>扩展lv逻辑卷</strong><br><img src="http://static.zybuluo.com/a807257775/ez9voyhnwnxi02uru0x9ji2k/image_1ep59vpklms3pamrkf1dqj15gj1t.png" alt="image_1ep59vpklms3pamrkf1dqj15gj1t.png-68.2kB"></li>
<li><strong>重新丈量磁盘空间</strong><br><img src="http://static.zybuluo.com/a807257775/dper8ppofnbgjr3t32mpl4kf/image_1ep5akc4b1c5t9kolff15ttfq82a.png" alt="image_1ep5akc4b1c5t9kolff15ttfq82a.png-72.2kB"></li>
</ul>
<h2 id="3、Win虚拟机磁盘扩容"><a href="#3、Win虚拟机磁盘扩容" class="headerlink" title="3、Win虚拟机磁盘扩容"></a>3、Win虚拟机磁盘扩容</h2><h3 id="3-1、实验环境"><a href="#3-1、实验环境" class="headerlink" title="3.1、实验环境"></a>3.1、实验环境</h3><table>
<thead>
<tr>
<th>平台</th>
<th>IP</th>
<th>磁盘类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>Winodws 2012 R2 DataCenter</td>
<td>192.168.8.165</td>
<td>基本磁盘</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="3-2、单硬盘在线扩容"><a href="#3-2、单硬盘在线扩容" class="headerlink" title="3.2、单硬盘在线扩容"></a>3.2、单硬盘在线扩容</h3><ul>
<li><strong>通过esxi web控制台选中要扩容的主机，选择编辑</strong><br><img src="http://static.zybuluo.com/a807257775/klvj21ytoipxf5phq1apgd3k/image_1ep3fmsnp184cr9nqhq1pb514ocm.png" alt="image_1ep3fmsnp184cr9nqhq1pb514ocm.png-115.6kB"></li>
<li><strong>选择要扩容的应用，输入扩充后的容量，保存即可</strong><br><img src="http://static.zybuluo.com/a807257775/f0bfqtc2cwh2uwz6harlcpgg/image_1ep3fpnhj17im3h5nbms4o2o613.png" alt="image_1ep3fpnhj17im3h5nbms4o2o613.png-103.6kB"></li>
<li><strong>左上角提示已成功配置虚机win2012，证明物理大小已扩充成功</strong><br><img src="http://static.zybuluo.com/a807257775/nbvqiz17uvnmnj9wzmkfw08d/image_1ep3fqemi1igfsb3h13r01mul1g.png" alt="image_1ep3fqemi1igfsb3h13r01mul1g.png-121.4kB"></li>
<li><strong>通过控制台或mstsc连接虚拟机，对硬盘逻辑空间进行扩容</strong><br><img src="http://static.zybuluo.com/a807257775/ijfapzjg2t2aq7qmi4ne9mis/image_1ep3fuk3j9q018lo13291c4gp3o1t.png" alt="image_1ep3fuk3j9q018lo13291c4gp3o1t.png-122.7kB"></li>
<li><strong>选择要扩容的分区，右键扩展卷</strong><br><img src="http://static.zybuluo.com/a807257775/yfggs87lknxt5o1x6cc6d4y0/image_1ep3g06ng1b451crj1f6v16ctqeq2a.png" alt="image_1ep3g06ng1b451crj1f6v16ctqeq2a.png-134.8kB"><br><img src="http://static.zybuluo.com/a807257775/k5vxfhmih4w8sbbkt3rcrhv1/image_1ep3g0fuv1qoqt6vsjvkp611222n.png" alt="image_1ep3g0fuv1qoqt6vsjvkp611222n.png-175.5kB"><br><img src="http://static.zybuluo.com/a807257775/mtiw7m6lcyzm5ctm8jmg2z16/image_1ep3g10m1c41iqkorfrmo4kp34.png" alt="image_1ep3g10m1c41iqkorfrmo4kp34.png-95.7kB"><br><img src="http://static.zybuluo.com/a807257775/h9sdk3czjqlek2mn9sx44kg6/image_1ep3g16at176tdagefmeiv7m43h.png" alt="image_1ep3g16at176tdagefmeiv7m43h.png-170.4kB"></li>
<li><strong>完成容量扩容，全程无需重启即可生效</strong><br><img src="http://static.zybuluo.com/a807257775/8hbp02ci83ipokjkdl2dqpkl/image_1ep3g2bv65bb19i5lc91aoakej3u.png" alt="image_1ep3g2bv65bb19i5lc91aoakej3u.png-120.6kB"></li>
</ul>
]]></content>
      <categories>
        <category>虚拟化技术</category>
      </categories>
      <tags>
        <tag>虚拟化技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Weblogic 12c部署手册</title>
    <url>/2020/12/04/Weblogic%2012c%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h1 id="Weblogic-12c部署手册"><a href="#Weblogic-12c部署手册" class="headerlink" title="Weblogic 12c部署手册"></a>Weblogic 12c部署手册</h1><h2 id="1、实验环境："><a href="#1、实验环境：" class="headerlink" title="1、实验环境："></a>1、实验环境：</h2><table>
<thead>
<tr>
<th>平台</th>
<th>IP</th>
<th>用途 </th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS 7.8 64Bit</td>
<td>192.168.x.x</td>
<td>weblogic12c+oracle11gr2</td>
</tr>
</tbody>
</table>
<h2 id="2、服务器环境配置（优化这里不提）"><a href="#2、服务器环境配置（优化这里不提）" class="headerlink" title="2、服务器环境配置（优化这里不提）"></a>2、服务器环境配置（优化这里不提）</h2><h3 id="2-1、安装jdk1-8"><a href="#2-1、安装jdk1-8" class="headerlink" title="2.1、安装jdk1.8"></a>2.1、安装jdk1.8</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#卸载系统自带的openjdk</span><br><span class="line">[root@aupserver soft]# yum remove java* </span><br><span class="line">[root@aupserver soft]# mkdir -p /usr/java/</span><br><span class="line">[root@aupserver soft]# tar xzvf jdk-8u131-linux-x64.tar.gz -C /usr/java/</span><br><span class="line">[root@aupserver soft]# ln -s /usr/java/jdk1.8.0_131/bin/java /usr/sbin/</span><br><span class="line">[root@aupserver soft]# java -version</span><br><span class="line">#配置root用户环境变量</span><br><span class="line">[root@aupserver soft]# vim /etc/profile</span><br><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_131</span><br><span class="line">export JAVA_HOME</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export CLASSPATH</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH:$HOME/bin:$JAVA_HOME/bin</span><br><span class="line">export PATH</span><br><span class="line">export LANG=zh_CN.UTF-8</span><br><span class="line">export CONFIG_JVM_ARGS=&apos;-Djava.security.egd=file:/dev/urandom&apos;</span><br></pre></td></tr></table></figure>
<h3 id="2-2、下载weblogic12c安装包"><a href="#2-2、下载weblogic12c安装包" class="headerlink" title="2.2、下载weblogic12c安装包"></a>2.2、下载weblogic12c安装包</h3><ul>
<li>在下载页面选择 Generic (800 MB) ：<a href="http://www.oracle.com/technetwork/middleware/weblogic/downloads/wls-for-dev-1703574.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/middleware/weblogic/downloads/wls-for-dev-1703574.html</a></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@aupserver soft]# pwd</span><br><span class="line">/soft</span><br><span class="line">[root@aupserver soft]# ls fmw_12.2.1.4.0_wls_Disk1_1of1.zip </span><br><span class="line">fmw_12.2.1.4.0_wls_Disk1_1of1.zip</span><br><span class="line">[root@aupserver soft]# unzip fmw_12.2.1.4.0_wls_Disk1_1of1.zip -d /soft</span><br></pre></td></tr></table></figure>
<h3 id="2-3、创建weblogic用户"><a href="#2-3、创建weblogic用户" class="headerlink" title="2.3、创建weblogic用户"></a>2.3、创建weblogic用户</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@aupserver soft]# useradd weblogic</span><br><span class="line">[root@aupserver soft]# passwd weblogic</span><br></pre></td></tr></table></figure>
<h3 id="2-4、采用静默模式安装（需创建响应文件）"><a href="#2-4、采用静默模式安装（需创建响应文件）" class="headerlink" title="2.4、采用静默模式安装（需创建响应文件）"></a>2.4、采用静默模式安装（需创建响应文件）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@aupserver soft]# su weblogic</span><br><span class="line"></span><br><span class="line">#创建响应文件</span><br><span class="line">[weblogic@aupserver soft]# vim /home/weblogic/wls.rsp</span><br><span class="line">#My Oracle Support User Name</span><br><span class="line">MOS_USERNAME=</span><br><span class="line">#My Oracle Support Password</span><br><span class="line">MOS_PASSWORD=&lt;SECURE VALUE&gt;</span><br><span class="line">#If the Software updates are already downloaded and available on your local system, then specify the path to the directory where these patches are available and set SPECIFY_DOWNLOAD_LOCATION to true</span><br><span class="line">AUTO_UPDATES_LOCATION=</span><br><span class="line">#Proxy Server Name to connect to My Oracle Support</span><br><span class="line">SOFTWARE_UPDATES_PROXY_SERVER=</span><br><span class="line">#Proxy Server Port</span><br><span class="line">SOFTWARE_UPDATES_PROXY_PORT=</span><br><span class="line">#Proxy Server Username</span><br><span class="line">SOFTWARE_UPDATES_PROXY_USER=</span><br><span class="line">#Proxy Server Password</span><br><span class="line">SOFTWARE_UPDATES_PROXY_PASSWORD=&lt;SECURE VALUE&gt;</span><br><span class="line">#The oracle home location. This can be an existing Oracle Home or a new Oracle Home</span><br><span class="line">ORACLE_HOME=/home/weblogic/Oracle/Middleware/Oracle_Home</span><br><span class="line">#The federated oracle home locations. This should be an existing Oracle Home. Multiple values can be provided as comma seperated values</span><br><span class="line">FEDERATED_ORACLE_HOMES=</span><br><span class="line">#Set this variable value to the Installation Type selected. e.g. WebLogic Server, Coherence, Complete with Examples.</span><br><span class="line">INSTALL_TYPE=WebLogic Server</span><br><span class="line"></span><br><span class="line">#创建初始化环境文件</span><br><span class="line">[weblogic@aupserver soft]# vim /home/weblogic/oraInst.loc</span><br><span class="line">inst_group=weblogic</span><br><span class="line">inventory_loc=/home/weblogic/oraInventory</span><br><span class="line"></span><br><span class="line">#开始安装</span><br><span class="line">[weblogic@aupserver soft]# java -jar fmw_12.2.1.4.0_wls.jar -silent -responseFile /home/weblogic/wls.rsp -invPtrLoc /home/weblogic/oraInst.lo</span><br></pre></td></tr></table></figure>
<h3 id="2-5、创建域"><a href="#2-5、创建域" class="headerlink" title="2.5、创建域"></a>2.5、创建域</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[weblogic@aupserver soft]# mkdir -p /home/weblogic/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain</span><br><span class="line">[weblogic@aupserver soft]# cd /home/weblogic/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain</span><br><span class="line">[weblogic@aupserver base_domain]# cp /home/weblogic/Oracle/Middleware/Oracle_Home/wlserver/common/templates/scripts/wlst/basicWLSDomain.py ./base_domain.py</span><br></pre></td></tr></table></figure>
<h3 id="2-6、修改建域脚本"><a href="#2-6、修改建域脚本" class="headerlink" title="2.6、修改建域脚本"></a>2.6、修改建域脚本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#修改weblogic控制台用户密码</span><br><span class="line">[weblogic@aupserver base_domain]# vim base_domain.py</span><br><span class="line">#=======================================================================================</span><br><span class="line"># Define the user password for weblogic.</span><br><span class="line">#=======================================================================================</span><br><span class="line"></span><br><span class="line">cd(&apos;/&apos;)</span><br><span class="line">cd(&apos;Security/base_domain/User/weblogic&apos;)</span><br><span class="line"># Please set password here before using this script, e.g. cmo.setPassword(&apos;value&apos;)</span><br><span class="line">cmo.setPassword(&apos;qaz000123&apos;)</span><br><span class="line"></span><br><span class="line">..................中间省略</span><br><span class="line"></span><br><span class="line">#修改weblogic的domains路径</span><br><span class="line">#=======================================================================================</span><br><span class="line"># Write the domain and close the domain template.</span><br><span class="line">#=======================================================================================</span><br><span class="line"></span><br><span class="line">setOption(&apos;OverwriteDomain&apos;, &apos;true&apos;)</span><br><span class="line">writeDomain(&apos;/home/weblogic/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain&apos;)</span><br><span class="line">closeTemplate()</span><br></pre></td></tr></table></figure>
<h3 id="2-7、执行脚本"><a href="#2-7、执行脚本" class="headerlink" title="2.7、执行脚本"></a>2.7、执行脚本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[weblogic@aupserver base_domain]# /home/weblogic/Oracle/Middleware/Oracle_Home/oracle_common/common/bin/wlst.sh base_domain.py</span><br></pre></td></tr></table></figure>
<h3 id="2-8、启动和停止weblogic服务"><a href="#2-8、启动和停止weblogic服务" class="headerlink" title="2.8、启动和停止weblogic服务"></a>2.8、启动和停止weblogic服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[weblogic@aupserver base_domain]# /home/weblogic/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain</span><br><span class="line">[weblogic@aupserver base_domain]# ./bin/startWebLogic.sh</span><br><span class="line">[weblogic@aupserver base_domain]# ./bin/stopWebLogic.sh</span><br></pre></td></tr></table></figure>
<h3 id="2-9、免密启动和后台运行"><a href="#2-9、免密启动和后台运行" class="headerlink" title="2.9、免密启动和后台运行"></a>2.9、免密启动和后台运行</h3><ul>
<li>启动weblogic需要输入用户名密码，如果不想每次都输入用户名密码，可以新建文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[weblogic@aupserver security]$ pwd</span><br><span class="line">/home/weblogic/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/servers/AdminServer/security</span><br><span class="line">[weblogic@aupserver security]$ ls</span><br><span class="line">boot.properties  boot.properties_20201030</span><br><span class="line">[weblogic@aupserver security]$ cat boot.properties</span><br><span class="line"># Generated by Configuration Wizard on Thu Oct 29 19:26:47 CST 2020</span><br><span class="line">#内容如下（用户名密码填写安装domain时设置的用户名密码）</span><br><span class="line">username=weblogic</span><br><span class="line">password=qaz000123</span><br><span class="line"></span><br><span class="line">#直接运行./startWebLogic.sh是前台运行，关闭窗口后服务会自动停止。如果希望后台运行，关闭窗口后服务继续运行，可以使用以下命令</span><br><span class="line">[weblogic@aupserver bin]$ nohup ./startWebLogic.sh &amp;</span><br><span class="line">#该命令会创建nohup.out文件，原本控制台的输出内容会写入到这个文件里面</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3、新建SRV及免密配置"><a href="#3、新建SRV及免密配置" class="headerlink" title="3、新建SRV及免密配置"></a>3、新建SRV及免密配置</h2><ul>
<li><p>图形化创建服务器<br><img src="http://static.zybuluo.com/a807257775/blnq8u8ygafy9jiru2mpo4bh/image_1els39tqh1ddgmeg1aar1ht12me9.png" alt="image_1els39tqh1ddgmeg1aar1ht12me9.png-116.6kB"><br><img src="http://static.zybuluo.com/a807257775/tv9chanmb92dnzcfsyo68g0w/image_1els3h89mddmeqrsf111811khf16.png" alt="image_1els3h89mddmeqrsf111811khf16.png-98.9kB"></p>
</li>
<li><p>首次启动服务器回要求输入web控制台密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#启动新server服务器需使用startManagedWebLogic脚本来执行</span><br><span class="line">[weblogic@aupserver bin]$ pwd</span><br><span class="line">/home/weblogic/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/bin</span><br><span class="line">[weblogic@aupserver bin]$ ./startManagedWebLogic.sh uap-managerr http://aupserver:7001</span><br><span class="line">[weblogic@aupserver bin]$ ./startManagedWebLogic.sh uap-server http://aupserver:7001</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置免密</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[weblogic@aupserver security]$ pwd</span><br><span class="line">/home/weblogic/Oracle/Middleware/Oracle_Home/user_projects/domains/base_domain/servers/uap-server/security</span><br><span class="line">[weblogic@aupserver security]$ cat boot.properties</span><br><span class="line">#Fri Oct 30 09:12:31 CST 2020</span><br><span class="line">password=&#123;AES256&#125;FYgyVDNhKPqyTy+dTjnDeV0XVhnFR3tfBXhceKMCA2I\=</span><br><span class="line">username=&#123;AES256&#125;yya+mtqt3V8t2G3oltxpsb3AEgxyUJhCAHz2XHQAygY\=</span><br></pre></td></tr></table></figure>
</li>
<li><p>再次启动服务器并放入后台执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#启动新建的服务器</span><br><span class="line">[weblogic@aupserver bin]$ nohup ./startManagedWebLogic.sh uap-server http://aupserver:7001 &amp;</span><br><span class="line">[weblogic@aupserver bin]$ nohup ./startManagedWebLogic.sh uap-managerr http://aupserver:7001 &amp;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Weblogic</category>
      </categories>
      <tags>
        <tag>Weblogic</tag>
      </tags>
  </entry>
  <entry>
    <title>Zabbix监控系统应用实践</title>
    <url>/2024/03/02/Zabbix%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h1 id="Zabbix监控系统应用实践"><a href="#Zabbix监控系统应用实践" class="headerlink" title="Zabbix监控系统应用实践"></a>Zabbix监控系统应用实践</h1><h2 id="1、zabbix简介"><a href="#1、zabbix简介" class="headerlink" title="1、zabbix简介"></a>1、zabbix简介</h2><h3 id="1-1、zabbix介绍"><a href="#1-1、zabbix介绍" class="headerlink" title="1.1、zabbix介绍"></a>1.1、zabbix介绍</h3><blockquote>
<p>Zabbix 是一种企业级的分布式开源监控解决方案。<br>Zabbix 是集报警框架、数据收集、监控模板、集中式web展示的一款完整性监控平台，能够监控众多网络参数、服务器的健康度、应用软件的性能、服务可用性等。Zabbix有非常 灵活的通知机制，通过不同的动作和分组，可以将指定消息推送给指定用户，并且支持邮件、微信、钉钉、短信等事件通知。并且Zabbix 基于存储的数据提供出色的报告和数据可视化。所有的 Zabbix 报告、统计信息和配置参数都可以通过基于 Web 的前端页面进行访问。<br>Zabbix 是免费开源的</p>
</blockquote>
<ul>
<li>Zabbix分布式监控系统的优点如下：<ul>
<li style="list-style: none"><input type="checkbox" checked> 支持自动发现服务器和网络设备；</li>
<li style="list-style: none"><input type="checkbox" checked> 分布式的监控体系和集中式的WEB管理；</li>
<li style="list-style: none"><input type="checkbox" checked> 支持主动监控和被动监控模式；</li>
<li style="list-style: none"><input type="checkbox" checked> 服务器端支持多种操作系统：Linux, Solaris, HP-UX, AIX, FreeBSD, OpenBSD, MAC等；</li>
<li style="list-style: none"><input type="checkbox" checked> Agent客户端支持多种操作系统：Linux, Solaris, HP-UX, AIX, FreeBSD,Windows等；</li>
<li style="list-style: none"><input type="checkbox" checked> 基于SNMP、IPMI接口方式、Agent方式、Simple Check方式；</li>
<li style="list-style: none"><input type="checkbox" checked> 安全的用户认证及权限配置；</li>
<li style="list-style: none"><input type="checkbox" checked> 基于WEB的管理方法，支持自由的自定义事件和邮件、短信、微信、钉钉等通知；</li>
<li style="list-style: none"><input type="checkbox" checked> 支持日志审计，资产管理等功能；</li>
<li style="list-style: none"><input type="checkbox" checked> 提供200+的API接口，配合CMDB实现自动化运维整合。</li>
</ul>
</li>
</ul>
<h3 id="1-2、zabbix概述"><a href="#1-2、zabbix概述" class="headerlink" title="1.2、zabbix概述"></a>1.2、zabbix概述</h3><blockquote>
<p>Zabbix 由几个主要的功能组件组成，其职责如下所示。</p>
</blockquote>
<ul>
<li><p>Server</p>
<ul>
<li><code>Zabbix server</code> 是 <code>Zabbix agent</code> 向其报告可用性、系统完整性信息和统计信息的核心组件。是存储所有配置信息、统计信息和操作信息的核心存储库。</li>
</ul>
</li>
<li><p>数据库</p>
<ul>
<li>所有配置信息以及 Zabbix 采集到的数据都被存储在数据库中。zabbix支持的数据库有MySQL, PGSQL(postgreSQL)、Oracle、DB2、SQLite；</li>
</ul>
</li>
<li><p>Web 界面</p>
<ul>
<li>zabbix的GUI接口，使用PHP语言编写，在分布式环境中，不需要和server端部署在同一节点；</li>
</ul>
</li>
<li><p>Proxy</p>
<ul>
<li><code>Zabbix proxy</code> 可以替 <code>Zabbix server</code> 收集性能和可用性数据。<code>Zabbix proxy</code> 是 <code>Zabbix</code> 环境部署的可选部分；一般用于多分布式环境，监控多数据库中心的方案中所使用的组件。</li>
</ul>
</li>
<li><p>Agent</p>
<ul>
<li>agentd需要安装到被监控的主机上，它负责定期收集各项数据，并发送到zabbix server端，zabbix server将数据存储到数据库中，zabbix web根据数据在前端进行展现和绘图。这里agentd收集数据分为主动和被动两种模式：</li>
<li>主动：agent请求server获取主动的监控项列表，并主动将监控项内需要检测的数据提交给server/proxy</li>
<li>被动：server向agent请求获取监控项的数据，agent返回数据。</li>
</ul>
</li>
<li><p>监控数据流</p>
<ul>
<li>首先，为了创建一个采集数据的监控项，你就必须先创建主机。其次，必须有一个监控项来创建触发器。最后，你必须有一个触发器来创建一个动作，这几个点构成了一个完整的数据流。因此，如果你想要收到 <code>CPU load it too high on Server X</code> 的告警，你必须首先为 <code>Server X</code> 创建一个主机条目，其次创建一个用于监视其 CPU 的监控项，最后创建一个触发器，用来触发 <code>CPU is too high</code> 这个动作，并将其发送到指定的邮箱里。虽然这些步骤看起来很繁琐，但是使用模板的话，其实并不复杂。也正是由于这种设计，使得 Zabbix 的配置变得更加灵活易用。</li>
</ul>
</li>
<li><p>架构图<br><img src="http://static.zybuluo.com/a807257775/wmkbtftifarc2annmuy7l4uq/20191127212159172.jpg" alt="20191127212159172.jpg-563.7kB"> </p>
</li>
</ul>
<h3 id="1-3、zabbix特点"><a href="#1-3、zabbix特点" class="headerlink" title="1.3、zabbix特点"></a>1.3、zabbix特点</h3><ul>
<li><p>Zabbix在2022年的多款监控软件排名第一<br><img src="http://static.zybuluo.com/a807257775/3yl9eecnch8ixt9xlrklfxg0/image_1gdadvi6o13quu41hrihrlbsil.png" alt="image_1gdadvi6o13quu41hrihrlbsil.png-126.7kB"></p>
</li>
<li><p>简单易用</p>
<ul>
<li>开箱部署，如使用docker与容器编排工具，可实现分钟级的快速部署；</li>
<li>社区资源丰富，软件及手册已全面支持中文；</li>
</ul>
</li>
<li>开源且免费</li>
<li>适合中小企业使用的全栈监控平台<ul>
<li>可用性监控（服务、端口、链路、联机状态等）</li>
<li>性能监控（CPU、内存、网络带宽、磁盘IO等）</li>
<li>日志监控（安全日志、系统日志、应用日志、审计日志等）</li>
<li>自定义监控（Scripts脚本）</li>
<li>WEB监控（WEB接口性能、返回状态码）</li>
<li>应用中间件监控（NGX、ES、REDIS、MYSQL、RABITMQ、KAFKA、ZK等）</li>
</ul>
</li>
<li>兼具监控的广度和深度<ul>
<li>系统异构性（少则几种，多则几十种，比如需要监控硬件、存储、操作系统、中间件、数据库及应用等）</li>
<li>平台多样性（比如我们有华为、戴尔、惠普、IBM 的硬件服务器或者交换机，同时也会有 Windows、Linux、Aix、ESXi等多种操作系统）</li>
<li>运维复杂性（日常监控指标的精细化、平台架构的日常运维，包括系统异构性和平台的多样性均构成了运维的复杂性）</li>
<li>综上，一个理想的监控平台理应支持基于各类系统，覆盖各类厂商和平台的监控，而经过这么多年的功能演变及用户口碑来看，zabbix在非容器环境下不管是监控深度和广度是目前最合适的监控平台。这也弥补了金融云在监控层面对于中间件、自定义指标、WEB监控相关功能的缺失；</li>
</ul>
</li>
</ul>
<h2 id="2、zabbix功能"><a href="#2、zabbix功能" class="headerlink" title="2、zabbix功能"></a>2、zabbix功能</h2><h3 id="2-1、数据采集"><a href="#2-1、数据采集" class="headerlink" title="2.1、数据采集"></a>2.1、数据采集</h3><ul>
<li style="list-style: none"><input type="checkbox" checked> 可用性和性能指标的数据采集；</li>
<li style="list-style: none"><input type="checkbox" checked> 支持 SNMP（包括主动轮询和被动捕获）、IPMI、JMX、VMware 监控、Kubernets监控；</li>
<li style="list-style: none"><input type="checkbox" checked> 自定义检查；</li>
<li style="list-style: none"><input type="checkbox" checked> 按照自定义的时间间隔采集需要的数据；</li>
<li style="list-style: none"><input type="checkbox" checked> 通过 Server/Proxy 和 Agents 来执行数据采集。</li>
</ul>
<h3 id="2-2、灵活的阈值定义"><a href="#2-2、灵活的阈值定义" class="headerlink" title="2.2、灵活的阈值定义"></a>2.2、灵活的阈值定义</h3><ul>
<li style="list-style: none"><input type="checkbox" checked> 将告警阈值称之为触发器，触发器从后端数据库获得参考值。</li>
</ul>
<h3 id="2-3、高度可配置化的告警"><a href="#2-3、高度可配置化的告警" class="headerlink" title="2.3、高度可配置化的告警"></a>2.3、高度可配置化的告警</h3><ul>
<li style="list-style: none"><input type="checkbox" checked> 可以根据递增计划、接收者、媒介类型自定义发送告警通知；</li>
<li style="list-style: none"><input type="checkbox" checked> 使用宏变量可以使告警通知变得更加高效有益；</li>
<li style="list-style: none"><input type="checkbox" checked> 自动动作包含远程命令。</li>
</ul>
<h3 id="2-4、实时图形"><a href="#2-4、实时图形" class="headerlink" title="2.4、实时图形"></a>2.4、实时图形</h3><ul>
<li style="list-style: none"><input type="checkbox" checked> 使用内置图形功能可实以将监控项绘制成图形。</li>
</ul>
<h3 id="2-5、Web-监控功能"><a href="#2-5、Web-监控功能" class="headerlink" title="2.5、Web 监控功能"></a>2.5、Web 监控功能</h3><ul>
<li style="list-style: none"><input type="checkbox" checked> Zabbix 可以追踪模拟鼠标在 Web 网站上的点击操作，来检查 Web 网站的功能和响应时间。</li>
</ul>
<h3 id="2-6、丰富的可视化选项"><a href="#2-6、丰富的可视化选项" class="headerlink" title="2.6、丰富的可视化选项"></a>2.6、丰富的可视化选项</h3><ul>
<li style="list-style: none"><input type="checkbox" checked> 能够创建可以将多个监控项组合到单个视图中的自定义图形；</li>
<li style="list-style: none"><input type="checkbox" checked> 网络拓扑图；</li>
<li style="list-style: none"><input type="checkbox" checked> 以仪表盘样式展示自定义聚合图形和幻灯片演示；</li>
<li style="list-style: none"><input type="checkbox" checked> 报表；</li>
<li style="list-style: none"><input type="checkbox" checked> 监控资源的高层次（业务）视图。</li>
</ul>
<h3 id="2-7、配置简单"><a href="#2-7、配置简单" class="headerlink" title="2.7、配置简单"></a>2.7、配置简单</h3><ul>
<li style="list-style: none"><input type="checkbox" checked> 将被监控设备添加为主机；</li>
<li style="list-style: none"><input type="checkbox" checked> 主机一旦添加到数据库中，就会采集主机数据用于监控；</li>
<li style="list-style: none"><input type="checkbox" checked> 将模板用于监控设备。</li>
</ul>
<h3 id="2-8、套用模板"><a href="#2-8、套用模板" class="headerlink" title="2.8、套用模板"></a>2.8、套用模板</h3><ul>
<li style="list-style: none"><input type="checkbox" checked> 在模板中分组检查；</li>
<li style="list-style: none"><input type="checkbox" checked> 模板可以关联其他模板，获得继承。</li>
</ul>
<h3 id="2-9、网络发现"><a href="#2-9、网络发现" class="headerlink" title="2.9、网络发现"></a>2.9、网络发现</h3><ul>
<li style="list-style: none"><input type="checkbox" checked> 自动发现网络设备；</li>
<li style="list-style: none"><input type="checkbox" checked> Zabbix Agent 发现设备后自动注册；</li>
<li style="list-style: none"><input type="checkbox" checked> 自动发现文件系统、网络接口和 SNMP OIDs 值。</li>
</ul>
<h3 id="2-10、Zabbix-API"><a href="#2-10、Zabbix-API" class="headerlink" title="2.10、Zabbix API"></a>2.10、Zabbix API</h3><ul>
<li style="list-style: none"><input type="checkbox" checked> Zabbix API 为 Zabbix 提供可编程接口，用于批量操作、第三方软件集成的用途。</li>
</ul>
<h3 id="2-11、权限管理系统"><a href="#2-11、权限管理系统" class="headerlink" title="2.11、权限管理系统"></a>2.11、权限管理系统</h3><ul>
<li style="list-style: none"><input type="checkbox" checked> 安全的用户身份验证；</li>
<li style="list-style: none"><input type="checkbox" checked> 将特定用户限制于访问特定的视图。</li>
</ul>
<h2 id="3、zabbix实践应用"><a href="#3、zabbix实践应用" class="headerlink" title="3、zabbix实践应用"></a>3、zabbix实践应用</h2><h3 id="3-1、支付组"><a href="#3-1、支付组" class="headerlink" title="3.1、支付组"></a>3.1、支付组</h3><ul>
<li>所实现的监控项<ul>
<li>代付失败笔数监控</li>
<li>有缺陷的成功笔数监控</li>
<li>代付成功率监控</li>
<li>支付下单笔数监控</li>
<li>支付成功率监控</li>
<li>代付下单笔数监控</li>
</ul>
</li>
</ul>
<h3 id="3-2、运维组"><a href="#3-2、运维组" class="headerlink" title="3.2、运维组"></a>3.2、运维组</h3><ul>
<li>所实现的监控项<ul>
<li>中间件的性能监控</li>
<li>服务可用性监控</li>
<li>数据库监控</li>
<li>第三方网络性能监控</li>
<li>进程掉线监控</li>
<li>服务端口监控</li>
<li>TCP连接数监控</li>
</ul>
</li>
</ul>
<h3 id="3-3、应用组"><a href="#3-3、应用组" class="headerlink" title="3.3、应用组"></a>3.3、应用组</h3><ul>
<li>所实现的监控项<ul>
<li>web接口监控</li>
</ul>
</li>
</ul>
<h2 id="4、WEB拓展"><a href="#4、WEB拓展" class="headerlink" title="4、WEB拓展"></a>4、WEB拓展</h2><h3 id="4-1、使用grafana进行web展示"><a href="#4-1、使用grafana进行web展示" class="headerlink" title="4.1、使用grafana进行web展示"></a>4.1、使用grafana进行web展示</h3><ul>
<li>zabbix的UI个人觉得并不是太好看，网上也有很多人吐槽，如果我们用来做7*24小时的监控大屏，不太能满足需求，所以我们运维组这边又添加了一个开源的web展示工具。叫做grafana，目前正在将部分看板往这个工具迁移中。</li>
<li>支付看板<br><img src="http://static.zybuluo.com/a807257775/y8bkh0hrdtvjpi16buelmb4x/image_1gdi135qetfd1noa1u9a3um15k19.png" alt="image_1gdi135qetfd1noa1u9a3um15k19.png-137.2kB"></li>
<li>主机资源看板<br><img src="http://static.zybuluo.com/a807257775/fje92s7l6mdkkj6ud2efbuto/image_1gdi13lif17o56091tct1h3v1ckhm.png" alt="image_1gdi13lif17o56091tct1h3v1ckhm.png-504.6kB"></li>
<li>主机组异常看板<br><img src="http://static.zybuluo.com/a807257775/b0oikip38kfqrcsd49n0dmlm/image_1gdi13qqiq681kile7pqv1ats13.png" alt="image_1gdi13qqiq681kile7pqv1ats13.png-196.7kB"></li>
</ul>
]]></content>
      <categories>
        <category>SkyWalking</category>
      </categories>
      <tags>
        <tag>SkyWalking</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令之-find文件查找</title>
    <url>/2019/09/24/linux%E5%91%BD%E4%BB%A4%E4%B9%8B-find%E6%96%87%E4%BB%B6%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<h1 id="linux命令之-find文件查找"><a href="#linux命令之-find文件查找" class="headerlink" title="linux命令之-find文件查找"></a>linux命令之-find文件查找</h1><h2 id="1、文件查找：locate-find"><a href="#1、文件查找：locate-find" class="headerlink" title="1、文件查找：locate, find"></a>1、文件查找：locate, find</h2><ul>
<li><p><code>locate</code>: 非实时查找工具；依赖于事先构建的索引；索引的构建是在系统较为空闲时自动进行(周期性任务)；手动更新此数据库(updatedb)；查找速度快；模糊查找；</p>
</li>
<li><p><code>find</code>：实时查找；查找速度略慢；精确查找；<br><img src="http://static.zybuluo.com/a807257775/nsk3o0u4q1b4db1abenkntzb/image_1dlhn8hun11i6k191j4f5bvbmp9.png" alt="image_1dlhn8hun11i6k191j4f5bvbmp9.png-687.8kB"></p>
</li>
</ul>
<h2 id="2、find命令使用方法"><a href="#2、find命令使用方法" class="headerlink" title="2、find命令使用方法"></a>2、find命令使用方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find [OPTION]... [查找路径] [查找条件] [处理动作]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查找路径：默认为当前路径；<br>查找条件：指定的查找标准，可以根据文件名、大小、属主属组、类型等进行；默认为找出指定路 径下的所有文件；<br>处理动作：对符合条件的文件做什么操作；默认为输出至屏幕；</p>
</blockquote>
<h2 id="3、查找条件"><a href="#3、查找条件" class="headerlink" title="3、查找条件"></a>3、查找条件</h2><ul>
<li><p><strong>根据文件名进行查找：</strong><br><code>-name</code> “文件名称”: 支持使用glob；<br>*, ?, []<br><code>-iname</code> “文件名称”：不区分字符大小写，支持使用glob；<br><code>-regex</code> “PATTERN”：以PATTERN匹配整个文件路径字符串，而不仅仅是文件名称；</p>
</li>
<li><p><strong>根据属主、属组查找：</strong><br><code>-user</code> USERNAME: 查找属主为指定用户的文件；<br><code>-group</code> GROUPNAME:<br><code>-uid</code> UserID: 查找文件的属主指定uid的文件；<br><code>-gid</code> GroupID:<br><code>-nouser</code>: 查找没有属主的文件；<br><code>-nogroup</code>：查找没有属组的文件；</p>
</li>
</ul>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost tmp]# find /tmp/ -user centos -ls</span><br><span class="line">654082    0 -rw-------   1 centos   root            0 8月 25 21:08 /tmp/yum.log</span><br><span class="line">[root@localhost tmp]# find /tmp/ -group centos -ls</span><br><span class="line">654211    4 -rw-r--r--   1 root     centos        126 9月  1 12:46 /tmp/111</span><br><span class="line">[root@localhost tmp]# find /tmp/ -user centos -a -group centos -ls</span><br><span class="line">654210   20 -rw-r--r--   1 centos   centos      19697 4月 10 00:44 /tmp/functions</span><br><span class="line">[root@localhost tmp]# find /tmp/ -uid 3008 -ls</span><br><span class="line">654210   20 -rw-r--r--   1 3008     3008        19697 4月 10 00:44 /tmp/functions</span><br><span class="line">654082    0 -rw-------   1 3008     root            0 8月 25 21:08 /tmp/yum.log</span><br><span class="line">[root@localhost tmp]# find /tmp/ -nouser -ls</span><br><span class="line">654210   20 -rw-r--r--   1 3008     3008        19697 4月 10 00:44 /tmp/functions</span><br><span class="line">654082    0 -rw-------   1 3008     root            0 8月 25 21:08 /tmp/yum.log</span><br><span class="line">[root@localhost tmp]# find /tmp/ -nouser -a -nogroup -ls</span><br><span class="line">654210   20 -rw-r--r--   1 3008     3008        19697 4月 10 00:44 /tmp/functions</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>根据文件类型进行查找：</strong><br><code>-type</code> TYPE<br><code>f</code>: 普通文件<br><code>d</code>: 目录<br><code>l</code>: 符号链接<br><code>b</code>: 块设备<br><code>c</code>: 字符设备<br><code>p</code>: 命名管道<br><code>s</code>: 套接字</li>
</ul>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost tmp]# find /tmp/ -type l -ls</span><br><span class="line">654205    0 lrwxrwxrwx   1 root     root           22 8月 25 21:24 /tmp/grub.conf -&gt; ../boot/grub/grub.conf</span><br><span class="line">[root@localhost /]# find /tmp/ -type d -ls</span><br><span class="line">915714    4 drwxr-xr-x   9 root     root         4096 9月  3 18:09 /tmp/</span><br><span class="line">915721    4 drwxr-xr-x   2 root     root         4096 9月  3 18:09 /tmp/89123jk4</span><br><span class="line">915715    4 drwxr-xr-x   2 root     root         4096 9月  3 18:09 /tmp/jkashd</span><br><span class="line">915719    4 drwxr-xr-x   2 root     root         4096 9月  3 18:09 /tmp/sdfhk</span><br><span class="line">915718    4 drwxr-xr-x   2 root     root         4096 9月  3 18:09 /tmp/1892373</span><br><span class="line">915717    4 drwxr-xr-x   2 root     root         4096 9月  3 18:09 /tmp/kjashd</span><br><span class="line">915720    4 drwxr-xr-x   2 root     root         4096 9月  3 18:09 /tmp/90124h3kjshdr</span><br><span class="line">915716    4 drwxr-xr-x   2 root     root         4096 9月  3 18:09 /tmp/kjashdkj</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>组合查找条件：</strong><br>与条件：<code>-a</code><br>或条件：<code>-o</code><br>非条件：<code>-not</code>, <code>!</code><br>!A -o !B = !(A -a B)<br>!A -a !B = !(A -o B)</li>
</ul>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost tmp]# find /tmp/ -type f -a -nouser -ls</span><br><span class="line">915724    4 -rw-------   1 3012     hadoop        827 8月 30 15:46 /tmp/grub.conf</span><br><span class="line">[root@localhost tmp]# find /tmp/ \( -nouser -o -user lisir \) -ls</span><br><span class="line">915724    4 -rw-------   1 3012     hadoop        827 8月 30 15:46 /tmp/grub.conf</span><br><span class="line">915723    4 -rw-r--r--   1 lisir    lisir01       957 8月 25 13:35 /tmp/fstab</span><br><span class="line">915722   20 -rw-r--r--   1 lisir    3012        19697 4月 10 00:44 /tmp/functions</span><br><span class="line">[root@localhost tmp]# find /tmp/ \( -nouser -a -group hadoop \) -ls</span><br><span class="line">915724    4 -rw-------   1 3012     hadoop        827 8月 30 15:46 /tmp/grub.conf</span><br><span class="line">[root@localhost tmp]# find /etc ! -name &quot;*.conf&quot; -a -not -type f -ls </span><br><span class="line">392449   12 drwxr-xr-x 117 root     root        12288 9月  3 18:14 /etc</span><br><span class="line">393096    4 drwxr-xr-x   2 root     root         4096 8月 25 21:12 /etc/purple</span><br><span class="line">393295    0 lrwxrwxrwx   1 root     root           15 8月 25 21:13 /etc/rc.sysinit -&gt; rc.d/rc.sysinit</span><br><span class="line">394019    4 drwxr-xr-x   2 root     root         4096 8月 25 21:16 /etc/pcmcia</span><br><span class="line">393055    4 drwxr-xr-x   2 root     root         4096 8月 25 21:12 /etc/obex-data-server</span><br><span class="line">393034    4 drwxr-xr-x   3 root     root         4096 8月 25 21:11 /etc/ghostscript</span><br><span class="line">393040    4 drwxr-xr-x   2 root     root         4096 8月 25 21:11 /etc/ghostscript/8.70</span><br><span class="line">392886    4 drwxr-xr-x   2 root     root         4096 8月 25 21:11 /etc/wpa_supplicant</span><br><span class="line">392787    4 drwxr-xr-x   2 root     root         4096 8月 25 21:11 /etc/ssl</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>根据文件大小来查找：</strong><br><code>-size</code> [+|-]#UNIT：<br>常用单位有：<code>k</code>, <code>M</code>, <code>G</code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#UNIT: #-1 &lt; x &lt;= #</span><br><span class="line">2k：1.8k, 1.9k, 1.1k</span><br><span class="line"></span><br><span class="line">-#UNIT：x &lt;= #-1</span><br><span class="line">-2k: 1k, 0.9k</span><br><span class="line"></span><br><span class="line">+#UNIT: x &gt; #</span><br><span class="line">+2k: 2.1k, 3.1k</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost /]# find /etc/ -size 3k -exec ls -lh &#123;&#125; \;</span><br><span class="line">-rw-r--r--. 1 root root 2.9K 8月  21 2010 /etc/pinforc</span><br><span class="line">-rwxr-xr-x. 1 root root 2.6K 4月  10 00:44 /etc/sysconfig/network-scripts/ifup-tunnel</span><br><span class="line">-rwxr-xr-x. 1 root root 2.4K 4月  10 00:44 /etc/sysconfig/network-scripts/ifup-post</span><br><span class="line">-rw-r--r--. 1 root root 2.2K 7月  24 16:22 /etc/sysconfig/nfs</span><br><span class="line">-rw-r--r--. 1 root root 2.6K 7月  24 19:32 /etc/sysconfig/cpuspeed</span><br><span class="line">-rw-r--r--. 1 root root 2.6K 5月  20 22:18 /etc/sysconfig/raid-check</span><br><span class="line">-rw-------. 1 root root 2.3K 8月  25 21:25 /etc/lvm/backup/VolGroup</span><br><span class="line">-r--r--r--. 1 root root 2.2K 7月  24 12:04 /etc/lvm/profile/command_profile_template.profile</span><br></pre></td></tr></table></figure></p>
<ul>
<li><strong>根据时间戳</strong><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#以“天”为单位</span><br><span class="line">-atime [+|-]#   </span><br><span class="line">：[#,#+1)</span><br><span class="line">+#: [#+1,oo]</span><br><span class="line">-#: [0,#)</span><br><span class="line"></span><br><span class="line">#：   </span><br><span class="line">-mtime</span><br><span class="line">-ctime</span><br><span class="line">+3大于三天 -3三天以内  3大于等三4天以内</span><br></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#以“分钟”为单位</span><br><span class="line">-amin</span><br><span class="line">-mmin</span><br><span class="line">-cmin</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>注：a表示最近访问文件的时间、m表示最近修改文件内容的时间、c表示最近文件有所改变的状态 ,如文件修改,属性\属主 改变 ,节点 ,链接变化等</strong></p>
</blockquote>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost /]# touch -m -t 201509031828 /tmp/lisir</span><br><span class="line">[root@localhost /]# stat /tmp/lisir</span><br><span class="line">  File: &quot;/tmp/lisir&quot;</span><br><span class="line">  Size: 0               Blocks: 0          IO Block: 4096   普通空文件</span><br><span class="line">Device: fd00h/64768d    Inode: 915725      Links: 1</span><br><span class="line">Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">Access: 2015-09-03 18:28:23.640000731 +0800</span><br><span class="line">Modify: 2015-09-03 18:28:00.000000000 +0800</span><br><span class="line">Change: 2015-09-03 18:28:23.640000731 +0800</span><br><span class="line">[root@localhost /]# find /tmp/ -mtime -3 -ls</span><br><span class="line">915725    0 -rw-r--r--   1 root     root            0 9月  3 18:28 /tmp/lisir</span><br></pre></td></tr></table></figure></p>
<ul>
<li>根据权限：<br><code>-perm</code> [/|-]MODE<br><code>MODE</code>: 精确权限匹配<br><code>/MODE</code>或<code>+MODE</code>：任何一类对象(u,g,o)的任何一位权限符合条件即可；隐含或条件；<br><code>/444</code>或<code>+444</code>：表示只要符合u,g,o任何一个权限有读取即可<br><code>-MODE</code>：为每一类对象指定的每一位权限都必须同时存在方为符合条件；隐含与条件；<br><code>-444</code>：表示必须符合u,g,o每一位权限都有读即可</li>
</ul>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost soft]# find /soft/ -perm /222 -ls</span><br><span class="line">2354690    4 drwxr-xr-x   2 root     root         4096 9月  3 18:38 /soft/</span><br><span class="line">2354691    0 -rwx------   1 root     root            0 9月  3 18:38 /soft/a</span><br><span class="line">2354692    0 -rwxrwx---   1 root     root            0 9月  3 18:38 /soft/b</span><br><span class="line">2354693    0 -rwxrwxrwx   1 root     root            0 9月  3 18:38 /soft/c</span><br><span class="line">2354694    0 -rw-r--r--   1 root     root            0 9月  3 18:38 /soft/d</span><br><span class="line">2354695    0 -rw-r--r--   1 root     root            0 9月  3 18:38 /soft/e</span><br><span class="line">[root@localhost soft]# find /soft/ -perm -222 -ls</span><br><span class="line">2354693    0 -rwxrwxrwx   1 root     root            0 9月  3 18:38 /soft/c</span><br><span class="line">[root@localhost soft]# find /soft/ ! -perm -222 -ls</span><br><span class="line">2354690    4 drwxr-xr-x   2 root     root         4096 9月  3 18:38 /soft/</span><br><span class="line">2354691    0 -rwx------   1 root     root            0 9月  3 18:38 /soft/a</span><br><span class="line">2354692    0 -rwxrwx---   1 root     root            0 9月  3 18:38 /soft/b</span><br><span class="line">2354694    0 -rw-r--r--   1 root     root            0 9月  3 18:38 /soft/d</span><br><span class="line">2354695    0 -rw-r--r--   1 root     root            0 9月  3 18:38 /soft/e</span><br></pre></td></tr></table></figure></p>
<h2 id="4、处理动作"><a href="#4、处理动作" class="headerlink" title="4、处理动作"></a>4、处理动作</h2><p><code>-print</code>: 默认处理动作；<br><code>-ls</code>：类似于对查找到的每个文件做”ls -l”的操作；<br><code>-delete</code>: 删除查找到的文件；<br><code>-fls /path/to/somefile</code>：查找到的文件的详细路径信息保存至指定文件中；<br><code>-ok COMMAND {} \</code>; 对每个文件执行指定的命令之前需要用户事先确认；<br><code>-exec COMMAND {} \</code>; 无需用户确认；</p>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost soft]# find . -perm -222 -exec mv &#123;&#125; &#123;&#125;.a \;</span><br><span class="line">[root@localhost soft]# ll</span><br><span class="line">总用量 0</span><br><span class="line">-rwx------. 1 root root 0 9月   3 18:43 a</span><br><span class="line">-rwxrwx---. 1 root root 0 9月   3 18:43 b</span><br><span class="line">-rwxrwxrwx. 1 root root 0 9月   3 18:43 c.a</span><br><span class="line">[root@localhost soft]# find . -perm -222 -exec chmod 777 &#123;&#125; \;</span><br><span class="line">[root@localhost soft]# ll</span><br><span class="line">总用量 0</span><br><span class="line">-rwx------. 1 root root 0 9月   3 18:43 a</span><br><span class="line">-rwxrwx---. 1 root root 0 9月   3 18:43 b</span><br><span class="line">-rwxrwxrwx. 1 root root 0 9月   3 18:43 c.a</span><br></pre></td></tr></table></figure></p>
<h2 id="5、练习题"><a href="#5、练习题" class="headerlink" title="5、练习题"></a>5、练习题</h2><ul>
<li><p>1、查找/var目录属主为root，且属组为mail的所有文件；<br>答：find /var -user root -group mail -ls</p>
</li>
<li><p>2、查找/usr目录下不属于root、bin或hadoop的所有文件；<br>答：find /usr -not -user root -a -not -user bin -a -not -user hadoop -ls</p>
</li>
<li><p>3、查找/etc目录下最近一周内其内容修改过，且属主不为root或hadoop的所有文件；<br>答：find /etc -ctime -7 -a -not -user root -not -user hadoop -ls</p>
</li>
<li><p>4、查找当前系统上没有属主或属组，且最近一周内曾被访问过的所有文件；<br>答：find / ( -nouser -o -nogroup ) -a -atime -7 -ls</p>
</li>
<li><p>5、查找/etc目录下大于20k且类型为普通谁的的所有文件；<br>答：find /etc -type f -a -size +20k -exec ls -lh {} \;</p>
</li>
<li><p>6、查找/etc目录下所有用户都没有写权限的文件；<br>答：find /etc -not -perm /222 -ls</p>
</li>
<li><p>7、查找/etc目录下至少有一类用户没有执行权限的文件；<br>答：find /etc -not -perm -111 -ls</p>
</li>
<li><p>8、查找/etc/init.d目录下，所有用户都有执行权限，且其它用户拥有写权限的文件<br>答：find /etc/init.d/ -perm /111 -a -perm /002 -ls</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令之-grep文本搜索工具</title>
    <url>/2019/07/19/linux%E5%91%BD%E4%BB%A4%E4%B9%8B-grep%E6%96%87%E6%9C%AC%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h1 id="linux命令之-grep文本搜索工具"><a href="#linux命令之-grep文本搜索工具" class="headerlink" title="linux命令之-grep文本搜索工具"></a>linux命令之-grep文本搜索工具</h1><h2 id="1、grep命令详解"><a href="#1、grep命令详解" class="headerlink" title="1、grep命令详解"></a>1、grep命令详解</h2><h3 id="1-1、命令介绍"><a href="#1-1、命令介绍" class="headerlink" title="1.1、命令介绍"></a>1.1、命令介绍</h3><ul>
<li>Global search REgular expression and Print out the line. 文本搜索工具，根据用户指定的文本模式（正则表达元字符以及正常字符组合而成）对目标文件进行逐行搜索，显示能匹配到的行；linux使用GNU版本的grep。它功能更强，可以通过-G、-E、-F命令行选项来使用egrep和fgrep的功能。<br><img src="http://static.zybuluo.com/a807257775/ums9snvvn050cpw6iubaxvlj/image_1dlhnaq1rrkrom49l66k0rd29.png" alt="image_1dlhnaq1rrkrom49l66k0rd29.png-713.2kB"></li>
</ul>
<h3 id="1-2、正则表达式：REGular-EXPression-REGEXP"><a href="#1-2、正则表达式：REGular-EXPression-REGEXP" class="headerlink" title="1.2、正则表达式：REGular EXPression REGEXP"></a>1.2、正则表达式：REGular EXPression REGEXP</h3><ul>
<li>是由元字符及正常字符所书写的模式，其中的元字符不表示字符本身的意义，而是用于表达控制或通配等功能；</li>
<li>基本正则表达式命令: grep<blockquote>
<p>提示：fgrep: fast, 不支持使用正则表达式</p>
</blockquote>
</li>
</ul>
<h4 id="1-2-1、基本正则表达式元字符"><a href="#1-2-1、基本正则表达式元字符" class="headerlink" title="1.2.1、基本正则表达式元字符"></a>1.2.1、基本正则表达式元字符</h4><blockquote>
<p>提示：匹配数字别忘了中括号外面还有一个中括号。</p>
</blockquote>
<ul>
<li><p><strong>字符匹配：</strong><br><code>.</code>  :匹配任意单个字符<br><code>[]</code>: 匹配指定范围内的任意单个字符<br><code>[^]</code>: 匹配指定范围外的任意单个字符<br><code>[0-9]</code>, <code>[[:digit:]]</code>, <code>[^0-9]</code>, <code>[^[:digit:]]</code><br><code>[a-z]</code>, <code>[[:lower:]]</code><br><code>[A-Z]</code>, <code>[[:upper:]]</code><br><code>[[:space:]]</code><br><code>[[:punct:]]</code><br><code>[0-9a-zA-Z]</code>, <code>[[:alnum:]]</code><br><code>[a-zA-Z]</code>, <code>[[:alpha:]]</code><br><code>[:alnum:]</code> 字母数字 <code>[a-z A-Z 0-9]</code><br><code>[:alpha:]</code> 字母 <code>[a-z A-Z]</code><br><code>[:blank:]</code> 空格或制表键<br><code>[:cntrl:]</code> 任何控制字符<br><code>[:digit:]</code> 数字 <code>[0-9]</code><br><code>[:graph:]</code> 任何可视字符（无空格）<br><code>[:lower:]</code> 小写 <code>[a-z]</code><br><code>[:print:]</code> 非控制字符<br><code>[:punct:]</code> 标点字符<br><code>[:space:]</code> 空格<br><code>[:upper:]</code> 大写 <code>[A-Z]</code><br><code>[:xdigit:]</code> 十六进制数字 <code>[0-9 a-f A-F]</code></p>
</li>
<li><p><strong>次数匹配：在期望匹配字符后面提供一个控制符，用于表达匹配其前面字符指定的次数</strong><br>  <code>*</code>  : 任意长度，表示0次、1次或多次；</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例子：&quot;ab*c&quot;</span><br><span class="line">    abbc, ac</span><br><span class="line">    abb,</span><br></pre></td></tr></table></figure>
<p>  <code>.*</code>: 任意长度的任意字符</p>
<blockquote>
<p>提示：工作于贪婪模式</p>
</blockquote>
<p>  <code>\?</code>：0次或1次；表示其左侧字符可有可无</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例子：&quot;ab\?c&quot;</span><br><span class="line">	abbc,</span><br><span class="line">	ac, abc</span><br></pre></td></tr></table></figure>
<p>  <code>\+</code>: 1次或多次；表示其左侧字符至少出现1次；</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例子：&quot;ab\+c&quot;</span><br><span class="line">	ac,</span><br><span class="line">	abc, abbbbc</span><br></pre></td></tr></table></figure>
<p>  <code>\{m\}</code>：m次；表示其左侧字符精确出现m次；</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例子：ab\&#123;2\&#125;c</span><br><span class="line">	ac, abc, abbbc</span><br><span class="line">	abbc</span><br></pre></td></tr></table></figure>
<p>  <code>\{m,n\}</code>：至少m次，至多n次；</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例子：ab\&#123;0,3\&#125;c</span><br><span class="line">	ac, abbbc,</span><br><span class="line">	abbbbbc</span><br></pre></td></tr></table></figure>
<p>  <code>\{0,n\}</code>：至多n次；<br>  <code>\{m,\}</code>：至少m次；</p>
</li>
<li><p><strong>位置锚定：</strong><br>  <code>^</code>：锚定行首</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例子:^PATTERN</span><br></pre></td></tr></table></figure>
<p>  <code>$</code>：锚定行尾</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">列子:PATTERN$</span><br></pre></td></tr></table></figure>
<p>  <code>^PATTERN$</code>：用模式来匹配整行；</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">列子：grep &quot;^[[:space:]]*$&quot; /etc/rc.d/rc.sysinit</span><br></pre></td></tr></table></figure>
<p>  <code>^$</code>：匹配空白行；</p>
</li>
<li><p><strong>单词锚定：由非特殊字符组成的连续的字符串</strong><br>  <code>\&lt;</code> :锚定词首，也可用<code>\b</code></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\&lt;PATTERN, 或\bPATTERN</span><br><span class="line">grep &quot;\&lt;sh&quot; /etc/passwd</span><br></pre></td></tr></table></figure>
<p>  <code>\&gt;</code> ：锚定词尾，也可以用<code>\b</code></p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PATTERN\&gt;, 或PATTERN\b</span><br></pre></td></tr></table></figure>
<p>  <code>\&lt;PATTERN\&gt;</code>：匹配PATTERN能匹配到的整个单词</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig | grep &quot;\&lt;[0-9]\&#123;2\&#125;\&gt;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>分组：</strong></p>
<blockquote>
<p>注意：分组中的模式，在某次的具体匹配过程中所匹配到的字符，可以被grep记忆（保存于内置的变量中，这些变量是\1, \2, …），因此，还可以被引用；<br>\1: 引用，模式中自左而右，由第一个左括号以及与之对应的右括号中的模式所匹配到的内容；<br>\1: 引用 ，模式中自左右，由第二个左括号以及与之对应的右括号中的模式所匹配到的内容</p>
</blockquote>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例子：</span><br><span class="line">	“\(a.b\).*\1&quot;</span><br><span class="line">		amb hello anb</span><br><span class="line">		</span><br><span class="line">    &quot;\(l..e\).*\1&quot;</span><br><span class="line">    	He like his lover.</span><br><span class="line">    	He like his liker.</span><br><span class="line">    	She love her lover.</span><br><span class="line">    	She love her liker.</span><br><span class="line"></span><br><span class="line">    \(.*\)\.mp3.*\1\.wvm</span><br><span class="line">    	play.php?a.mp3?search?a.wmv</span><br><span class="line">    	play.php?where.mp3?hello?when.wmv</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="1-3、扩展的正则表达式"><a href="#1-3、扩展的正则表达式" class="headerlink" title="1.3、扩展的正则表达式"></a>1.3、扩展的正则表达式</h3><ul>
<li>扩展正则表达式: grep -E, egrep</li>
</ul>
<h4 id="1-3-1、扩展正则表达式元字符"><a href="#1-3-1、扩展正则表达式元字符" class="headerlink" title="1.3.1、扩展正则表达式元字符"></a>1.3.1、扩展正则表达式元字符</h4><ul>
<li><p><strong>字符匹配：</strong><br><code>.</code>  :匹配任意单个字符<br><code>[]</code>: 匹配指定范围内的任意单个字符<br><code>[^]</code>: 匹配指定范围外的任意单个字符<br><code>[0-9]</code>, <code>[[:digit:]]</code>, <code>[^0-9]</code>, <code>[^[:digit:]]</code><br><code>[a-z]</code>, <code>[[:lower:]]</code><br><code>[A-Z]</code>, <code>[[:upper:]]</code><br><code>[[:space:]]</code><br><code>[[:punct:]]</code><br><code>[0-9a-zA-Z]</code>, <code>[[:alnum:]]</code><br><code>[a-zA-Z]</code>, <code>[[:alpha:]]</code><br><code>[:alnum:]</code> 字母数字 <code>[a-z A-Z 0-9]</code><br><code>[:alpha:]</code> 字母 <code>[a-z A-Z]</code><br><code>[:blank:]</code> 空格或制表键<br><code>[:cntrl:]</code> 任何控制字符<br><code>[:digit:]</code> 数字 <code>[0-9]</code><br><code>[:graph:]</code> 任何可视字符（无空格）<br><code>[:lower:]</code> 小写 <code>[a-z]</code><br><code>[:print:]</code> 非控制字符<br><code>[:punct:]</code> 标点字符<br><code>[:space:]</code> 空格<br><code>[:upper:]</code> 大写 <code>[A-Z]</code><br><code>[:xdigit:]</code> 十六进制数字 <code>[0-9 a-f A-F]</code></p>
</li>
<li><p><strong>次数匹配：</strong><br><code>*</code>: 任意次<br><code>?</code>：0或1次<br><code>+</code>: 至少1次<br><code>{m}</code>：精确匹配m次；<br><code>{m,n}</code>：至少m次，至多次；<br><code>{m,}</code>：至少m次；<br><code>{0,n}</code>：至多次；</p>
</li>
<li><p><strong>位置锚定：</strong><br>  <code>^</code><br>  <code>$</code><br>  <code>\&lt;</code>, <code>\b</code><br>  <code>\&gt;</code>, <code>\b</code></p>
</li>
<li><p><strong>分组：</strong><br>  <code>()</code><br>  引用：\1,\2,...</p>
</li>
<li><p><strong>或者：</strong><br>  a<code>|</code>b：a或者b</p>
<pre><code>或者两侧的所有内容；
</code></pre></li>
<li><p><strong>命令：</strong><br> <code>grep -E PATTERN FILE...</code><br>  <code>egrep PATTERN FILE...</code></p>
</li>
</ul>
<h2 id="2、grep命令常用语法"><a href="#2、grep命令常用语法" class="headerlink" title="2、grep命令常用语法"></a>2、grep命令常用语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep命令：</span><br><span class="line"> grep [OPTIONS] PATTERN [FILE...]</span><br><span class="line">     --color[=WHEN], --colour[=WHEN]</span><br><span class="line">     	auto</span><br><span class="line">     	always</span><br><span class="line">     	never</span><br><span class="line">     		例子：grep --color=auto &quot;root&quot; /etc/passwd</span><br><span class="line">    </span><br><span class="line">     -o: 只显示被模式匹配到的内容</span><br><span class="line">     -i: ignore case，不区分字符大小写</span><br><span class="line">     -v: 显示不能够被模式匹配到的行</span><br><span class="line">     -E：使用扩展的正则表达式</span><br><span class="line">     -l：匹配多个文件时，显示匹配的文件名</span><br><span class="line">     -L：匹配多个文件时，显示不匹配的文件名</span><br><span class="line">     -a：匹配二进制的文件</span><br><span class="line">     -I：不匹配二进制的文件			 	</span><br><span class="line">     -A #：后几行</span><br><span class="line">     -B #：前几行</span><br><span class="line">     -C #：前后几行</span><br></pre></td></tr></table></figure>
<h2 id="3、grep命令练习"><a href="#3、grep命令练习" class="headerlink" title="3、grep命令练习"></a>3、grep命令练习</h2><h3 id="3-1、普通正则表达式练习"><a href="#3-1、普通正则表达式练习" class="headerlink" title="3.1、普通正则表达式练习"></a>3.1、普通正则表达式练习</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、显示/proc/meminfo文件中以大写或小写S开头的行；用两种方式；</span><br><span class="line"># grep &quot;^[sS]&quot; /proc/meminfo</span><br><span class="line"></span><br><span class="line">2、显示/etc/passwd文件中其默认shell为非/sbin/nologin的用户；</span><br><span class="line"># grep -v &quot;/sbin/nologin$&quot; /etc/passwd | cut -d: -f1</span><br><span class="line"></span><br><span class="line">3、显示/etc/passwd文件中其默认shell为/bin/bash的用户；</span><br><span class="line"># grep &quot;/bin/bash$&quot; /etc/passwd | cut -d: -f1</span><br><span class="line"></span><br><span class="line">4、找出/etc/passwd文件中的一位数或两位数；</span><br><span class="line"># grep &quot;\&lt;[0-9]\&#123;1,2\&#125;\&gt;&quot; /etc/passwd</span><br><span class="line"></span><br><span class="line">5、显示/boot/grub/grub.conf中以至少一个空白字符开头的行；</span><br><span class="line"># grep &quot;^[[:space:]]\+&quot; /boot/grub/grub.conf</span><br><span class="line"></span><br><span class="line">6、显示/etc/rc.d/rc.sysinit文件中以#开头，后面跟至少一个空白字符，而后又有至少一个非空白字符的行；</span><br><span class="line"># grep &quot;^#[[:space:]]\+[^[:space:]]\+&quot; /etc/rc.d/rc.sysinit</span><br><span class="line"></span><br><span class="line">7、打出netstat -tan命令执行结果中以‘LISTEN’，后或跟空白字符结尾的行；</span><br><span class="line"># netstat -tan | grep &quot;LISTEN[[:space:]]*$&quot;</span><br><span class="line"></span><br><span class="line">8、添加用户bash, testbash, basher, nologin (此一个用户的shell为/sbin/nologin)，而后找出当前系统上其用户名和默认shell相同的用户的信息；</span><br><span class="line"># grep &quot;^\([[:alnum:]]\+\&gt;\).*\1$&quot; /etc/passwd</span><br></pre></td></tr></table></figure>
<h3 id="3-1、扩展正则表达式练习"><a href="#3-1、扩展正则表达式练习" class="headerlink" title="3.1、扩展正则表达式练习"></a>3.1、扩展正则表达式练习</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、显示/proc/meminfo文件中以大写或小写S开头的行；用三种方式；</span><br><span class="line"># grep -E &quot;^[sS]&quot; /proc/meminfo</span><br><span class="line"># grep -E &quot;^(s|S)&quot; /proc/meminfo</span><br><span class="line"># egrep -i &quot;^s&quot; /proc/meminfo</span><br><span class="line"></span><br><span class="line">2、显示/etc/passwd文件中其默认shell为非/sbin/nologin的用户；</span><br><span class="line"># egrep -v &quot;/sbin/nologin$&quot; /etc/passwd | cut -d: -f1</span><br><span class="line"></span><br><span class="line">3、显示/etc/passwd文件中其默认shell为/bin/bash的用户；</span><br><span class="line"># egrep &quot;/bin/bash$&quot; /etc/passwd | cut -d: -f1</span><br><span class="line"></span><br><span class="line">4、找出/etc/passwd文件中的一位数或两位数；			</span><br><span class="line"># egrep --color=auto &quot;\&lt;[0-9]&#123;1,2&#125;\&gt;&quot; /etc/passwd</span><br><span class="line"></span><br><span class="line">5、显示/boot/grub/grub.conf中以至少一个空白字符开头的行；</span><br><span class="line"># egrep &quot;^[[:space:]]+&quot; /boot/grub/grub.conf</span><br><span class="line"></span><br><span class="line">6、显示/etc/rc.d/rc.sysinit文件中以#开头，后面跟至少一个空白字符，而后又有至少一个非空白字符的行；</span><br><span class="line"># egrep &quot;^#[[:space:]]+[^[:space:]]+&quot; /etc/rc.d/rc.sysinit</span><br><span class="line"></span><br><span class="line">7、打出netstat -tan命令执行结果中以‘LISTEN’，后或跟空白字符结尾的行；</span><br><span class="line"># netstat -tan | egrep &quot;LISTEN[[:space:]]*$&quot;</span><br><span class="line"></span><br><span class="line">8、添加用户bash, testbash, basher, nologin (此一个用户的shell为/sbin/nologin)，而后找出当前系统上其用户名和默认shell相同的用户的信息；</span><br><span class="line"># egrep &quot;^([[:alnum:]]+\&gt;).*\1$&quot; /etc/passwd</span><br><span class="line"></span><br><span class="line">9、显示当前系统上root、fedora或user1用户的默认shell；</span><br><span class="line"># grep -E &quot;^(root|fedora|user1)\&gt;&quot; /etc/passwd | cut -d: -f7</span><br><span class="line"></span><br><span class="line">10、找出/etc/rc.d/init.d/functions文件中某单词后面跟一组小括号的行，形如：hello()；</span><br><span class="line"># grep -o -E &quot;\&lt;[[:alnum:]]+\&gt;\(\)&quot; /etc/rc.d/init.d/functions</span><br><span class="line"></span><br><span class="line">11、使用echo命令输出一个绝对路径，使用grep取出其基名；</span><br><span class="line">扩展：取出其路径名</span><br><span class="line"># echo /etc/rc.d/init.d/functions | grep -o -E &quot;[[:alnum:]]+/?$&quot; | cut -d/ -f1</span><br><span class="line"></span><br><span class="line">12、找出ifconfig命令结果中的1-255之间数字；</span><br><span class="line"># ifconfig | grep -E &quot;\&lt;([1-9]|[1-9][0-9]|1[0-9]&#123;2&#125;|2[0-4][0-9]|25[0-5])\&gt;&quot;</span><br><span class="line"></span><br><span class="line">13、挑战题：写一个模式，能匹配合理的IP地址；</span><br><span class="line">	1.0.0.1 -- 239.255.255.255</span><br><span class="line"></span><br><span class="line">14、挑战题：写一个模式，能匹配出所有的邮件地址；</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令之-htop强大的linux任务管理器</title>
    <url>/2019/08/15/linux%E5%91%BD%E4%BB%A4%E4%B9%8B-htop%E5%BC%BA%E5%A4%A7%E7%9A%84linux%E4%BB%BB%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8/</url>
    <content><![CDATA[<h1 id="linux命令之-htop强大的linux任务管理器"><a href="#linux命令之-htop强大的linux任务管理器" class="headerlink" title="linux命令之-htop强大的linux任务管理器"></a>linux命令之-htop强大的linux任务管理器</h1><h2 id="1、htop命令介绍"><a href="#1、htop命令介绍" class="headerlink" title="1、htop命令介绍"></a>1、htop命令介绍</h2><blockquote>
<p>htop是一款运行于Linux系统监控与进程管理软件，用于取代Unix下传统的top。与top只提供最消耗资源的进程列表不同，htop提供所有进程的列表，并且使用彩色标识出处理器、swap和内存状态。用户一般可以在top无法提供详尽系统信息的情况下选择安装并使用htop。比如，在查找应用程序的内存泄漏问题时。与top相比，htop提供更方便、光标控制的界面来杀死进程。</p>
</blockquote>
<h2 id="2、htop安装"><a href="#2、htop安装" class="headerlink" title="2、htop安装"></a>2、htop安装</h2><h3 id="2-1、安装epel源"><a href="#2-1、安装epel源" class="headerlink" title="2.1、安装epel源"></a>2.1、安装epel源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure>
<h3 id="2-2、安装htop"><a href="#2-2、安装htop" class="headerlink" title="2.2、安装htop"></a>2.2、安装htop</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install htop -y</span><br></pre></td></tr></table></figure>
<h2 id="3、htop图形界面"><a href="#3、htop图形界面" class="headerlink" title="3、htop图形界面"></a>3、htop图形界面</h2><ul>
<li>上左区：显示了CPU、物理内存和交换分区的信息；</li>
<li>上右区：显示了任务数量、平均负载和连接运行时间等信息；</li>
<li>进程区域：显示出当前系统中的所有进程；</li>
<li>操作提示区：显示了当前界面中F1-F10功能键中定义的快捷功能。</li>
</ul>
<h2 id="4、htop命令语法"><a href="#4、htop命令语法" class="headerlink" title="4、htop命令语法"></a>4、htop命令语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#AME</span><br><span class="line">    htop - interactive process viewer</span><br><span class="line"></span><br><span class="line">#SYNOPSIS</span><br><span class="line">    htop [-dChusv]</span><br><span class="line"></span><br><span class="line">#DESCRIPTION</span><br><span class="line">    Htop is a free (GPL) ncurses-based process viewer for Linux.</span><br><span class="line">    It is similar to top, but allows you to scroll vertically and horizontally, so you can see all the processes running on the system, along with their full command lines.</span><br><span class="line">    Tasks related to processes (killing, renicing) can be done without entering their PIDs.</span><br><span class="line"></span><br><span class="line">#命令行选项(COMMAND-LINE OPTIONS)</span><br><span class="line">    Mandatory arguments to long options are madatory for short options too.</span><br><span class="line">    -d --delay=DELAY</span><br><span class="line">          设置界面刷新时间，单位为秒（实测有点坑，10=1秒）</span><br><span class="line">    -C --no-color --no-colour</span><br><span class="line">          使用黑白界面</span><br><span class="line">    -h --help</span><br><span class="line">          打印帮助信息</span><br><span class="line">    -u --user=USERNAME</span><br><span class="line">          展示指定用户的进程和信息</span><br><span class="line">    -p     只显示给定的PIDs</span><br><span class="line">    -s --sort-key COLUMN</span><br><span class="line">          以指定的列排序 (htop -s PID）</span><br><span class="line">    -v --version</span><br><span class="line">          打印htop版本信息</span><br><span class="line"></span><br><span class="line">#交互式命令(INTERACTIVE COMMANDS)</span><br><span class="line">    The following commands are supported while in htop:</span><br><span class="line">    上下键或PgUP, PgDn 选定想要的进程，左右键或Home, End 移动字段，当然也可以直接用鼠标选定进程；</span><br><span class="line"></span><br><span class="line">    Space   标记/取消标记一个进程。命令可以作用于多个进程，例如 &quot;kill&quot;，将应用于所有已标记的进程</span><br><span class="line">    F1      显示帮助信息</span><br><span class="line">    F2      Htop设定</span><br><span class="line">    F3      搜索进程  #是按照进程名进行搜索的</span><br><span class="line">    F4      过滤器 #相当于模糊查找，不区分大小写，下方输入要搜索的内容后，则界面只显示搜索到的内容</span><br><span class="line">    F5      以树形方式显示</span><br><span class="line">    F6      排序</span><br><span class="line">    F7      查看nice优先级</span><br><span class="line">    F9      杀死进程</span><br><span class="line">    U       取消标记所有进程</span><br><span class="line">    s       选择某一进程，按s:用strace追踪进程的系统调用（依赖strace和ltrace命令）</span><br><span class="line">    l       显示进程打开的文件: 如果安装了lsof，按此键可以显示进程所打开的文件</span><br><span class="line">    I       倒转排序顺序，如果排序是正序的，则反转成倒序的，反之亦然</span><br><span class="line">    +,-     在树视图模式下，展开或折叠子树。当一个子树被折叠时，在进程名的左侧会显示一个“+”符号</span><br><span class="line">    a       (在有多处理器的机器上)    设置 CPU affinity: 标记一个进程允许使用哪些CPU</span><br><span class="line">    u       显示特定用户进程</span><br><span class="line">    M       按Memory 使用排序</span><br><span class="line">    P       按CPU 使用排序</span><br><span class="line">    T       按Time+ 使用排序</span><br><span class="line">    F       跟踪进程: 如果排序顺序引起选定的进程在列表上到处移动，让选定条跟随该进程。这对监视一个进程非常有用：通过这种方式，你可以让一个进程在屏幕上一直可见。使用方向键会停止该功能</span><br><span class="line">    K       显示/隐藏内核线程</span><br><span class="line">    H       显示/隐藏用户线程</span><br><span class="line">    #       快速定位光标到PID所指定的进程上。</span><br><span class="line">    Ctrl-L  刷新</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令之-rename批量修改文件名</title>
    <url>/2019/07/19/linux%E5%91%BD%E4%BB%A4%E4%B9%8B-rename%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D/</url>
    <content><![CDATA[<h1 id="linux命令之-rename批量修改文件名"><a href="#linux命令之-rename批量修改文件名" class="headerlink" title="linux命令之-rename批量修改文件名"></a>linux命令之-rename批量修改文件名</h1><h2 id="1、rename命令介绍"><a href="#1、rename命令介绍" class="headerlink" title="1、rename命令介绍"></a>1、rename命令介绍</h2><blockquote>
<p>rename 用于 对文件进行命名管理，可进行批量命名并支持正则表达式，rename命令存在两个版本用法上有所区别 一个是 C语言版本支持通配符，另一个是 Perl版本.支持正则表达式，Centos6.7默认安装的是C语言的版本<code>rename (util-linux-ng 2.17.2)</code></p>
</blockquote>
<h2 id="2、rename命令语法"><a href="#2、rename命令语法" class="headerlink" title="2、rename命令语法"></a>2、rename命令语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NAME</span><br><span class="line">       rename - Rename files</span><br><span class="line">SYNOPSIS</span><br><span class="line">       rename from to file...</span><br><span class="line">       rename -V</span><br><span class="line">DESCRIPTION</span><br><span class="line">       rename will rename the specified files by replacing the first occurrence of from in their name by to.</span><br><span class="line">       #版本查看</span><br><span class="line">       -V, --version</span><br><span class="line">              Display version information and exit.</span><br><span class="line">       For example, given the files</span><br><span class="line">              foo1, ..., foo9, foo10, ..., foo278, the commands</span><br><span class="line">              rename foo foo0 foo?</span><br><span class="line">              rename foo foo0 foo??</span><br><span class="line">       will turn them into foo001, ..., foo009, foo010, ..., foo278.</span><br><span class="line">       And</span><br><span class="line">              rename .htm .html *.htm</span><br><span class="line">       will fix the extension of your html files.</span><br><span class="line">SEE ALSO</span><br><span class="line">       mmv(1), mv(1)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#中文详解</span><br><span class="line">    rename &#123;from&#125; &#123;to&#125; &#123;file...&#125;</span><br><span class="line">    rename -V</span><br><span class="line">	from：</span><br><span class="line">		原字符串：将文件名需要替换的字符串； </span><br><span class="line">	to：</span><br><span class="line">		目标字符串：将文件名中含有的原字符替换成目标字符串； </span><br><span class="line">	file：</span><br><span class="line">		文件：指定要改变文件名的文件列表。</span><br><span class="line">#rename支持通配符</span><br><span class="line">	?:</span><br><span class="line">	    可替代单个字符</span><br><span class="line">    *:</span><br><span class="line">        可替代多个字符</span><br><span class="line">    [charset]:</span><br><span class="line">        可替代charset集中的任意单个字符</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="3、rename使用详列"><a href="#3、rename使用详列" class="headerlink" title="3、rename使用详列"></a>3、rename使用详列</h2><h3 id="3-1、例子：通过rename批量删除文件指定字段名"><a href="#3-1、例子：通过rename批量删除文件指定字段名" class="headerlink" title="3.1、例子：通过rename批量删除文件指定字段名"></a>3.1、例子：通过rename批量删除文件指定字段名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@zabbix test]# for i in `seq -w 3`; do touch lisir\_$i\_linux.jpg; done</span><br><span class="line">[root@zabbix test]# ll</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:47 lisir_01_linux.jpg</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:47 lisir_02_linux.jpg</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:47 lisir_03_linux.jpg</span><br><span class="line">[root@zabbix test]# rename \_linux &apos;&apos; *.jpg</span><br><span class="line">[root@zabbix test]# ll</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:47 lisir_01.jpg</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:47 lisir_02.jpg</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:47 lisir_03.jpg</span><br><span class="line">#注意，如果想要替换掉下划线，那么你不能加任何引号</span><br></pre></td></tr></table></figure>
<h3 id="3-2、例子：通过rename批量修改文件指定字段名"><a href="#3-2、例子：通过rename批量修改文件指定字段名" class="headerlink" title="3.2、例子：通过rename批量修改文件指定字段名"></a>3.2、例子：通过rename批量修改文件指定字段名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@zabbix test]# ll</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:53 lisir_1.jpg.bak</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:53 lisir_2.jpg.bak</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:53 lisir_3.jpg.bak</span><br><span class="line">[root@zabbix test]# rename lisir lgc *</span><br><span class="line">[root@zabbix test]# ll</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:53 lgc_1.jpg.bak</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:53 lgc_2.jpg.bak</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:53 lgc_3.jpg.bak</span><br></pre></td></tr></table></figure>
<h3 id="3-3、例子：通过rename批量修改后缀名"><a href="#3-3、例子：通过rename批量修改后缀名" class="headerlink" title="3.3、例子：通过rename批量修改后缀名"></a>3.3、例子：通过rename批量修改后缀名</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@zabbix test]# ll</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:53 lisir_1.jpg</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:53 lisir_2.jpg</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:53 lisir_3.jpgl</span><br><span class="line">[root@zabbix test]# rename .jpg .jpg.bak *.jpg</span><br><span class="line">[root@zabbix test]# ll</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:53 lisir_1.jpg.bak</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:53 lisir_2.jpg.bak</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:53 lisir_3.jpg.bak</span><br></pre></td></tr></table></figure>
<h3 id="3-4、注意：修改任何文件前先进行备份"><a href="#3-4、注意：修改任何文件前先进行备份" class="headerlink" title="3.4、注意：修改任何文件前先进行备份"></a>3.4、注意：修改任何文件前先进行备份</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@zabbix test]# find . -name &quot;*.jpg&quot; -exec cp &#123;&#125; &#123;&#125;.bak \;</span><br><span class="line">[root@zabbix test]# ll</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:53 lisir_1.jpg</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:58 lisir_1.jpg.bak</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:53 lisir_2.jpg</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:58 lisir_2.jpg.bak</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:53 lisir_3.jpg</span><br><span class="line">-rw-r--r-- 1 root root 0 Oct 30 10:58 lisir_3.jpg.bak</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令之-tmux终端复用器</title>
    <url>/2020/08/16/linux%E5%91%BD%E4%BB%A4%E4%B9%8B-tmux%E7%BB%88%E7%AB%AF%E5%A4%8D%E7%94%A8%E5%99%A8/</url>
    <content><![CDATA[<h1 id="linux命令之-tmux终端复用器"><a href="#linux命令之-tmux终端复用器" class="headerlink" title="linux命令之-tmux终端复用器"></a>linux命令之-tmux终端复用器</h1><h2 id="1、tmux工具介绍"><a href="#1、tmux工具介绍" class="headerlink" title="1、tmux工具介绍"></a>1、tmux工具介绍</h2><blockquote>
<p>tmux是一个 terminal multiplexer（终端复用器），它可以启动一系列终端会话。我们使用命令行时，打开一个终端窗口，,会话开始，执行某些命令如npm run dev，关闭此终端窗口，会话结束，npm run dev服务会话随之被关闭。有时我们希望我们运行的服务如npm run dev 或者一些cd命令等，被保留，而不是关闭窗口再打开后，重新手动执行。tmux的主要用途就在于此。它解绑了会话和终端窗口。关闭终端窗口再打开，会话并不终止，而是继续运行在执行。将会话与终端窗后彻底分离。</p>
</blockquote>
<h2 id="2、tmux工具安装"><a href="#2、tmux工具安装" class="headerlink" title="2、tmux工具安装"></a>2、tmux工具安装</h2><h3 id="2-1、epel安装"><a href="#2-1、epel安装" class="headerlink" title="2.1、epel安装"></a>2.1、epel安装</h3><ul>
<li>yum安装前需要安装epel源<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rpm -ivh http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</span><br><span class="line">yum install tmux -y</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-2、github编译安装"><a href="#2-2、github编译安装" class="headerlink" title="2.2、github编译安装"></a>2.2、github编译安装</h3><ul>
<li>编译安装前需要安装如下工具：autoconf, automake and pkg-config<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/tmux/tmux.git</span><br><span class="line">cd tmux</span><br><span class="line">sh autogen.sh</span><br><span class="line">./configure &amp;&amp; make</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3、tmux会话管理"><a href="#3、tmux会话管理" class="headerlink" title="3、tmux会话管理"></a>3、tmux会话管理</h2><h3 id="3-1、新建会话"><a href="#3-1、新建会话" class="headerlink" title="3.1、新建会话"></a>3.1、新建会话</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#新建一个会话名称为lisir-workbench的终端窗口</span><br><span class="line">[root@docker ~]# tmux new -s lisir-workbench的终端窗口</span><br></pre></td></tr></table></figure>
<h3 id="3-2、分离会话"><a href="#3-2、分离会话" class="headerlink" title="3.2、分离会话"></a>3.2、分离会话</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#在Tmux窗口中，按下Ctrl+b d或者输入tmux detach命令，就会将当前会话与窗口分离</span><br><span class="line">[root@docker ~]# tmux detach</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看当前所有tmux会话</span><br><span class="line">[root@docker ~]# tmux ls</span><br><span class="line">lisir-workbench: 1 windows (created Sun Aug 16 00:36:03 2020) [270x55]</span><br><span class="line">[root@docker ~]# tmux list-session</span><br><span class="line">lisir-workbench: 1 windows (created Sun Aug 16 00:36:03 2020) [270x55]</span><br></pre></td></tr></table></figure>
<h3 id="3-3、接入会话"><a href="#3-3、接入会话" class="headerlink" title="3.3、接入会话"></a>3.3、接入会话</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#通过终端编号接入会话</span><br><span class="line">[root@docker ~]# tmux attach -t 0</span><br><span class="line">#通过session-name接入会话</span><br><span class="line">[root@docker ~]# tmux attach -t lisir-workbench</span><br></pre></td></tr></table></figure>
<h3 id="3-4、杀死会话"><a href="#3-4、杀死会话" class="headerlink" title="3.4、杀死会话"></a>3.4、杀死会话</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#通过session-name杀死会话</span><br><span class="line">[root@docker ~]# tmux kill-session -t lisir-workbench</span><br><span class="line">[root@docker ~]# tmux ls</span><br><span class="line">failed to connect to server</span><br></pre></td></tr></table></figure>
<h3 id="3-5、切换会话"><a href="#3-5、切换会话" class="headerlink" title="3.5、切换会话"></a>3.5、切换会话</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@docker ~]# tmux ls</span><br><span class="line">lisir01: 1 windows (created Sun Aug 16 00:39:56 2020) [270x55]</span><br><span class="line">lisir02: 1 windows (created Sun Aug 16 00:40:03 2020) [270x55]</span><br><span class="line">lisir03: 1 windows (created Sun Aug 16 00:40:06 2020) [270x55]</span><br><span class="line">#接入lisir01会话</span><br><span class="line">[root@docker ~]# tmux attach -t lisir01</span><br><span class="line">#在lisir01中执行如下命令切换至lisir02会话</span><br><span class="line">[root@docker ~]# tmux swich -t lisir02</span><br></pre></td></tr></table></figure>
<h3 id="3-6、重命名会话"><a href="#3-6、重命名会话" class="headerlink" title="3.6、重命名会话"></a>3.6、重命名会话</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#如下命令将lisir01会话名称改为lisir666</span><br><span class="line">[root@docker ~]# tmux rename-session -t lisir01 lisir666</span><br><span class="line">[root@docker ~]# tmux ls</span><br><span class="line">lisir02: 1 windows (created Sun Aug 16 00:40:03 2020) [270x55]</span><br><span class="line">lisir03: 1 windows (created Sun Aug 16 00:40:06 2020) [270x55]</span><br><span class="line">lisir666: 1 windows (created Sun Aug 16 00:39:56 2020) [270x55]</span><br></pre></td></tr></table></figure>
<h3 id="3-7、会话快捷键"><a href="#3-7、会话快捷键" class="headerlink" title="3.7、会话快捷键"></a>3.7、会话快捷键</h3><ul>
<li>注意：回话快捷键可能与xshell有冲突，请测试；<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Ctrl+b d：分离当前会话。</span><br><span class="line">Ctrl+b s：列出所有会话。</span><br><span class="line">Ctrl+b $：重命名当前会话。</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="4、tmux工具实践"><a href="#4、tmux工具实践" class="headerlink" title="4、tmux工具实践"></a>4、tmux工具实践</h2><ul>
<li>新建会话<code>tmux new -s my_session</code>。</li>
<li>在 Tmux 窗口运行所需的程序。</li>
<li>在 Tmux 窗口下输入<code>tmux detach</code>将会话分离。</li>
<li>下次使用时，重新连接到会话<code>tmux attach -t my_session</code>。</li>
</ul>
<h2 id="5、tmux窗格操作"><a href="#5、tmux窗格操作" class="headerlink" title="5、tmux窗格操作"></a>5、tmux窗格操作</h2><ul>
<li>提示：tmux具有拆分窗格的功能，但使用后发现不实用，不如直接xshell分屏来的直接，本笔记不在记录</li>
</ul>
<h2 id="6、其他命令"><a href="#6、其他命令" class="headerlink" title="6、其他命令"></a>6、其他命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#列出所有快捷键，及其对应的 Tmux 命令</span><br><span class="line">tmux list-keys</span><br><span class="line">#列出所有 Tmux 命令及其参数</span><br><span class="line">tmux list-commands</span><br><span class="line">#列出当前所有 Tmux 会话的信息</span><br><span class="line">tmux info</span><br><span class="line">#重新加载当前的 Tmux 配置</span><br><span class="line">tmux source-file ~/.tmux.conf</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令之SSHFS远程挂载目录</title>
    <url>/2020/08/15/linux%E5%91%BD%E4%BB%A4%E4%B9%8BSSHFS%E8%BF%9C%E7%A8%8B%E6%8C%82%E8%BD%BD%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h1 id="linux命令之SSHFS远程挂载目录"><a href="#linux命令之SSHFS远程挂载目录" class="headerlink" title="linux命令之SSHFS远程挂载目录"></a>linux命令之SSHFS远程挂载目录</h1><h2 id="1、什么是SSHFS"><a href="#1、什么是SSHFS" class="headerlink" title="1、什么是SSHFS"></a>1、什么是SSHFS</h2><blockquote>
<p>SSHFS（Secure SHell FileSystem）是一个客户端，可以让我们通过 SSH 文件传输协议（SFTP）挂载远程的文件系统并且在本地机器上和远程的目录和文件进行交互。SFTP 是一种通过 SSH协议提供文件访问、文件传输和文件管理功能的安全文件传输协议。因为 SSH 在网络中从一台电脑到另一台电脑传输文件的时候使用数据加密通道，并且 SSHFS 内置在 FUSE（用户空间的文件系统）内核模块，允许任何非特权用户在不修改内核代码的情况下创建他们自己的文件系统。</p>
</blockquote>
<ul>
<li><a href="https://www.vultr.com/docs/mount-a-remote-file-system-with-sshfs-on-centos-6" title="安装手册（英文）" target="_blank" rel="noopener">SSHFS指导手册</a></li>
</ul>
<h2 id="2、安装先决条件"><a href="#2、安装先决条件" class="headerlink" title="2、安装先决条件"></a>2、安装先决条件</h2><blockquote>
<p>目标主机必须安装ssh服务，确保服务启动和端口通信正常，要实现开机永久挂载，可添加fstab，需实现主机间免密即可，可用于docker容器间的目录挂载非常方便。</p>
</blockquote>
<h2 id="3、安装SSHFS"><a href="#3、安装SSHFS" class="headerlink" title="3、安装SSHFS"></a>3、安装SSHFS</h2><table>
<thead>
<tr>
<th>平台</th>
<th>IP</th>
<th>系统类型</th>
<th>主机类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS 7.8 64Bit</td>
<td>192.168.1.200</td>
<td>默认</td>
<td>Docker Server</td>
<td></td>
</tr>
</tbody>
</table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@docker ~]# yum install epel-release -y</span><br><span class="line">[root@docker ~]# yum install sshfs -y</span><br><span class="line">#-p端口 用户@IP:远程目录 目标目录 -o确认无误</span><br><span class="line">[root@docker ~]# sshfs -p22 root@172.17.0.3:/usr/local/nginx/html/ /soft/nginx_wwww/ -o nonempty</span><br><span class="line">root@172.17.0.3:</span><br><span class="line">[root@docker ~]# df -h</span><br><span class="line">Filesystem                              Size  Used Avail Use% Mounted on</span><br><span class="line">...</span><br><span class="line">root@172.17.0.3:/usr/local/nginx/html/   98G   11G   87G  12% /soft/nginx_wwww</span><br></pre></td></tr></table></figure>
<h2 id="4、连接容器测试"><a href="#4、连接容器测试" class="headerlink" title="4、连接容器测试"></a>4、连接容器测试</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#写入测试页面</span><br><span class="line">[root@docker nginx_wwww]# echo &apos;sshfs mount test!&apos; &gt; index.html</span><br><span class="line">[root@docker ~]# docker exec -it 89899938084b /bin/bash</span><br><span class="line">#进入容器</span><br><span class="line">[root@89899938084b html]# cat index.html </span><br><span class="line">sshfs mount test!</span><br></pre></td></tr></table></figure>
<h2 id="5、开机永久挂载"><a href="#5、开机永久挂载" class="headerlink" title="5、开机永久挂载"></a>5、开机永久挂载</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#开机宿主机与容器间的免密</span><br><span class="line">[root@docker ~]# ssh-keygen -t rsa</span><br><span class="line">[root@docker ~]# ssh-copy-id -i /root/.ssh/id_rsa.pub &quot;root@172.17.0.3&quot;</span><br><span class="line">[root@docker nginx_wwww]# ssh root@172.17.0.3 &apos;date&apos;</span><br><span class="line">Sun Jul 26 09:43:53 UTC 2020</span><br><span class="line">#关于sshfs的其他参数可在&quot;defaults,&quot;后面追加</span><br><span class="line">[root@docker ~]# echo &apos;root@172.17.0.3:/usr/local/nginx/html/ /soft/nginx_wwww/ fuse.sshfs defaults,allow_other,nonempty 0 0&apos; &gt;&gt; /etc/fstab</span><br><span class="line">[root@docker ~]# mount -a</span><br><span class="line">[root@docker ~]# df -h</span><br><span class="line">Filesystem                              Size  Used Avail Use% Mounted on</span><br><span class="line">...</span><br><span class="line">root@172.17.0.3:/usr/local/nginx/html/   98G   11G   87G  12% /soft/nginx_wwww</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令之-xargs超级管道</title>
    <url>/2019/09/24/linux%E5%91%BD%E4%BB%A4%E4%B9%8B-xargs%E8%B6%85%E7%BA%A7%E7%AE%A1%E9%81%93/</url>
    <content><![CDATA[<h1 id="linux命令之-xargs超级管道"><a href="#linux命令之-xargs超级管道" class="headerlink" title="linux命令之-xargs超级管道"></a>linux命令之-xargs超级管道</h1><h2 id="1、xagrs命令详解"><a href="#1、xagrs命令详解" class="headerlink" title="1、xagrs命令详解"></a>1、xagrs命令详解</h2><h3 id="1-1、命简单令介绍"><a href="#1-1、命简单令介绍" class="headerlink" title="1.1、命简单令介绍"></a>1.1、命简单令介绍</h3><p><img src="http://static.zybuluo.com/a807257775/v8zaxf1h9qvck7l40vkxvtdz/image_1dlhn08g81asfmcf1h541dc81b7mm.png" alt="image_1dlhn08g81asfmcf1h541dc81b7mm.png-619.7kB"></p>
<ul>
<li>xargs - build and execute command lines from standard input，xargs 命令的作用，是将标准输入转为命令行参数，Unix 命令都带有参数，有些命令可以接受”标准输入”（<code>stdin</code>）作为参数。如:(<code>cat /etc/passwd | grep root</code>)上面的代码使用了管道命令（<code>|</code>）。管道命令的作用，是将左侧命令（<code>cat /etc/passwd</code>）的标准输出转换为标准输入，提供给右侧命令（<code>grep root</code>）作为参数。因为 grep 命令可以接受标准输入作为参数，所以上面的代码等同于下面的代码。(<code>grep root /etc/passwd</code>),但是，大多数命令都不接受标准输入作为参数，只能直接在命令行输入参数，这导致无法用管道命令传递参数。举例来说，echo 命令就不接受管道传参。(<code>echo &quot;hello world&quot; | echo</code>)，上面的代码不会有输出。因为管道右侧的 echo 不接受管道传来的标准输入作为参数。</li>
</ul>
<h3 id="1-2、命令应用场景"><a href="#1-2、命令应用场景" class="headerlink" title="1.2、命令应用场景"></a>1.2、命令应用场景</h3><ul>
<li>xargs 的作用在于，大多数命令（比如 rm、mkdir、ls ）与管道一起使用时，都需要 xargs 将标准输入转为命令行参数，主要是将标准输入转为命令行参数；<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#如下的指令将管道左侧的标准输入，转为命令行参数 hello world，传给第二个 echo 命令。</span><br><span class="line">[root@elk ~]# echo &quot;hello world&quot; | xargs echo</span><br><span class="line">hello world</span><br><span class="line">#如下的指令等同于 mkdir one two three。如果不加 xargs 就会报错，提示 mkdir 缺少操作参数。</span><br><span class="line">[root@elk ~]# echo &quot;one two three&quot; | xargs mkdir -pv</span><br><span class="line">mkdir: 已创建目录 &quot;one&quot;</span><br><span class="line">mkdir: 已创建目录 &quot;two&quot;</span><br><span class="line">mkdir: 已创建目录 &quot;three&quot;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2、xargs命令实战"><a href="#2、xargs命令实战" class="headerlink" title="2、xargs命令实战"></a>2、xargs命令实战</h2><h3 id="2-1、命令帮助手册"><a href="#2-1、命令帮助手册" class="headerlink" title="2.1、命令帮助手册"></a>2.1、命令帮助手册</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#NAME</span><br><span class="line">       xargs - build and execute command lines from standard input</span><br><span class="line"></span><br><span class="line">#SYNOPSIS</span><br><span class="line">       xargs  [-0prtx]  [-E eof-str] [-e[eof-str]] [--eof[=eof-str]] [--null] [-d delimiter] [--delimiter delimiter] [-I replace-str] [-i[replace-str]] [--replace[=replace-str]] [-l[max-lines]] [-L max-lines] [--max-lines[=max-lines]] [-n max-</span><br><span class="line">       args] [--max-args=max-args] [-s max-chars] [--max-chars=max-chars] [-P max-procs] [--max-procs=max-procs] [--interactive] [--verbose] [--exit] [--no-run-if-empty] [--arg-file=file] [--show-limits] [--version] [--help] [command [initial-</span><br><span class="line">       arguments]]</span><br><span class="line"></span><br><span class="line">#DESCRIPTION</span><br><span class="line">       This  manual page documents the GNU version of xargs.  xargs reads items from the standard input, delimited by blanks (which can be protected with double or single quotes or a backslash) or newlines, and executes the command (default is</span><br><span class="line">       /bin/echo) one or more times with any initial-arguments followed by items read from standard input.  Blank lines on the standard input are ignored.</span><br><span class="line">       Because Unix filenames can contain blanks and newlines, this default behaviour is often problematic; filenames containing blanks and/or newlines are incorrectly processed by xargs.  In these situations it is better to use the -0 option,</span><br><span class="line">       which  prevents  such problems.   When using this option you will need to ensure that the program which produces the input for xargs also uses a null character as a separator.  If that program is GNU find for example, the -print0 option</span><br><span class="line">       does this for you.</span><br><span class="line">       If any invocation of the command exits with a status of 255, xargs will stop immediately without reading any further input.  An error message is issued on stderr when this happens.</span><br><span class="line"></span><br><span class="line">#OPTIONS（仅贴出主要使用参数进行翻译）</span><br><span class="line">       -0     由于 xargs 默认将空格作为分隔符，所以不太适合处理文件名，因为文件名可能包含空格。find 命令有一个特别的参数 -print0，指定输出的文件列表以 null 分隔。然后，xargs 命令的 -0 参数表示用 null 当作分隔符。</span><br><span class="line"></span><br><span class="line">       -d delim</span><br><span class="line">              为输入指定一个定制的分割符，默认情况下，xargs将换行符和空格作为分隔符，把标准输入分解成一个个命令行参数，-d 参数可以更改分隔符（echo &quot;wWwWw.WbWaWiWdWuW.WcWoWm&quot; |xargs -dW）</span><br><span class="line"></span><br><span class="line">       --help Print a summary of the options to xargs and exit.</span><br><span class="line"></span><br><span class="line">       -I replace-str</span><br><span class="line">              用string来代替传递的数据-n[数字] 设置每次传递几行数据</span><br><span class="line"></span><br><span class="line">       -i[replace-str]</span><br><span class="line">              用&#123;&#125;代替 传递的数据</span><br><span class="line"></span><br><span class="line">       -L max-lines</span><br><span class="line">              如果标准输入包含多行，-L 参数指定多少行作为一个命令行参数</span><br><span class="line"></span><br><span class="line">       -n max-args</span><br><span class="line">             -L 参数虽然解决了多行的问题，但是有时用户会在同一行输入多项，-n 参数指定每次将多少项作为命令行参数。</span><br><span class="line"></span><br><span class="line">       -p     使用 xargs 命令以后，由于存在转换参数过程，有时需要确认一下到底执行的是什么命令。-p 参数打印出要执行的命令，询问用户是否要执行 ‘y’ or ‘Y’.</span><br><span class="line"></span><br><span class="line">       -s max-chars</span><br><span class="line">             [大小] 设置传递参数的最大字节数(小于131072字节)</span><br><span class="line"></span><br><span class="line">       --verbose</span><br><span class="line">       -t     -t 参数则是打印出最终要执行的命令，然后直接执行，不需要用户确认。</span><br><span class="line"></span><br><span class="line">       --version</span><br><span class="line">              Print the version number of xargs and exit.</span><br><span class="line"></span><br><span class="line">       -P max-procs</span><br><span class="line">              xargs 默认只用一个进程执行命令。如果命令要执行多次，必须等上一次执行完，才能执行下一次。--max-procs 参数指定同时用多少个进程并行执行命令。--max-procs 2 表示同时最多使用两个进程，--max-procs 0 表示不限制进程数。</span><br><span class="line"></span><br><span class="line">#EXAMPLES（实列）</span><br><span class="line">       #假如你有一个文件包含了很多你希望下载的URL, 你能够使用xargs 下载所有链接</span><br><span class="line">       cat list.txt | xargs wget –c</span><br><span class="line"></span><br><span class="line">       #查找所有的jpg 文件，并且压缩它</span><br><span class="line">       find / -name *.jpg -type f -print | xargs tar -cvzf images.tar.gz</span><br><span class="line"></span><br><span class="line">       #删除该目录下面的普通文件</span><br><span class="line">       find ./ -type f -print0 | xargs -0 rm</span><br><span class="line">       find -name &apos;.svn&apos; |xargs rm -rf </span><br><span class="line"></span><br><span class="line">       #将当前目录下php文件,改名字</span><br><span class="line">       ls | grep .php | xargs -i mv &#123;&#125; &#123;&#125;.bak    </span><br><span class="line"></span><br><span class="line">       #与上例相同</span><br><span class="line">       ls | grep .php | xargs -I &#123;&#125; mv &#123;&#125; &#123;&#125;.bak  </span><br><span class="line"></span><br><span class="line">       #删除当前文件夹下的，tmp文件</span><br><span class="line">       find ./ -name &quot;*.tmp&quot; | xargs -i rm -rf &#123;&#125;  </span><br><span class="line"></span><br><span class="line">       #将包含mem的文件并把移到指定的目录里，用户需确认是否执行</span><br><span class="line">       ls *mem*  |xargs -i -p mv &#123;&#125; sky/</span><br><span class="line"></span><br><span class="line">       #批量拷贝文件夹到指定目录</span><br><span class="line">       for i in `find . -name *.html`;do j=$&#123;i%/*/*&#125;;cp -rfp $i $j;done</span><br><span class="line"></span><br><span class="line">       #批量将当前目录下属主为root的所有类型文件，修改用户信息为www:nfsnobody</span><br><span class="line">       find . -user root |  xargs -i chown www:nfsnobody &#123;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-2、命令参数详解"><a href="#2-2、命令参数详解" class="headerlink" title="2.2、命令参数详解"></a>2.2、命令参数详解</h3><ul>
<li><p><code>-d</code> 参数与分隔符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#默认情况下，xargs将换行符和空格作为分隔符，把标准输入分解成一个个命令行参数，而-d 参数可以更改分隔符;</span><br><span class="line">#EXAMPLES-1：</span><br><span class="line">[root@elk ~]# echo &quot;wWwWw.lWiWsWiWrWlWiWfWe.WcWoWm&quot; |xargs -dW</span><br><span class="line">w w w.l i s i r l i f e. c o m</span><br><span class="line"></span><br><span class="line">#EXAMPLES-2：</span><br><span class="line">[root@elk ~]# echo -e &quot;a\tb\tc&quot;</span><br><span class="line">a	b	c</span><br><span class="line">[root@elk ~]# echo -e &quot;a\tb\tc&quot; | xargs -d &quot;\t&quot; echo</span><br><span class="line">a b c</span><br><span class="line">#上面的命令指定制表符 \t 作为分隔符，所以 a\tb\tc 就转换成了三个命令行参数。echo 命令的 -e 参数表示解释转义字符;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>-p</code> 参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#使用 xargs 命令以后，由于存在转换参数过程，有时需要确认一下到底执行的是什么命令;</span><br><span class="line">#EXAMPLES-1：</span><br><span class="line">[root@elk ~]# echo &apos;one two three&apos; | xargs -p mkdir -pv</span><br><span class="line">mkdir -pv one two three ?...y</span><br><span class="line">mkdir: 已创建目录 &quot;one&quot;</span><br><span class="line">mkdir: 已创建目录 &quot;two&quot;</span><br><span class="line">mkdir: 已创建目录 &quot;three&quot;</span><br><span class="line">#上面的命令执行以后，会打印出最终要执行的命令，让用户确认输入`y or Y`。用户按下回车以后，才会真正执行</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>-t</code>参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#-t 参数则是打印出最终要执行的命令，然后直接执行，不需要用户确认;</span><br><span class="line">#EXAMPLES-1：</span><br><span class="line">[root@elk ~]# echo &apos;one two three&apos; | xargs -t rm -rf</span><br><span class="line">rm -rf one two three</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>-0</code> 参数与 <code>find</code> 命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#由于 xargs 默认将空格作为分隔符，所以不太适合处理文件名，因为文件名可能包含空格。find 命令有一个特别的参数 -print0，指定输出的文件列表以 null 分隔。然后，xargs 命令的 -0 参数表示用 null 当作分隔符。</span><br><span class="line">#EXAMPLES-1：</span><br><span class="line">[root@localhost lisir]# ll</span><br><span class="line">总用量 0</span><br><span class="line">-rw-r--r-- 1 root root 0 9月  24 15:33 1</span><br><span class="line">-rw-r--r-- 1 root root 0 9月  24 15:33 10 10</span><br><span class="line">-rw-r--r-- 1 root root 0 9月  24 15:33 2</span><br><span class="line">-rw-r--r-- 1 root root 0 9月  24 15:33 3</span><br><span class="line">-rw-r--r-- 1 root root 0 9月  24 15:33 4</span><br><span class="line">-rw-r--r-- 1 root root 0 9月  24 15:33 5</span><br><span class="line">-rw-r--r-- 1 root root 0 9月  24 15:33 6</span><br><span class="line">-rw-r--r-- 1 root root 0 9月  24 15:33 7</span><br><span class="line">-rw-r--r-- 1 root root 0 9月  24 15:33 8</span><br><span class="line">-rw-r--r-- 1 root root 0 9月  24 15:33 9</span><br><span class="line">-rw-r--r-- 1 root root 0 9月  24 15:33 9 9</span><br><span class="line">[root@localhost lisir]# find . -type f -print0 | xargs -0 -t -p rm -rf</span><br><span class="line">rm -rf ./7 ./3 ./4 ./9 ./2 ./9 9 ./5 ./1 ./10 10 ./8 ./6 ?...</span><br><span class="line">#上面命令删除当前路径下的所有文件。由于分隔符是 null，所以处理包含空格的文件名，也不会报;。</span><br><span class="line"></span><br><span class="line">#EXAMPLES-2：</span><br><span class="line">[root@localhost lisir]# find /tmp/lisir/ -type f -mtime -1 -print0 | xargs -0 -t tar -cvzf test.tar.gz</span><br><span class="line">tar -cvzf test.tar.gz /tmp/lisir/7 /tmp/lisir/3 /tmp/lisir/4 /tmp/lisir/9 /tmp/lisir/2 /tmp/lisir/9 9 /tmp/lisir/5 /tmp/lisir/1 /tmp/lisir/10 10 /tmp/lisir/8 /tmp/lisir/6 </span><br><span class="line">[root@localhost lisir]# tar tvf test.tar.gz </span><br><span class="line">-rw-r--r-- root/root         0 2019-09-24 15:33 tmp/lisir/7</span><br><span class="line">-rw-r--r-- root/root         0 2019-09-24 15:33 tmp/lisir/3</span><br><span class="line">-rw-r--r-- root/root         0 2019-09-24 15:33 tmp/lisir/4</span><br><span class="line">-rw-r--r-- root/root         0 2019-09-24 15:33 tmp/lisir/9</span><br><span class="line">-rw-r--r-- root/root         0 2019-09-24 15:33 tmp/lisir/2</span><br><span class="line">-rw-r--r-- root/root         0 2019-09-24 15:33 tmp/lisir/9 9</span><br><span class="line">-rw-r--r-- root/root         0 2019-09-24 15:33 tmp/lisir/5</span><br><span class="line">-rw-r--r-- root/root         0 2019-09-24 15:33 tmp/lisir/1</span><br><span class="line">-rw-r--r-- root/root         0 2019-09-24 15:33 tmp/lisir/10 10</span><br><span class="line">-rw-r--r-- root/root         0 2019-09-24 15:33 tmp/lisir/8</span><br><span class="line">-rw-r--r-- root/root         0 2019-09-24 15:33 tmp/lisir/6</span><br><span class="line">#拓展:还有一个原因，使得 xargs 特别适合 find 命令。有些命令（比如 rm）一旦参数过多会报错 &quot;参数列表过长&quot;，而无法执行，改用 xargs 就没有这个问题，因为它对每个参数执行一次命令;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>-L</code> 指定行数传参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#如果标准输入包含多行，-L 参数指定多少行作为一个命令行参数;</span><br><span class="line">#EXAMPLES-1：</span><br><span class="line">[root@localhost lisir]# echo -e &quot;a\nb\nc&quot; | xargs -L 1 echo</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">#上面代码指定每行运行一次 echo 命令，所以 echo 命令执行了三次，输出了三行;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>-n</code> 参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#-L 参数虽然解决了多行的问题，但是有时用户会在同一行输入多项;</span><br><span class="line">#EXAMPLES-1：</span><br><span class="line">[root@localhost lisir]# echo &#123;0..9&#125; | xargs -n 2 echo</span><br><span class="line">0 1</span><br><span class="line">2 3</span><br><span class="line">4 5</span><br><span class="line">6 7</span><br><span class="line">8 9</span><br><span class="line">#上面命令指定，每两个参数运行一次 echo 命令。所以，10 个阿拉伯数字运行了五次 echo 命令，输出了五行;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>-I</code> 参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#如果 xargs 要将命令行参数传给多个命令，可以使用 -I 参数</span><br><span class="line">#EXAMPLES-1：</span><br><span class="line">[root@localhost lisir]# ls | egrep &apos;1|2|3|4|5&apos; | xargs -t -I &#123;&#125; mv &#123;&#125; &#123;&#125;.bak  </span><br><span class="line">mv 1 1.bak </span><br><span class="line">mv 10 10 10 10.bak </span><br><span class="line">mv 2 2.bak </span><br><span class="line">mv 3 3.bak </span><br><span class="line">mv 4 4.bak </span><br><span class="line">mv 5 5.bak </span><br><span class="line"></span><br><span class="line">#EXAMPLES-2：</span><br><span class="line">[root@localhost lisir]# echo -e &quot;one\ntwo\nthree&quot; &gt; lisir.txt</span><br><span class="line">[root@localhost lisir]# cat lisir.txt </span><br><span class="line">one</span><br><span class="line">two</span><br><span class="line">three</span><br><span class="line">[root@localhost lisir]# cat lisir.txt | xargs -I file sh -c &apos;echo file; mkdir -pv file&apos;</span><br><span class="line">one</span><br><span class="line">mkdir: 已创建目录 &quot;one&quot;</span><br><span class="line">two</span><br><span class="line">mkdir: 已创建目录 &quot;two&quot;</span><br><span class="line">three</span><br><span class="line">mkdir: 已创建目录 &quot;three&quot;</span><br><span class="line">#上面代码中，lisir.txt 是一个三行的文本文件。我们希望对每一项命令行参数，执行两个命令（echo 和 mkdir），使用 -I file 表示 file 是命令行参数的替代字符串。执行命令时，具体的参数会替代掉 echo file; mkdir file 里面的两个 file</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>-i</code> 参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#用 &#123;&#125; 代替 传递的数据</span><br><span class="line">#EXAMPLES-1：</span><br><span class="line">[root@localhost lisir]# ls | egrep &apos;6|7|8|9&apos; | xargs -t -i mv &#123;&#125; &#123;&#125;.bak</span><br><span class="line">mv 6 6.bak </span><br><span class="line">mv 7 7.bak </span><br><span class="line">mv 8 8.bak </span><br><span class="line">mv 9 9.bak </span><br><span class="line">mv 9 9 9 9.bak</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>--max-procs</code> 参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#xargs 默认只用一个进程执行命令。如果命令要执行多次，必须等上一次执行完，才能执行下一次。--max-procs 参数指定同时用多少个进程并行执行命令。--max-procs 2 表示同时最多使用两个进程，--max-procs 0 表示不限制进程数</span><br><span class="line">#EXAMPLES-1：</span><br><span class="line">[root@elk ~]# pgrep zabbix | xargs -n 1 --max-procs 0 kill</span><br><span class="line">#上面命令表示，同时关闭所有zabbix进程，运行速度会快很多</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>mysqldumpslow 慢查询分析工具使用手册</title>
    <url>/2019/07/19/mysqldumpslow%20%E6%85%A2%E6%9F%A5%E8%AF%A2%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h1 id="mysqldumpslow-慢查询分析工具使用手册"><a href="#mysqldumpslow-慢查询分析工具使用手册" class="headerlink" title="mysqldumpslow 慢查询分析工具使用手册"></a>mysqldumpslow 慢查询分析工具使用手册</h1><h2 id="1、工具安装"><a href="#1、工具安装" class="headerlink" title="1、工具安装"></a>1、工具安装</h2><blockquote>
<p>mysqldumpslow工具，在mysql的bin目录下</p>
</blockquote>
<h2 id="2、基本参数"><a href="#2、基本参数" class="headerlink" title="2、基本参数"></a>2、基本参数</h2><ul>
<li><code>-a</code> 说明不合并类似的SQL语句，显示具体的SQL语句中的数字和字符串</li>
<li><p><code>-s</code> 表示按照何种方式排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c 访问次数</span><br><span class="line">l 锁定时间</span><br><span class="line">r 返回记录</span><br><span class="line">t 查询时间</span><br><span class="line">al 平均锁定时间</span><br><span class="line">ar 平均返回记录数</span><br><span class="line">at  平均查询时间</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>-t</code> 返回前面多少条数据</p>
</li>
<li><code>-g</code> 后边搭配一个正则匹配模式，大小写不敏感</li>
</ul>
<h2 id="3、常用命令"><a href="#3、常用命令" class="headerlink" title="3、常用命令"></a>3、常用命令</h2><ul>
<li><p>得到查询时间最多的前300条SQL，可以通过&gt;/tmp/0513-0516-3306_slow_analysis.log  把分析的结果打印到文件中去，方便后续分析</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./mysqldumpslow -a -s t -t 300 &gt;/tmp/0513-0516-3306_slow_analysis.log /usr/local/mysql/20220516_slow.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>得到返回记录集最多的10个查询。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldumpslow -a -s r -t 10 /mysql/slow-log.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>得到按照查询时间排序的前10条里面，含有左连接的查询语句。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysqldumpslow -a -s t -t 10 -g “left join” /mysql/slow-log.txt</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="4、结果分析"><a href="#4、结果分析" class="headerlink" title="4、结果分析"></a>4、结果分析</h2><ul>
<li><p>执行结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Count: 1  Time=1999.42s (1999s)  Lock=0.06s (0s)  Rows=1645853.0 (1645853), fatradeusr[fatradeusr]@[100.64.57.247]</span><br><span class="line">  SELECT</span><br><span class="line">  uid,</span><br><span class="line">  orderNum,</span><br><span class="line">  requestId,</span><br><span class="line">  requestMSg,</span><br><span class="line">  responseMsg,</span><br><span class="line">  success,</span><br><span class="line">  retmsg,</span><br><span class="line">  addtime,</span><br><span class="line">  querytime,</span><br><span class="line">  queryReq,</span><br><span class="line">  queryResp</span><br><span class="line">  FROM ysbehalfpaysendmsg</span><br><span class="line">  WHERE addtime BETWEEN DATE_FORMAT(&apos;2022-05-15&apos;,&apos;%Y-%m-%d 00:00:00&apos;) AND DATE_FORMAT(&apos;2022-05-15&apos;,&apos;%Y-%m-%d 23:59:59&apos;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>参数解释：</p>
<ul>
<li><code>Count</code>会告诉我们这种类型的语句执行了几次</li>
<li><code>Time</code>会告诉我们这种类型的语句执行的最大时间</li>
<li><code>Time=2.79s (5s)</code>中<code>（5s）</code>是指这类型的语句执行总共花费的时间<br>主要功能是, 统计不同慢sql的出现次数(<code>Count</code>),执行最长时间(<code>Time</code>),累计总耗费时间(<code>Time</code>),等待锁的时间(<code>Lock</code>),发送给客户端的行总数(<code>Rows</code>),扫描的行总数(<code>Rows</code>)</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>vim编辑器使用详解</title>
    <url>/2019/05/18/vim%E7%BC%96%E8%BE%91%E5%99%A8%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="vim编辑器使用详解"><a href="#vim编辑器使用详解" class="headerlink" title="vim编辑器使用详解"></a>vim编辑器使用详解</h1><h2 id="1、VIM简介"><a href="#1、VIM简介" class="headerlink" title="1、VIM简介"></a>1、VIM简介</h2><ul>
<li>Vim是一个类似于Vi的著名的功能强大、高度可定制的文本编辑器，在Vi的基础上改进和增加了很多特性。VIM是纯粹的自由软件。Vim普遍被推崇为类Vi编辑器中最好的一个，事实上真正的劲敌来自Emacs的不同变体。1999年Emacs被选为Linuxworld文本编辑分类的优胜者，Vim屈居第二。但在2000年2月Vim赢得了SlashdotBeanie的最佳开放源代码文本编辑器大奖，又将Emacs推至二线，总的来看，Vim和Emacs同样都是非常优秀的文本编辑器。全屏幕的编辑器：VIM，又称，visual interface，是一款文本编辑器，vi, vi iMproved</li>
</ul>
<h2 id="2、打开文件"><a href="#2、打开文件" class="headerlink" title="2、打开文件"></a>2、打开文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim [options] [file ..]</span><br><span class="line"># vim</span><br><span class="line"># vim /PATH/TO/SOMEFILE    </span><br><span class="line">  +#：#为行号；</span><br><span class="line">  +：快速定位至最后一行</span><br><span class="line">  +/PATTERN：快速匹配到文档</span><br></pre></td></tr></table></figure>
<h2 id="3、VIM模式"><a href="#3、VIM模式" class="headerlink" title="3、VIM模式"></a>3、VIM模式</h2><blockquote>
<p>提示：默认为 编辑模式</p>
</blockquote>
<ul>
<li>模式间转换</li>
<li>编辑模式–&gt;输入模式：<br>  <code>i</code>：insert, 在当前光标所在处，转换为输入模式<br>  <code>I</code>：在当前光标所在行行首，转换为输入模式<br>  <code>a</code>: append, 在当前光标所在处字符后方，转换为输入模式<br>  <code>A</code>：在当前光标所在行行尾，转换为输入模式<br>  <code>o</code>: 在当前光标所在行的下方新建一个空白行，并转换为输入模式<br>  <code>O</code>：在当前光标所在行的上方新建一个空白行，并转换为输入模式</li>
<li>输入模式–&gt;编辑模式：<br>  <code>ESC</code></li>
<li>编辑模式–&gt;末行模式：<br>  <code>:</code></li>
<li>末行模式–&gt;编辑模式：<br>  <code>ESC</code></li>
</ul>
<h2 id="4、关闭VIM"><a href="#4、关闭VIM" class="headerlink" title="4、关闭VIM"></a>4、关闭VIM</h2><ul>
<li><p>末行模式：<br><code>:q!</code> 强制退出，不保存编辑的内容退出；<br><code>:wq</code> 保存退出<br><code>:x</code> 保存退出<br><code>:wq!</code>, <code>:x!</code> 强制保存退出</p>
</li>
<li><p>编辑模式：<br><code>ZZ</code>：保存退出</p>
</li>
</ul>
<h2 id="5、编辑命令"><a href="#5、编辑命令" class="headerlink" title="5、编辑命令"></a>5、编辑命令</h2><h3 id="5-1、光标跳转"><a href="#5-1、光标跳转" class="headerlink" title="5.1、光标跳转"></a>5.1、光标跳转</h3><ul>
<li><p>字符间移动：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#&#123;h|j|k|l&#125;：一次移动#个字符间距</span><br><span class="line"> 	k</span><br><span class="line">h&lt;-- --&gt;l</span><br><span class="line"> 	j</span><br><span class="line"></span><br><span class="line">#&#123;w|e|b&#125;：</span><br><span class="line">单词间移动：</span><br><span class="line">w：下一个单词的词首</span><br><span class="line">e：当前或下一个单词的词尾</span><br><span class="line">b：当前或前一个单词的词首</span><br><span class="line"></span><br><span class="line">行首行尾间跳转：</span><br><span class="line">0: 跳转至绝对行首</span><br><span class="line">^: 行首的第一个非空白字符</span><br><span class="line">$: 跳转至绝对行尾</span><br><span class="line"></span><br><span class="line">#句子间跳转：</span><br><span class="line">)</span><br><span class="line">(</span><br><span class="line"></span><br><span class="line">#段落间跳转：</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">#行间快速移动：</span><br><span class="line">#G:</span><br><span class="line">	#: 目标行编号</span><br><span class="line">G: 文尾</span><br><span class="line">1G：文首</span><br></pre></td></tr></table></figure>
</li>
<li><p>末行模式：<br>  <code>:#</code>  跳转至第#行</p>
</li>
</ul>
<h3 id="5-2、编辑操作"><a href="#5-2、编辑操作" class="headerlink" title="5.2、编辑操作"></a>5.2、编辑操作</h3><ul>
<li><p>x：删除光标所在处的字符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#x: 删除光标所在处及向后的共#个字符</span><br></pre></td></tr></table></figure>
</li>
<li><p>r: replace，替换光标所在处的字符</p>
</li>
<li><p>d: 删除命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dd: 删除光标所在行</span><br><span class="line">#dd: 删除光村所在行及下行的共#行；</span><br><span class="line">与跳转命令一同使用：</span><br><span class="line">	d$: 删除光标所在处至行尾的内容；同D命令</span><br><span class="line">	d^: 删除光标所在处至行首的内容；</span><br><span class="line"></span><br><span class="line">	dw</span><br><span class="line">	db</span><br><span class="line">	de</span><br><span class="line">		上述三个命令支持前面使用#来指明涵盖的单词的个数；</span><br><span class="line"> #COMMAND：#代表数字</span><br></pre></td></tr></table></figure>
</li>
<li><p>p: 粘贴，put, paste</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">行级别：</span><br><span class="line">	p: 粘贴在光标所在当前行下方</span><br><span class="line">	P: 粘贴在光标所在当前行上方</span><br><span class="line">小于行级别：</span><br><span class="line">	p: 粘贴在光村所在处的后方</span><br><span class="line">	p: 粘贴在光村所在处的前方</span><br></pre></td></tr></table></figure>
</li>
<li><p>y: yank，复制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yy: 复制光标所在行，相当于Y命令</span><br><span class="line">#yy: 复制光标所在行及下行的共#行；</span><br><span class="line">与跳转命令一同使用：</span><br><span class="line">	y$: 复制光标所在处至行尾的内容；</span><br><span class="line">	y^: 复制光标所在处至行首的内容；</span><br><span class="line"></span><br><span class="line">	yw</span><br><span class="line">	yb</span><br><span class="line">	ye</span><br><span class="line">		上述三个命令支持前面使用#来指明涵盖的单词的个数；</span><br><span class="line">#COMMAND：5yy（复制5行）</span><br></pre></td></tr></table></figure>
</li>
<li><p>c: change, 修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cc: 删除光标所在行整行内容，并立即转为输入模式</span><br><span class="line">#cc:</span><br><span class="line"></span><br><span class="line">c$, C：</span><br><span class="line">c^, c0</span><br><span class="line">cw, cb, ce</span><br><span class="line">#COMMAND：5cc（删除光标以下5行，并开启输入模式）</span><br></pre></td></tr></table></figure>
</li>
<li><p>撤消操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">u: undo</span><br><span class="line">	#u: 一次撤消最近的共#次编辑操作；</span><br><span class="line"></span><br><span class="line">撤消此前的撤消操作：</span><br><span class="line">	Ctrl+r</span><br><span class="line"></span><br><span class="line">重复前一条命令：</span><br><span class="line">	.</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="6、VIM内建教程"><a href="#6、VIM内建教程" class="headerlink" title="6、VIM内建教程"></a>6、VIM内建教程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vimtutor</span><br></pre></td></tr></table></figure>
<h2 id="7、VIM可视化模式"><a href="#7、VIM可视化模式" class="headerlink" title="7、VIM可视化模式"></a>7、VIM可视化模式</h2><p><code>v</code>: 字符可视化，选择光标所在行的光标左侧的内容<br><code>V</code>：行可视化，光标所在行整行都会被选定<br><code>ctrl+v</code>：进入的块可视化模式，可以选择一个矩形内的文本<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#进入可视化模式后常用操作指令：</span><br><span class="line">d：删除选中文本</span><br><span class="line">c：修改选中文本，删除选中的文本，然后输入想要的内容</span><br><span class="line">r：替换选中文本，将选中的文本替换成单个字符</span><br><span class="line">I：在选中文本前插入</span><br><span class="line">A：在选中文本后插入</span><br><span class="line">gu：选中区域转为小写</span><br><span class="line">gU：选中区域转为大写</span><br><span class="line">g~：大小写互调</span><br><span class="line">&gt;：向右缩进一个单位</span><br><span class="line">&lt;：向左缩进一个单位</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：注意：操作完成之后，‘esc’结束操作或退出可视化</p>
</blockquote>
<ul>
<li>三种模式之间可以输入相关命令切换，例如：<br>v(进入字符可视化) — v或esc(退出)<br>v(进入字符可视化) — V（进入行可视化）</li>
</ul>
<h2 id="8、编辑模式下的翻屏命令"><a href="#8、编辑模式下的翻屏命令" class="headerlink" title="8、编辑模式下的翻屏命令"></a>8、编辑模式下的翻屏命令</h2><p><code>Ctrl+f</code>: 向文件尾部翻一屏<br><code>Ctrl+b</code>：向文件首部翻一屏<br><code>Ctrl+d</code>: 向文件尾部翻半屏<br><code>Ctrl+u</code>: 向文件首部翻半屏</p>
<h2 id="9、文本查找"><a href="#9、文本查找" class="headerlink" title="9、文本查找"></a>9、文本查找</h2><p><code>/PATTERN</code>：向尾部进行<br><code>?PATTERN</code>：向首部进行</p>
<p><code>n</code>: 与命令同方向<br><code>N</code>：与命令反方向 </p>
<h2 id="10、文本替换"><a href="#10、文本替换" class="headerlink" title="10、文本替换"></a>10、文本替换</h2><h3 id="10-1、末行模式：内置命令行接口，有命令历史记录功能"><a href="#10-1、末行模式：内置命令行接口，有命令历史记录功能" class="headerlink" title="10.1、末行模式：内置命令行接口，有命令历史记录功能"></a>10.1、末行模式：内置命令行接口，有命令历史记录功能</h3><ul>
<li>有部分内置命令用于编辑操作，此时可使用地址定界法进行<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#地址定界：</span><br><span class="line">	startline[,endline]:</span><br><span class="line">		#: 第#行</span><br><span class="line">		.: 当前行</span><br><span class="line">		$: 最后一行</span><br><span class="line">		%: 全文</span><br><span class="line"></span><br><span class="line">		#相对定界：</span><br><span class="line">			+#: 从指定位置向下#个行</span><br><span class="line">			-#：从指定位置向上#个行</span><br><span class="line">			</span><br><span class="line">        /pat1/：第一次被此模式所匹配到的行；</span><br><span class="line">        #,/pat1/</span><br><span class="line">        /pat1/,/pat2/</span><br><span class="line">        </span><br><span class="line">        #后可跟编辑命令：</span><br><span class="line">            d, y</span><br><span class="line">            w, r</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="10-2、文本替换命令：s"><a href="#10-2、文本替换命令：s" class="headerlink" title="10.2、文本替换命令：s"></a>10.2、文本替换命令：s</h3><ul>
<li>s/要查找的内容/要替换为的内容/修饰符<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/: 分隔符，用于分隔“查找的内容”和“替换为的内容”；此分隔符可使用其它字符，如@，#等；</span><br><span class="line"></span><br><span class="line">要查找的内容：可使用正则表达式；此部分可以后面“替换为的内容”部分中使用“&amp;”全部引用；</span><br><span class="line"></span><br><span class="line">替换为的内容：不可使用正则表达式，一般为正常文本，但可以使用正则表达式中的\1, \2, ...保存的内容；</span><br><span class="line"></span><br><span class="line">修饰符：</span><br><span class="line">	i: 查找时不区分字符大小写</span><br><span class="line">	g: global，全局替换；</span><br><span class="line">	</span><br><span class="line">注意：引用</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="11、文本读取"><a href="#11、文本读取" class="headerlink" title="11、文本读取"></a>11、文本读取</h2><ul>
<li>在vi中执行命令和导入文件</li>
</ul>
<blockquote>
<p>提示：在末行模式下</p>
</blockquote>
<p>导入文件：  <code>:r FILENAME</code><br>执行命令：  <code>:！COMMAND</code><br>导入执行命令的结果：   <code>:r!COMMAND</code></p>
<h2 id="11、多文件模式"><a href="#11、多文件模式" class="headerlink" title="11、多文件模式"></a>11、多文件模式</h2><ul>
<li><p>打开文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim [OPTION]... [FILE]...</span><br><span class="line">	+#: 快速定位至第#行；</span><br><span class="line">	+/PATTERN: 快速定位至被模式第一次匹配至行；</span><br></pre></td></tr></table></figure>
</li>
<li><p>多文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim FILE1 FILE2 FILE3 ...</span><br><span class="line"></span><br><span class="line">#末行模式：</span><br><span class="line">	:next 下一个</span><br><span class="line">	:prev 前一个</span><br><span class="line">	:first  第一个</span><br><span class="line">	:last   最后一个</span><br><span class="line"></span><br><span class="line">#退出所有文件</span><br><span class="line">	:wqall</span><br><span class="line">	:wall</span><br><span class="line">	:qall</span><br><span class="line"></span><br><span class="line">#多窗口：</span><br><span class="line">    -o: 水平分隔窗口</span><br><span class="line">    -O: 垂直分隔窗口</span><br><span class="line"></span><br><span class="line">#Ctrl+w, ARROW</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>注意：单个文件也可以分隔为多个窗口进行查看<br>Ctrl+w, s: 水平分隔<br>Ctrl+w, v: 垂直分隔</p>
</blockquote>
<h2 id="12、VIM界面显示特性"><a href="#12、VIM界面显示特性" class="headerlink" title="12、VIM界面显示特性"></a>12、VIM界面显示特性</h2><ul>
<li><p>开户或关闭行号显示<br>:set number, <code>:set nu</code><br>:set nonumber, <code>:set nonu</code></p>
</li>
<li><p>语法高亮的开启和关闭<br><code>:syntax on</code><br><code>:syntax off</code></p>
</li>
<li><p>搜索高亮的开启和关闭<br><code>:set hlsearch</code><br><code>:set nohlsearch</code></p>
</li>
<li><p>自动缩进的开启和关闭<br>:set autoindent, <code>:set ai</code><br>:set noautoindent, <code>:set noai</code></p>
</li>
<li><p>区分字符大小写的开启和关闭<br>:set ignorecase, <code>:set ic</code><br>:set noignorecase, <code>:set noic</code></p>
</li>
<li><p>高亮显示匹配的符号对儿：<br>:set showmatch, <code>:set sm</code><br>:set noshowmatch, <code>:set nosm</code></p>
</li>
</ul>
<h2 id="13、vim的配置文件"><a href="#13、vim的配置文件" class="headerlink" title="13、vim的配置文件"></a>13、vim的配置文件</h2><ul>
<li>全局配置：<code>/etc/vimrc</code></li>
<li>指定用户配置: <code>~/.vimrc</code></li>
</ul>
<h2 id="14、练习"><a href="#14、练习" class="headerlink" title="14、练习"></a>14、练习</h2><ul>
<li><p>复制/etc/rc.d/rc.sysinit文件至/tmp目录，将/tmp/rc.sysinit文件中的以至少一个空白字符开头的行的行首加#；<br>答：<code>:%s@^[[:space:]]@#&amp;@</code></p>
</li>
<li><p>复制/boot/grub/grub.conf至/tmp目录中，删除/tmp/grub.conf文件中的行首的空白字符；<br>答：<code>:%s@^[[:space:]]\{1,\}@@</code></p>
</li>
<li><p>删除/tmp/rc.sysinit文件中的以#开头，且后面跟了至少一个空白字符的行行的#和空白字符<br>答：<code>:%s@^#[[:space:]]\+@@</code></p>
</li>
<li><p>为/tmp/grub.conf文件中前三行的行首加#号；<br>答：<code>:1,3s@^@#@</code></p>
</li>
<li><p>将/etc/yum.repos.d/CentOS-Media.repo文件中所有的enabled=0或gpgcheck=0的最后的0修改为1；<br>答：<code>:%s@\(gpgcheck\|enabled\)=0@\1=1@</code></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux基础</category>
      </categories>
      <tags>
        <tag>Linux基础</tag>
      </tags>
  </entry>
  <entry>
    <title>云原生存储系统Longhorn的部署与基本使用</title>
    <url>/2021/03/23/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9FLonghorn%E7%9A%84%E9%83%A8%E7%BD%B2%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="云原生存储系统Longhorn的部署与基本使用"><a href="#云原生存储系统Longhorn的部署与基本使用" class="headerlink" title="云原生存储系统Longhorn的部署与基本使用"></a>云原生存储系统Longhorn的部署与基本使用</h1><h2 id="1、Longhorn基本介绍"><a href="#1、Longhorn基本介绍" class="headerlink" title="1、Longhorn基本介绍"></a>1、Longhorn基本介绍</h2><ul>
<li>Longhorn是用于Kubernetes的轻量级，可靠且易于使用的分布式块存储系统；</li>
<li>Longhorn轻巧，可靠且功能强大。您可以使用一个kubectl； apply命令或使用Helm图表在现有Kubernetes集群上安装Longhorn 。一旦安装Longhorn，它将为Kubernetes集群添加持久的卷支持。</li>
<li>Longhorn使用容器和微服务实现分布式块存储。Longhorn为每个块设备卷创建一个专用的存储控制器，并跨多个节点上存储的多个副本同步复制该卷。存储控制器和副本本身使用Kubernetes进行编排。以下是Longhorn的一些显着功能：<ul>
<li style="list-style: none"><input type="checkbox" checked> 企业级分布式存储，无单点故障:</li>
<li style="list-style: none"><input type="checkbox" checked> 块存储的增量快照;</li>
<li style="list-style: none"><input type="checkbox" checked> 备份到基于有效更改块检测的辅助存储（与NFSv4或S3兼容的对象存储）;</li>
<li style="list-style: none"><input type="checkbox" checked> 定期快照和备份;</li>
<li style="list-style: none"><input type="checkbox" checked> 自动化无中断升级。您可以升级整个Longhorn软件堆栈，而无需中断运行卷！;</li>
<li style="list-style: none"><input type="checkbox" checked> 直观的GUI仪表板;</li>
</ul>
</li>
</ul>
<h3 id="1-1、Longhorn架构"><a href="#1-1、Longhorn架构" class="headerlink" title="1.1、Longhorn架构"></a>1.1、Longhorn架构</h3><blockquote>
<p>Longhorn设计有两层：数据层和控制层。Longhorn Engine是与数据平面相对应的存储控制器，而Longhorn Manager与控制平面相对应；</p>
</blockquote>
<ul>
<li>在下图中：<ul>
<li>有Longhorn卷的三个实例；</li>
<li>每个卷都有一个专用的控制器，称为Longhorn Engine，并作为Linux进程运行；</li>
<li>每个Longhorn卷都有两个副本，每个副本都是Linux进程；</li>
<li>图中的箭头表示卷，控制器实例，副本实例和磁盘之间的读/写数据流；</li>
<li>通过为每个卷创建一个单独的Longhorn Engine，如果一个控制器发生故障，则其他卷的功能不会受到影响；</li>
</ul>
</li>
</ul>
<p><img src="http://static.zybuluo.com/a807257775/qpva62ql8prnn7sfmhpnp4ea/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210322171215.png" alt="微信图片_20210322171215.png-58.5kB"></p>
<h2 id="2、Longhorn的安装与部署"><a href="#2、Longhorn的安装与部署" class="headerlink" title="2、Longhorn的安装与部署"></a>2、Longhorn的安装与部署</h2><blockquote>
<p>提示：yaml文件中，已经根据实际生产情况做了优化调整（请参考最佳实践），并添加了NFS备份存储服务器，卷数据的备份将统一使用NFS进行管理和存储；<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@DEVOPSSRV01 ~]# kubectl apply /k8s_yml/longhorn_deployment/longhorn-v1.1.0.yaml</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="3、创建volume"><a href="#3、创建volume" class="headerlink" title="3、创建volume"></a>3、创建volume</h2><blockquote>
<p>Longhorn可创建的卷类型大致分为<code>Block Volume</code>、<code>CSI Persistent Volume</code>、<code>静态PVC</code>、<code>动态PVC</code>；</p>
</blockquote>
<h3 id="3-1、创建静态PVC逻辑卷"><a href="#3-1、创建静态PVC逻辑卷" class="headerlink" title="3.1、创建静态PVC逻辑卷"></a>3.1、创建静态PVC逻辑卷</h3><blockquote>
<p>静态PVC：顾名思义需要编写PVC.yaml，通过手工指定PVC的metadata_name，申请PV资源，才可以挂载到对应的namespace下供pod使用；</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#创建PVC资源，向longhorn申请PV存储卷</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: longhorn-volv-pvc</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  storageClassName: longhorn</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 2Gi</span><br><span class="line">---</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Pod</span><br><span class="line">metadata:</span><br><span class="line">  name: volume-test</span><br><span class="line">  namespace: default</span><br><span class="line">spec:</span><br><span class="line">  restartPolicy: Always</span><br><span class="line">  containers:</span><br><span class="line">  - name: volume-test</span><br><span class="line">    image: nginx:stable-alpine</span><br><span class="line">    imagePullPolicy: IfNotPresent</span><br><span class="line">    livenessProbe:</span><br><span class="line">      exec:</span><br><span class="line">        command:</span><br><span class="line">          - ls</span><br><span class="line">          - /data/lost+found</span><br><span class="line">      initialDelaySeconds: 5</span><br><span class="line">      periodSeconds: 5</span><br><span class="line">    volumeMounts:</span><br><span class="line">    - name: volv</span><br><span class="line">      mountPath: /data</span><br><span class="line">    ports:</span><br><span class="line">    - containerPort: 80</span><br><span class="line">#挂载卷组，指定pvc名称</span><br><span class="line">  volumes:</span><br><span class="line">  - name: volv</span><br><span class="line">    persistentVolumeClaim:</span><br><span class="line">      claimName: longhorn-volv-pvc</span><br></pre></td></tr></table></figure>
<h3 id="3-2、创建动态PVC逻辑卷"><a href="#3-2、创建动态PVC逻辑卷" class="headerlink" title="3.2、创建动态PVC逻辑卷"></a>3.2、创建动态PVC逻辑卷</h3><blockquote>
<p>动态PVC：使用动态PVC供应逻辑卷，用户必须预先创建一个或多个 StorageClass 对象，在有状态的POD控制器（StatefulSet）下，使用动态PVC，指定容量大小、存储类名等简单的参数后，即可实现按需创建存储的机制，一般用在独立POD，且独立数据卷的场景下；<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx</span><br><span class="line">  labels:</span><br><span class="line">    app: nginx</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 80</span><br><span class="line">    name: web</span><br><span class="line">  selector:</span><br><span class="line">    app: nginx</span><br><span class="line">  type: NodePort</span><br><span class="line">---</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: StatefulSet</span><br><span class="line">metadata:</span><br><span class="line">  name: web</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx # has to match .spec.template.metadata.labels</span><br><span class="line">  serviceName: &quot;nginx&quot;</span><br><span class="line">  replicas: 2 # by default is 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        app: nginx # has to match .spec.selector.matchLabels</span><br><span class="line">    spec:</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">      terminationGracePeriodSeconds: 10</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx</span><br><span class="line">        image: k8s.gcr.io/nginx-slim:0.8</span><br><span class="line">        livenessProbe:</span><br><span class="line">          exec:</span><br><span class="line">            command:</span><br><span class="line">              - ls</span><br><span class="line">              - /usr/share/nginx/html/lost+found</span><br><span class="line">          initialDelaySeconds: 5</span><br><span class="line">          periodSeconds: 5</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80</span><br><span class="line">          name: web</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: www</span><br><span class="line">          mountPath: /usr/share/nginx/html</span><br><span class="line">#动态PVC配置模板</span><br><span class="line">  volumeClaimTemplates:</span><br><span class="line">  - metadata:</span><br><span class="line">      name: www</span><br><span class="line">    spec:</span><br><span class="line">      #访问模式，如使用longhorn支持多路读写“ReadWriteMany”</span><br><span class="line">      accessModes: [ &quot;ReadWriteOnce&quot; ]</span><br><span class="line">      #存储类名，默认安装为longhorn，官方建议不要修改此名称</span><br><span class="line">      storageClassName: &quot;longhorn&quot;</span><br><span class="line">      resources:</span><br><span class="line">      #可限定容量大小，IOPS等参数</span><br><span class="line">        requests:</span><br><span class="line">          storage: 1Gi</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="3-2、创建Block块设备"><a href="#3-2、创建Block块设备" class="headerlink" title="3.2、创建Block块设备"></a>3.2、创建Block块设备</h3><blockquote>
<p>提示：块设备类似于一块硬盘，可以想象为虚拟机或云服务器中新增一块磁盘，那么就要经历分区、格式化、挂载等一系列操作，容器内使用，建议还是采用卷的方式，由于格式化需要超级权限，若不想设定容器为特权模式，就需要sidecar及init容器来支持使用；<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: longhorn-block-vol</span><br><span class="line">  namespace: centos-deployment</span><br><span class="line">spec:</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteOnce</span><br><span class="line">  volumeMode: Block</span><br><span class="line">  storageClassName: longhorn</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 10Gi</span><br><span class="line">---      </span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line"> name: centos2009</span><br><span class="line"> namespace: centos-deployment</span><br><span class="line">spec:</span><br><span class="line"> selector:</span><br><span class="line">  matchLabels:</span><br><span class="line">   app: os</span><br><span class="line"> replicas: 1</span><br><span class="line"> template:</span><br><span class="line">  metadata:</span><br><span class="line">   labels:</span><br><span class="line">    app: os</span><br><span class="line">  spec:</span><br><span class="line">    containers:</span><br><span class="line">    - name: centos2009-deployment</span><br><span class="line">      image: 192.168.6.10/szzt_production/centos:centos7.9.2009</span><br><span class="line">      command: [ &quot;/bin/bash&quot;, &quot;-c&quot;, &quot;--&quot; ]</span><br><span class="line">      args: [ &quot;while true; do sleep 30; done;&quot; ]</span><br><span class="line">      securityContext:</span><br><span class="line">        privileged: true</span><br><span class="line">        runAsUser: 0</span><br><span class="line">      env:</span><br><span class="line">      - name: TZ</span><br><span class="line">        value: Asia/Shanghai    </span><br><span class="line">      volumeDevices:</span><br><span class="line">      - devicePath: /dev/longhorn/testblk</span><br><span class="line">        name: block-vol</span><br><span class="line">    volumes:</span><br><span class="line">    - name: block-vol</span><br><span class="line">      persistentVolumeClaim:</span><br><span class="line">       claimName: longhorn-block-vol</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="3-3、使用块设备及存储卷"><a href="#3-3、使用块设备及存储卷" class="headerlink" title="3.3、使用块设备及存储卷"></a>3.3、使用块设备及存储卷</h3><ul>
<li>块设备与数据卷的区别如下图：数据卷采用ISCSI的存储协议进行网络通信，块设备则像一个本地磁盘一样挂载至服务器进行使用，<br><img src="http://static.zybuluo.com/a807257775/gu1g32uwt02kxe29t2f7yr3g/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20210323144214.jpg" alt="微信图片_20210323144214.jpg-26.6kB"></li>
</ul>
<h2 id="4、数据备份与恢复"><a href="#4、数据备份与恢复" class="headerlink" title="4、数据备份与恢复"></a>4、数据备份与恢复</h2><blockquote>
<p>提示：备份与恢复统一使用Longhron的UI进行</p>
</blockquote>
<ul>
<li><p>查看创建的volume<br><img src="http://static.zybuluo.com/a807257775/r9ed04ft5n3aqfhnp8kxqc5d/image_1f1euuia4jie8vhr8p1g511q9h56.png" alt="image_1f1euuia4jie8vhr8p1g511q9h56.png-126.5kB"></p>
</li>
<li><p>对卷：<code>pvc-064fc5f5-ba4c-4e50-b61a-dfe548e699a4</code>进行手工备份<br><img src="http://static.zybuluo.com/a807257775/gfiuwfpnmra8651p8plbe5an/image_1f1ev20kg5nh1rdp21r1r6010pg60.png" alt="image_1f1ev20kg5nh1rdp21r1r6010pg60.png-145.3kB"></p>
</li>
<li><p>选择Backup标签<br><img src="http://static.zybuluo.com/a807257775/557m8ofopvofmo7foj82ctwe/image_1f1ev38m917tdm3d1u63154a6ha6d.png" alt="image_1f1ev38m917tdm3d1u63154a6ha6d.png-80.4kB"></p>
</li>
<li><p>根据刚才备份的卷名，查看备份情况<br><img src="http://static.zybuluo.com/a807257775/kjmuwfzow0h8mwf63xdn42b0/image_1f1ev48n91k518pd195sejlico6q.png" alt="image_1f1ev48n91k518pd195sejlico6q.png-108.7kB"></p>
</li>
<li><p>模拟数据丢失<br><img src="http://static.zybuluo.com/a807257775/pnh74d78sgi723h8rbfqhs0c/image_1f1ev7pddub972u1eb1o8do877.png" alt="image_1f1ev7pddub972u1eb1o8do877.png-52.4kB"></p>
</li>
<li><p>通过Longhorn刚才的备份进行恢复<br><img src="http://static.zybuluo.com/a807257775/8ox0x89ye5slzydls1r72rf7/image_1f1ev9u3bq5opnq1vl81fnivgb7k.png" alt="image_1f1ev9u3bq5opnq1vl81fnivgb7k.png-115.1kB"></p>
</li>
<li><p>恢复到一个名为：skywalking-restore的PV卷中<br><img src="http://static.zybuluo.com/a807257775/w2rjzioaf108ruj2sl6x4f6k/image_1f1evb81vpis112m1gsbb12u3881.png" alt="image_1f1evb81vpis112m1gsbb12u3881.png-109.6kB"><br><img src="http://static.zybuluo.com/a807257775/vilb7nks6owiq00orfl1xt2m/image_1f1evc6fndkb1vac1t0msch1dbl8e.png" alt="image_1f1evc6fndkb1vac1t0msch1dbl8e.png-138.9kB"></p>
</li>
<li><p>创建PVC<br><img src="http://static.zybuluo.com/a807257775/nedirnvqhe88i6isb325v9ba/image_1f1evrh301fo013291e2or37dr798.png" alt="image_1f1evrh301fo013291e2or37dr798.png-153.7kB"><br><img src="http://static.zybuluo.com/a807257775/mmy8r46hf8xfmm9ey1nh4jyb/image_1f1evsmphpnq7ptdkbuih2hta2.png" alt="image_1f1evsmphpnq7ptdkbuih2hta2.png-151.3kB"></p>
</li>
<li><p>将PVC挂载至容器，恢复数据即可<br><img src="http://static.zybuluo.com/a807257775/60w08q5ew8d1zfvvf8sv9bqb/image_1f1evvic78421d5g4nv5a81mhaaf.png" alt="image_1f1evvic78421d5g4nv5a81mhaaf.png-38.4kB"><br><img src="http://static.zybuluo.com/a807257775/yj9pntbeprfxpfw20nayo3w3/image_1f1f02uvv1iv116p5hja1bl9lfsas.png" alt="image_1f1f02uvv1iv116p5hja1bl9lfsas.png-41.6kB"><br><img src="http://static.zybuluo.com/a807257775/djh7k7iv9fk2mhg7gmutbf8k/image_1f1f08sqv1km51dhkm2rbsejob9.png" alt="image_1f1f08sqv1km51dhkm2rbsejob9.png-59.1kB"></p>
</li>
</ul>
<h2 id="6、性能测试"><a href="#6、性能测试" class="headerlink" title="6、性能测试"></a>6、性能测试</h2><blockquote>
<p>使用fio磁盘性能测试工具：fio可以按照负载情况分成照顺序读写，随机读写两大类。FIO是一个可以产生很多线程或进程并执行用户指定的特定类型I/O操作的工具，FIO的典型用途是编写和模拟的I/O负载匹配的作业文件，EPEL源，使用yum install fio -y安装</p>
</blockquote>
<ul>
<li><p>测试随机写 IOPS，运行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fio -direct=1 -iodepth=128 -rw=randwrite -ioengine=libaio -bs=4k -size=512M -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=Rand_Write_Testing</span><br><span class="line">#结果</span><br><span class="line">write: IOPS=2006, BW=8027KiB/s (8219kB/s)(512MiB/65319msec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试随机读 IOPS，运行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fio -direct=1 -iodepth=128 -rw=randread -ioengine=libaio -bs=4k -size=512M  -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=Rand_Read_Testing</span><br><span class="line">#结果</span><br><span class="line">read: IOPS=8700, BW=33.0MiB/s (35.6MB/s)(512MiB/15065msec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试顺序写吞吐量，运行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fio -direct=1 -iodepth=64 -rw=write -ioengine=libaio -bs=1024k -size=512M  -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=Write_PPS_Testing</span><br><span class="line">#结果</span><br><span class="line">write: IOPS=36, BW=36.2MiB/s (38.0MB/s)(512MiB/14128msec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试顺序读吞吐量，运行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fio -direct=1 -iodepth=64 -rw=read -ioengine=libaio -bs=1024k -size=512M  -numjobs=1 -runtime=1000 -group_reporting -filename=iotest -name=Read_PPS_Testing</span><br><span class="line">#结果</span><br><span class="line">read: IOPS=82, BW=82.6MiB/s (86.6MB/s)(512MiB/6202msec)</span><br></pre></td></tr></table></figure>
</li>
<li><p>输出结果解读，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">read : io=1024.0MB, bw=80505KB/s, iops=20126, runt= 13025msec</span><br><span class="line">表示 fio 做了 512M  I/O，速率约为 80 MB/s，总 IOPS 为 20126，运行时间为 13 秒。</span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>总结：Longhorn的性能受整个K8S集群的影响，其服务是建立在K8S集群之上的，所以集群中如果CPU压力过大、内存不足、API调用超时等等因素都会影响存储性能，所以Longhorn中有一项参数：<code>Guaranteed Engine CPU</code>，给Longhorn Instance Manager Pod保留一定数量的CPU，这将有助于在高节点工作负载期间保持引擎稳定性。严格的测试应该在一个干净的K8S集群上进行测试，并尽量使用光纤或者万兆网络进行互连，发挥其最大化性能，评判一个磁盘性能除了读写速率外，一般要看IOPS这个指标，SSD的随机读写IOPS可达上万，普通的机械硬盘最多可能才几百，顺序读写的场景一般是单个大文件，而实际生产，我们大部分是零碎的小文件，这个时候就特别考验随机读写的性能，那么测试结果中IOPS的数值越大，代表其性能越佳，如果要投产使用，请参考官网的最佳实践！</p>
</blockquote>
<h2 id="7、其他"><a href="#7、其他" class="headerlink" title="7、其他"></a>7、其他</h2><ul>
<li>官方手册：<a href="https://longhorn.io/docs/1.1.0/" target="_blank" rel="noopener">Longhorn文档</a></li>
<li>GITHUB地址：<a href="https://github.com/longhorn/longhorn" target="_blank" rel="noopener">longhorn</a></li>
<li>最佳实践：<a href="https://longhorn.io/docs/1.1.0/best-practices/" target="_blank" rel="noopener">生产环境中部署Longhorn</a></li>
<li>基于K8S的安装模板：<a href="https://longhorn.io/docs/1.1.0/deploy/install/install-with-kubectl/" target="_blank" rel="noopener">Install With Kubectl</a></li>
<li>Longhorn配置参数详解：<a href="https://longhorn.io/docs/1.1.0/references/settingsn.io/docs/1.1.0/deploy/install/install-with-kubectl/" target="_blank" rel="noopener">Settings Reference</a></li>
<li>基本K8S的使用案列：<a href="https://longhorn.io/docs/1.1.0/references/examples/" target="_blank" rel="noopener">Examples</a></li>
<li>Longhorn备份与恢复手册：<a href="https://longhorn.io/docs/1.1.0/snapshots-and-backups/backup-and-restore/set-backup-target/" target="_blank" rel="noopener">Setting a Backup Target</a></li>
</ul>
]]></content>
      <categories>
        <category>分布式存储</category>
      </categories>
      <tags>
        <tag>分布式存储</tag>
      </tags>
  </entry>
  <entry>
    <title>企业级镜像仓库之Harbor部署手册</title>
    <url>/2021/02/26/%E4%BC%81%E4%B8%9A%E7%BA%A7%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93%E4%B9%8BHarbor%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h1 id="企业级镜像仓库之Harbor部署手册"><a href="#企业级镜像仓库之Harbor部署手册" class="headerlink" title="企业级镜像仓库之Harbor部署手册"></a>企业级镜像仓库之Harbor部署手册</h1><h2 id="1、harbor概述"><a href="#1、harbor概述" class="headerlink" title="1、harbor概述"></a>1、harbor概述</h2><ul>
<li>VMware开源的企业级Registry项目Harbor，以Docker公司开源的registry 为基础，提供了管理UI, 基于角色的访问控制(Role Based Access Control)，AD/LDAP集成、以及审计日志(Audit logging) 等企业用户需求的功能，同时还原生支持中文，主要特点：<ul>
<li>基于角色的访问控制 - 用户与 Docker 镜像仓库通过“项目”进行组织管理，一个用户可以对多个镜像仓库在同一命名空间（project）里有不同的权限。</li>
<li>镜像复制 - 镜像可以在多个 Registry 实例中复制（同步）。尤其适合于负载均衡，高可用，混合云和多云的场景。</li>
<li>图形化用户界面 - 用户可以通过浏览器来浏览，检索当前 Docker 镜像仓库，管理项目和命名空间。</li>
<li>AD/LDAP 支持 - Harbor 可以集成企业内部已有的 AD/LDAP，用于鉴权认证管理。</li>
<li>审计管理 - 所有针对镜像仓库的操作都可以被记录追溯，用于审计管理。</li>
<li>国际化 - 已拥有英文、中文、德文、日文和俄文的本地化版本。更多的语言将会添加进来。</li>
<li>RESTful API - RESTful API 提供给管理员对于 Harbor 更多的操控, 使得与其它管理软件集成变得更容易。</li>
<li>部署简单 - 提供在线和离线两种安装工具， 也可以安装到 vSphere 平台(OVA 方式)虚拟设备</li>
</ul>
</li>
</ul>
<h2 id="2、harbor架构介绍"><a href="#2、harbor架构介绍" class="headerlink" title="2、harbor架构介绍"></a>2、harbor架构介绍</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      Name                     Command                  State                 Ports          </span><br><span class="line">---------------------------------------------------------------------------------------------</span><br><span class="line">harbor-core         /harbor/entrypoint.sh            Up (healthy)                            </span><br><span class="line">harbor-db           /docker-entrypoint.sh            Up (healthy)                            </span><br><span class="line">harbor-jobservice   /harbor/entrypoint.sh            Up (healthy)                            </span><br><span class="line">harbor-log          /bin/sh -c /usr/local/bin/ ...   Up (healthy)   127.0.0.1:1514-&gt;10514/tcp</span><br><span class="line">harbor-portal       nginx -g daemon off;             Up (healthy)                            </span><br><span class="line">nginx               nginx -g daemon off;             Up (healthy)   0.0.0.0:80-&gt;8080/tcp     </span><br><span class="line">redis               redis-server /etc/redis.conf     Up (healthy)                            </span><br><span class="line">registry            /home/harbor/entrypoint.sh       Up (healthy)                            </span><br><span class="line">registryctl         /home/harbor/start.sh            Up (healthy)</span><br></pre></td></tr></table></figure>
<ul>
<li>Harbor的每一个组件都被包装成一个docker容器。自然，Harbor是通过docker compose来部署的。在Harbor源代码的make目录下的docker-compose模板会被用于部署Harbor。打开该模板文件，可以看到Harbor由7个容器组件所组成：<ul>
<li>proxy - 通过nginx服务器来做反向代理</li>
<li>registry - docker官方发布的一个仓库镜像组件</li>
<li>ui - 整个架构的核心服务。该容器是Harbor工程的主要部分</li>
<li>adminserver - 作为Harbor工程的配置数据管理器使用</li>
<li>mysql - 通过官方Mysql镜像创建的数据库容器</li>
<li>job services - 通过状态机的形式将镜像复制到远程Harbor实例。镜像删除同样也可以被同步到远程Harbor实例中。</li>
<li>log - 运行rsyslogd的容器，主要用于收集其他容器的日志<ul>
<li>这些容器之间都通过Docker内的DNS服务发现来连接通信。通过这种方式，每一个容器都可以通过相应的容器来进行访问。对于终端用户来说，只有反向代理(Nginx)服务的端口需要对外暴露。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="3、harbor套件部署"><a href="#3、harbor套件部署" class="headerlink" title="3、harbor套件部署"></a>3、harbor套件部署</h2><h3 id="3-1、安装docker-compose-Harbor是通过docker-compose来部署的"><a href="#3-1、安装docker-compose-Harbor是通过docker-compose来部署的" class="headerlink" title="3.1、安装docker-compose(Harbor是通过docker compose来部署的)"></a>3.1、安装docker-compose(Harbor是通过docker compose来部署的)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#下载docker-compose</span><br><span class="line">curl -L &quot;https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class="line">#赋予可执行权限</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">#构建软连接    </span><br><span class="line">ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line">#确认版本    </span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>
<h3 id="3-2、下载离线安装包"><a href="#3-2、下载离线安装包" class="headerlink" title="3.2、下载离线安装包"></a>3.2、下载离线安装包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#下载地址：https://github.com/goharbor/harbor/releases</span><br><span class="line">#下载全量offline离线安装包</span><br><span class="line">wget https://github.com/goharbor/harbor/releases/download/v2.1.3/harbor-offline-installer-v2.1.3.tgz</span><br><span class="line">#解压</span><br><span class="line">tar xf harbor-offline-installer-v2.0.1.tgz </span><br><span class="line">#切换至harbor安装文件目录</span><br><span class="line">cd harbor</span><br></pre></td></tr></table></figure>
<h3 id="3-3、修改harbor安装的配置文件"><a href="#3-3、修改harbor安装的配置文件" class="headerlink" title="3.3、修改harbor安装的配置文件"></a>3.3、修改harbor安装的配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#harbor主配置文件</span><br><span class="line">cp harbor.yml.tmpl  harbor.yml</span><br><span class="line">#用于存放harbor的持久化数据</span><br><span class="line">mkdir -pv /data/share/harbor_data/</span><br><span class="line">#修改harbor.yml主配置文件</span><br><span class="line">#需要写IP地址或者域名</span><br><span class="line">hostname: 192.168.6.10</span><br><span class="line">#http配置</span><br><span class="line">http:</span><br><span class="line">     port: 80</span><br><span class="line">#https配置需指定ssl证书，需要时开启         </span><br><span class="line">#https:</span><br><span class="line">#  # https port for harbor, default is 443</span><br><span class="line">#  port: 443</span><br><span class="line">#  # The path of cert and key files for nginx</span><br><span class="line">#  certificate: /your/certificate/path</span><br><span class="line">#  private_key: /your/private/key/path </span><br><span class="line">#harbor登录用户的密码，用户名：admin</span><br><span class="line">harbor_admin_password: qaz000123    </span><br><span class="line">#数据库配置</span><br><span class="line">database:</span><br><span class="line">  password: qaz000123</span><br><span class="line">  max_idle_conns: 50</span><br><span class="line">  max_open_conns: 1000</span><br><span class="line">#持久化存储数据目录</span><br><span class="line">data_volume: /data/share/harbor_data</span><br></pre></td></tr></table></figure>
<h2 id="4、安装并启动Harbor"><a href="#4、安装并启动Harbor" class="headerlink" title="4、安装并启动Harbor"></a>4、安装并启动Harbor</h2><h3 id="4-1、安装之前需要启动docker，然后执行安装脚本"><a href="#4-1、安装之前需要启动docker，然后执行安装脚本" class="headerlink" title="4.1、安装之前需要启动docker，然后执行安装脚本"></a>4.1、安装之前需要启动docker，然后执行安装脚本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./install.sh</span><br><span class="line">#注意：安装完成后harbor是通过docker-compose启动和管理的</span><br></pre></td></tr></table></figure>
<h3 id="4-2、安装完成后查看下正在运行的docker容器"><a href="#4-2、安装完成后查看下正在运行的docker容器" class="headerlink" title="4.2、安装完成后查看下正在运行的docker容器"></a>4.2、安装完成后查看下正在运行的docker容器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps | grep harbor</span><br></pre></td></tr></table></figure>
<h2 id="5、访问harbor-WEB界面"><a href="#5、访问harbor-WEB界面" class="headerlink" title="5、访问harbor WEB界面"></a>5、访问harbor WEB界面</h2><ul>
<li>访问地址<a href="http://10.255.4.33/" target="_blank" rel="noopener">http://10.255.4.33/</a><br><img src="http://static.zybuluo.com/a807257775/0k1zqs5ja6ehj7ceolr6go07/image_1eveljil5hh4crb1ctjvbtip69.png" alt="image_1eveljil5hh4crb1ctjvbtip69.png-82.1kB"></li>
<li>用项目管理镜像<br><img src="http://static.zybuluo.com/a807257775/p3cfmwdrhbtjdk7nlqb7pci0/image_1eveljsf78hs9odno08pcfobm.png" alt="image_1eveljsf78hs9odno08pcfobm.png-103.7kB"></li>
</ul>
<h2 id="6、Harbor的使用（上传下载镜像）"><a href="#6、Harbor的使用（上传下载镜像）" class="headerlink" title="6、Harbor的使用（上传下载镜像）"></a>6、Harbor的使用（上传下载镜像）</h2><h3 id="6-1、web页面新建szzt-production项目"><a href="#6-1、web页面新建szzt-production项目" class="headerlink" title="6.1、web页面新建szzt_production项目"></a>6.1、web页面新建szzt_production项目</h3><ul>
<li>目前已制作或上传自有镜像共计15个<br><img src="http://static.zybuluo.com/a807257775/jfc234yxr224cs9677lw2q7d/image_1evelll971nvslcp8ea7m71b6d13.png" alt="image_1evelll971nvslcp8ea7m71b6d13.png-163kB"></li>
</ul>
<h3 id="6-2、将本地容器commit后，然后push到私有仓库"><a href="#6-2、将本地容器commit后，然后push到私有仓库" class="headerlink" title="6.2、将本地容器commit后，然后push到私有仓库"></a>6.2、将本地容器commit后，然后push到私有仓库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker login 192.168.6.10</span><br><span class="line">docker commit f1944ac523f7 192.168.6.10/szzt_production/nacos-server:1.3.2</span><br><span class="line">docker push 192.168.6.10/szzt_production/nacos-server:1.3.2</span><br><span class="line"># docker tag xoa_all_production:v1 192.168.0.8/xoa_all_production/2020.06.01.1:v1</span><br><span class="line"># docker push 192.168.0.8/xoa_all_production/2020.06.01.1:v1</span><br></pre></td></tr></table></figure>
<h3 id="6-3、修改各个docker节点或k8s-node节点的仓库源"><a href="#6-3、修改各个docker节点或k8s-node节点的仓库源" class="headerlink" title="6.3、修改各个docker节点或k8s node节点的仓库源"></a>6.3、修改各个docker节点或k8s node节点的仓库源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat /etc/docker/daemon.json </span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://wpf59uhk.mirror.aliyuncs.com&quot;],</span><br><span class="line">  &quot;insecure-registries&quot;: [&quot;192.168.6.10&quot;]</span><br><span class="line">&#125;</span><br><span class="line">#重启docker</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>
<h3 id="6-4、拉取私有仓库镜像"><a href="#6-4、拉取私有仓库镜像" class="headerlink" title="6.4、拉取私有仓库镜像"></a>6.4、拉取私有仓库镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker pull 192.168.6.10/szzt_production/nacos-server:1.3.2</span><br></pre></td></tr></table></figure>
<h2 id="7、harbor的管理与启停"><a href="#7、harbor的管理与启停" class="headerlink" title="7、harbor的管理与启停"></a>7、harbor的管理与启停</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#切换到安装目录</span><br><span class="line">cd /soft/harbor_docker/</span><br><span class="line">#查看harbor运行情况</span><br><span class="line">docker-compose ps</span><br><span class="line">      Name                     Command                  State                 Ports          </span><br><span class="line">---------------------------------------------------------------------------------------------</span><br><span class="line">harbor-core         /harbor/entrypoint.sh            Up (healthy)                            </span><br><span class="line">harbor-db           /docker-entrypoint.sh            Up (healthy)                            </span><br><span class="line">harbor-jobservice   /harbor/entrypoint.sh            Up (healthy)                            </span><br><span class="line">harbor-log          /bin/sh -c /usr/local/bin/ ...   Up (healthy)   127.0.0.1:1514-&gt;10514/tcp</span><br><span class="line">harbor-portal       nginx -g daemon off;             Up (healthy)                            </span><br><span class="line">nginx               nginx -g daemon off;             Up (healthy)   0.0.0.0:80-&gt;8080/tcp     </span><br><span class="line">redis               redis-server /etc/redis.conf     Up (healthy)                            </span><br><span class="line">registry            /home/harbor/entrypoint.sh       Up (healthy)                            </span><br><span class="line">registryctl         /home/harbor/start.sh            Up (healthy) </span><br><span class="line">#启动harbor服务</span><br><span class="line">docker-compose up -d</span><br><span class="line">#关闭harbor服务</span><br><span class="line">docker-compose stop</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ELK文档</category>
      </categories>
      <tags>
        <tag>ELK文档</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Logstash的Elasticsearch数据迁移方案</title>
    <url>/2023/09/30/%E5%9F%BA%E4%BA%8ELogstash%E7%9A%84Elasticsearch%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h1 id="基于Logstash的Elasticsearch数据迁移方案"><a href="#基于Logstash的Elasticsearch数据迁移方案" class="headerlink" title="基于Logstash的Elasticsearch数据迁移方案"></a>基于Logstash的Elasticsearch数据迁移方案</h1><h2 id="1、背景信息"><a href="#1、背景信息" class="headerlink" title="1、背景信息"></a>1、背景信息</h2><p><img src="http://static.zybuluo.com/a807257775/tdnwf01w4miazv5useu3n13l/%E5%9F%BA%E4%BA%8ELogstash%E7%9A%84Elasticsearch%E6%95%B0%E6%8D%AE%E8%BF%81%E7%A7%BB%E6%96%B9%E6%A1%88.jpg" alt="基于Logstash的Elasticsearch数据迁移方案.jpg-100.2kB"></p>
<h2 id="2、数据迁移前置条件"><a href="#2、数据迁移前置条件" class="headerlink" title="2、数据迁移前置条件"></a>2、数据迁移前置条件</h2><p>基于logstash的增量方案，无法适用，因为增量的数据同步可能还得需要date的时间类型，但是目前趣街的关于时间的字段均是keyword类型，甚至可能有一些索引没有关于时间的字段。</p>
<ul>
<li>对内对客的所有索引新增时间戳字段</li>
<li>使用ES的应用程序均需要改造<ul>
<li>后续在创建新索引的时候，自动添加时间戳字段，现有的索引，我们运维通过API进行新增</li>
<li>doc文档发生变动后，需要同步维护时间戳字段，将其更新为当前时间，用于logstash数据采集</li>
</ul>
</li>
</ul>
<h2 id="3、环境与工具准备"><a href="#3、环境与工具准备" class="headerlink" title="3、环境与工具准备"></a>3、环境与工具准备</h2><h3 id="3-1、阿里侧环境与实例准备"><a href="#3-1、阿里侧环境与实例准备" class="headerlink" title="3.1、阿里侧环境与实例准备"></a>3.1、阿里侧环境与实例准备</h3><h3 id="3-2、自建侧环境与实例准备"><a href="#3-2、自建侧环境与实例准备" class="headerlink" title="3.2、自建侧环境与实例准备"></a>3.2、自建侧环境与实例准备</h3><h2 id="4、迁移索引元数据（设置和映射）"><a href="#4、迁移索引元数据（设置和映射）" class="headerlink" title="4、迁移索引元数据（设置和映射）"></a>4、迁移索引元数据（设置和映射）</h2><ul>
<li>在进行数据迁移时，Logstash会帮助您自动创建索引，但是自动创建的索引可能与您待迁移的索引存在差异，导致迁移前后数据的格式不一致。</li>
</ul>
<h3 id="4-1、创建indiceCreate-py迁移脚本"><a href="#4-1、创建indiceCreate-py迁移脚本" class="headerlink" title="4.1、创建indiceCreate.py迁移脚本"></a>4.1、创建indiceCreate.py迁移脚本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 分片数默认和源集群索引保持一致，可根据生产实际节点数修改数值。</span><br><span class="line">#number_of_shards = 6</span><br><span class="line">number_of_shards = settingsDict[index][&quot;settings&quot;][&quot;index&quot;][&quot;number_of_shards&quot;]</span><br><span class="line"></span><br><span class="line">## 副本数默认为0，可根据生产实际节点数修改数值。</span><br><span class="line">#number_of_replicas = 1</span><br><span class="line">number_of_replicas = DEFAULT_REPLICAS</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim indiceCreate.py</span><br><span class="line">#!/usr/bin/python</span><br><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line"># 文件名：indiceCreate.py</span><br><span class="line">import sys</span><br><span class="line">import base64</span><br><span class="line">import time</span><br><span class="line">import httplib</span><br><span class="line">import json</span><br><span class="line">## 源集群host。</span><br><span class="line">oldClusterHost = &quot;192.168.36.59:9200&quot;</span><br><span class="line">## 源集群用户名，可为空。</span><br><span class="line">oldClusterUserName = &quot;&quot;</span><br><span class="line">## 源集群密码，可为空。</span><br><span class="line">oldClusterPassword = &quot;&quot;</span><br><span class="line">## 目标集群host，可在阿里云Elasticsearch实例的基本信息页面获取。</span><br><span class="line">newClusterHost = &quot;10.60.2.31:9200&quot;</span><br><span class="line">## 目标集群用户名。</span><br><span class="line">newClusterUser = &quot;&quot;</span><br><span class="line">## 目标集群密码。</span><br><span class="line">newClusterPassword = &quot;&quot;</span><br><span class="line">DEFAULT_REPLICAS = 0</span><br><span class="line">def httpRequest(method, host, endpoint, params=&quot;&quot;, username=&quot;&quot;, password=&quot;&quot;):</span><br><span class="line">    conn = httplib.HTTPConnection(host)</span><br><span class="line">    headers = &#123;&#125;</span><br><span class="line">    if (username != &quot;&quot;) :</span><br><span class="line">        &apos;Hello &#123;name&#125;, your age is &#123;age&#125; !&apos;.format(name = &apos;Tom&apos;, age = &apos;20&apos;)</span><br><span class="line">        base64string = base64.encodestring(&apos;&#123;username&#125;:&#123;password&#125;&apos;.format(username = username, password = password)).replace(&apos;\n&apos;, &apos;&apos;)</span><br><span class="line">        headers[&quot;Authorization&quot;] = &quot;Basic %s&quot; % base64string;</span><br><span class="line">    if &quot;GET&quot; == method:</span><br><span class="line">        headers[&quot;Content-Type&quot;] = &quot;application/x-www-form-urlencoded&quot;</span><br><span class="line">        conn.request(method=method, url=endpoint, headers=headers)</span><br><span class="line">    else :</span><br><span class="line">        headers[&quot;Content-Type&quot;] = &quot;application/json&quot;</span><br><span class="line">        conn.request(method=method, url=endpoint, body=params, headers=headers)</span><br><span class="line">    response = conn.getresponse()</span><br><span class="line">    res = response.read()</span><br><span class="line">    return res</span><br><span class="line">def httpGet(host, endpoint, username=&quot;&quot;, password=&quot;&quot;):</span><br><span class="line">    return httpRequest(&quot;GET&quot;, host, endpoint, &quot;&quot;, username, password)</span><br><span class="line">def httpPost(host, endpoint, params, username=&quot;&quot;, password=&quot;&quot;):</span><br><span class="line">    return httpRequest(&quot;POST&quot;, host, endpoint, params, username, password)</span><br><span class="line">def httpPut(host, endpoint, params, username=&quot;&quot;, password=&quot;&quot;):</span><br><span class="line">    return httpRequest(&quot;PUT&quot;, host, endpoint, params, username, password)</span><br><span class="line">def getIndices(host, username=&quot;&quot;, password=&quot;&quot;):</span><br><span class="line">    endpoint = &quot;/_cat/indices&quot;</span><br><span class="line">    indicesResult = httpGet(oldClusterHost, endpoint, oldClusterUserName, oldClusterPassword)</span><br><span class="line">    indicesList = indicesResult.split(&quot;\n&quot;)</span><br><span class="line">    indexList = []</span><br><span class="line">    for indices in indicesList:</span><br><span class="line">        if (indices.find(&quot;open&quot;) &gt; 0):</span><br><span class="line">            indexList.append(indices.split()[2])</span><br><span class="line">    return indexList</span><br><span class="line">def getSettings(index, host, username=&quot;&quot;, password=&quot;&quot;):</span><br><span class="line">    endpoint = &quot;/&quot; + index + &quot;/_settings&quot;</span><br><span class="line">    indexSettings = httpGet(host, endpoint, username, password)</span><br><span class="line">    print (index + &quot;  原始settings如下：\n&quot; + indexSettings)</span><br><span class="line">    settingsDict = json.loads(indexSettings)</span><br><span class="line">    ## 分片数默认和源集群索引保持一致。</span><br><span class="line">    number_of_shards = settingsDict[index][&quot;settings&quot;][&quot;index&quot;][&quot;number_of_shards&quot;]</span><br><span class="line">    ## 副本数默认为0。</span><br><span class="line">    number_of_replicas = DEFAULT_REPLICAS</span><br><span class="line">    newSetting = &quot;\&quot;settings\&quot;: &#123;\&quot;number_of_shards\&quot;: %s, \&quot;number_of_replicas\&quot;: %s&#125;&quot; % (number_of_shards, number_of_replicas)</span><br><span class="line">    return newSetting</span><br><span class="line">def getMapping(index, host, username=&quot;&quot;, password=&quot;&quot;):</span><br><span class="line">    endpoint = &quot;/&quot; + index + &quot;/_mapping&quot;</span><br><span class="line">    indexMapping = httpGet(host, endpoint, username, password)</span><br><span class="line">    print (index + &quot; 原始mapping如下：\n&quot; + indexMapping)</span><br><span class="line">    mappingDict = json.loads(indexMapping)</span><br><span class="line">    mappings = json.dumps(mappingDict[index][&quot;mappings&quot;])</span><br><span class="line">    newMapping = &quot;\&quot;mappings\&quot; : &quot; + mappings</span><br><span class="line">    return newMapping</span><br><span class="line">def createIndexStatement(oldIndexName):</span><br><span class="line">    settingStr = getSettings(oldIndexName, oldClusterHost, oldClusterUserName, oldClusterPassword)</span><br><span class="line">    mappingStr = getMapping(oldIndexName, oldClusterHost, oldClusterUserName, oldClusterPassword)</span><br><span class="line">    createstatement = &quot;&#123;\n&quot; + str(settingStr) + &quot;,\n&quot; + str(mappingStr) + &quot;\n&#125;&quot;</span><br><span class="line">    return createstatement</span><br><span class="line">def createIndex(oldIndexName, newIndexName=&quot;&quot;):</span><br><span class="line">    if (newIndexName == &quot;&quot;) :</span><br><span class="line">        newIndexName = oldIndexName</span><br><span class="line">    createstatement = createIndexStatement(oldIndexName)</span><br><span class="line">    print (&quot;新索引 &quot; + newIndexName + &quot; 的setting和mapping如下：\n&quot; + createstatement)</span><br><span class="line">    endpoint = &quot;/&quot; + newIndexName</span><br><span class="line">    createResult = httpPut(newClusterHost, endpoint, createstatement, newClusterUser, newClusterPassword)</span><br><span class="line">    print (&quot;新索引 &quot; + newIndexName + &quot; 创建结果：&quot; + createResult)</span><br><span class="line">## main</span><br><span class="line">#indexList = getIndices(oldClusterHost, oldClusterUserName, oldClusterPassword)</span><br><span class="line">systemIndex = []</span><br><span class="line">indexneed = [&apos;traderecord&apos;]</span><br><span class="line">#print(indexList)</span><br><span class="line">#print(systemIndex)</span><br><span class="line">for index in indexneed:</span><br><span class="line">    if (index.startswith(&quot;.&quot;)):</span><br><span class="line">        systemIndex.append(index)</span><br><span class="line">    else :</span><br><span class="line">        createIndex(index, index)</span><br><span class="line">if (len(systemIndex) &gt; 0) :</span><br><span class="line">    for index in systemIndex:</span><br><span class="line">        print (index + &quot; 或许是系统索引，不会重新创建，如有需要，请单独处理～&quot;)</span><br></pre></td></tr></table></figure>
<h3 id="4-2、执行Python脚本，创建目标索引"><a href="#4-2、执行Python脚本，创建目标索引" class="headerlink" title="4.2、执行Python脚本，创建目标索引"></a>4.2、执行Python脚本，创建目标索引</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/usr/bin/python indiceCreate.py</span><br></pre></td></tr></table></figure>
<h3 id="4-3、查看目标ES的索引是否创建"><a href="#4-3、查看目标ES的索引是否创建" class="headerlink" title="4.3、查看目标ES的索引是否创建"></a>4.3、查看目标ES的索引是否创建</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl http://10.60.2.31:9200/traderecord/_mapping?pretty</span><br></pre></td></tr></table></figure>
<blockquote>
<p>提示：脚本简单改造，支持全量同步和指定索引同步</p>
</blockquote>
<h2 id="5、迁移全量数据"><a href="#5、迁移全量数据" class="headerlink" title="5、迁移全量数据"></a>5、迁移全量数据</h2><blockquote>
<p>logstash会占用部分资源，建议在闲置资源侧上部署logstash服务；</p>
</blockquote>
<h3 id="5-1、logstash安装与配置"><a href="#5-1、logstash安装与配置" class="headerlink" title="5.1、logstash安装与配置"></a>5.1、logstash安装与配置</h3><ul>
<li>下载logstash，需根据es版本下载对应的logstash<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su - sspusr</span><br><span class="line">wget https://artifacts.elastic.co/downloads/logstash/logstash-7.3.2.tar.gz</span><br><span class="line">tar xzvf logstash-7.3.2.tar.gz</span><br><span class="line">cd /home/sspusr/logstash-7.3.2</span><br><span class="line">mkdir -pv &#123;logs,data&#125; config/conf.d</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="5-2、全量pipeline文件制作"><a href="#5-2、全量pipeline文件制作" class="headerlink" title="5.2、全量pipeline文件制作"></a>5.2、全量pipeline文件制作</h3><ul>
<li>vim /home/sspusr/logstash-7.3.2/config/conf.d/inyusyses_outalies.conf <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input&#123;</span><br><span class="line">    elasticsearch&#123;</span><br><span class="line">        # 源端ES地址。</span><br><span class="line">        hosts =&gt;  [&quot;http://192.168.36.59:9200&quot;]</span><br><span class="line">        # 安全集群配置登录用户名密码。</span><br><span class="line">        #user =&gt; &quot;xxxxxx&quot;</span><br><span class="line">        #password =&gt; &quot;xxxxxx&quot;</span><br><span class="line">        # 需要迁移的索引列表，多个索引以英文以逗号（,）分隔。</span><br><span class="line">        index =&gt; &quot;traderecord_202203&quot;</span><br><span class="line">        # 以下三项保持默认即可，包含线程数和迁移数据大小和Logstash JVM配置相关。</span><br><span class="line">        #docinfo=&gt;true</span><br><span class="line">        #slices =&gt; 5</span><br><span class="line">        #size =&gt; 5000</span><br><span class="line">        # 定时任务，以下配置表示每分钟执行一次</span><br><span class="line">        schedule =&gt; &quot;* * * * *&quot;</span><br><span class="line">        scroll =&gt; &quot;5m&quot;</span><br><span class="line">        docinfo=&gt;true</span><br><span class="line">        size =&gt; 5000</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line">  # 去掉一些Logstash自己加的字段。</span><br><span class="line">  mutate &#123;</span><br><span class="line">    remove_field =&gt; [&quot;@timestamp&quot;, &quot;@version&quot;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output&#123;</span><br><span class="line">    elasticsearch&#123;</span><br><span class="line">        # 目标端ES地址，可在阿里云Elasticsearch实例的基本信息页面获取。</span><br><span class="line">        hosts =&gt; [&quot;http://10.60.2.31:9200&quot;]</span><br><span class="line">        # 安全集群配置登录用户名密码。</span><br><span class="line">        #user =&gt; &quot;elastic&quot;</span><br><span class="line">        #password =&gt; &quot;xxxxxx&quot;</span><br><span class="line">        # 目标端索引名称，以下配置表示索引与源端保持一致。</span><br><span class="line">        index =&gt; &quot;%&#123;[@metadata][_index]&#125;&quot;</span><br><span class="line">        # 目标端索引type，以下配置表示索引类型与源端保持一致。</span><br><span class="line">        document_type =&gt; &quot;%&#123;[@metadata][_type]&#125;&quot;</span><br><span class="line">        # 目标端数据的id，如果不需要保留原id，可以删除以下这行，删除后性能会更好。</span><br><span class="line">        document_id =&gt; &quot;%&#123;[@metadata][_id]&#125;&quot;</span><br><span class="line">        ilm_enabled =&gt; false</span><br><span class="line">        manage_template =&gt; false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="5-3、修改logstash-yml配置文件"><a href="#5-3、修改logstash-yml配置文件" class="headerlink" title="5.3、修改logstash.yml配置文件"></a>5.3、修改logstash.yml配置文件</h3><ul>
<li>vim /home/sspusr/logstash-7.3.2/config/logstash.yml<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">path.data: /home/sspusr/logstash-7.3.2/data</span><br><span class="line">path.logs: /home/sspusr/logstash-7.3.2/logs</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="5-4、启动logstash服务"><a href="#5-4、启动logstash服务" class="headerlink" title="5.4、启动logstash服务"></a>5.4、启动logstash服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#启动命令</span><br><span class="line">nohup /home/sspusr/logstash-7.3.2/bin/logstash &amp;</span><br><span class="line">#日志目录</span><br><span class="line">/home/sspusr/logstash-7.3.2/logs/*</span><br></pre></td></tr></table></figure>
<h3 id="5-5、查看数据迁移结果"><a href="#5-5、查看数据迁移结果" class="headerlink" title="5.5、查看数据迁移结果"></a>5.5、查看数据迁移结果</h3><h2 id="6、迁移增量数据"><a href="#6、迁移增量数据" class="headerlink" title="6、迁移增量数据"></a>6、迁移增量数据</h2><blockquote>
<p>注意：需增量迁移的索引，必须有时间戳字段，类型为date，且不支持删除数据同步；</p>
</blockquote>
<h3 id="6-1、增量pipeline文件制作"><a href="#6-1、增量pipeline文件制作" class="headerlink" title="6.1、增量pipeline文件制作"></a>6.1、增量pipeline文件制作</h3><h3 id="6-2、数据追加同步"><a href="#6-2、数据追加同步" class="headerlink" title="6.2、数据追加同步"></a>6.2、数据追加同步</h3><h3 id="6-3、启动logstash服务"><a href="#6-3、启动logstash服务" class="headerlink" title="6.3、启动logstash服务"></a>6.3、启动logstash服务</h3><h3 id="6-4、查看数据迁移结果"><a href="#6-4、查看数据迁移结果" class="headerlink" title="6.4、查看数据迁移结果"></a>6.4、查看数据迁移结果</h3><h2 id="7、验证数据迁移结果"><a href="#7、验证数据迁移结果" class="headerlink" title="7、验证数据迁移结果"></a>7、验证数据迁移结果</h2><h2 id="8、其他"><a href="#8、其他" class="headerlink" title="8、其他"></a>8、其他</h2>]]></content>
      <categories>
        <category>ELK文档</category>
      </categories>
      <tags>
        <tag>ELK文档</tag>
      </tags>
  </entry>
  <entry>
    <title>使用SkyWalking监控Nginx链路信息</title>
    <url>/2021/03/02/%E4%BD%BF%E7%94%A8SkyWalking%E7%9B%91%E6%8E%A7Nginx%E9%93%BE%E8%B7%AF%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<h1 id="使用SkyWalking监控Nginx链路信息"><a href="#使用SkyWalking监控Nginx链路信息" class="headerlink" title="使用SkyWalking监控Nginx链路信息"></a>使用SkyWalking监控Nginx链路信息</h1><h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>本篇只记录如何安装及配置Nginx LUA Agent展开，详细的记录了nginx lua模块的安装过程及如配置Nginx LUA Agent，并全程使用docker+k8s进行部署，SkyWalking的服务端也采用k8s部署，数据存储使用7.10的es完成，ES连接方式为HTTPS，具体踩坑过程后续进行记录；</p>
<h2 id="2、SkyWalking简介与架构"><a href="#2、SkyWalking简介与架构" class="headerlink" title="2、SkyWalking简介与架构"></a>2、SkyWalking简介与架构</h2><blockquote>
<p>官方手册：<a href="https://skywalking.apache.org/docs/main/latest/en/concepts-and-designs/overview/" target="_blank" rel="noopener">SkyWalking Overview</a></p>
</blockquote>
<ul>
<li>SkyWalking：一个开放源代码的可观察性平台，用于收集，分析，聚合和可视化来自服务和云本机基础结构的数据。SkyWalking提供了一种简便的方法来维护您的分布式系统的清晰视图，即使在整个云中也是如此。它是一个现代的APM，专门为基于云的基于容器的分布式系统而设计，如下图：<br><img src="http://static.zybuluo.com/a807257775/3329kds64vfameocjdo9tb02/image_1evop0psr14426t59l814ub3es9.png" alt="image_1evop0psr14426t59l814ub3es9.png-242.1kB"></li>
</ul>
<blockquote>
<p>从逻辑上讲，SkyWalking分为四个部分：探针，服务后端，存储和UI，如下图：</p>
</blockquote>
<ul>
<li>探针：收集数据并重新格式化以符合SkyWalking的要求（不同的探针支持不同的来源）；</li>
<li>服务后端：支持数据聚合，分析和流处理，涵盖跟踪，指标和日志；</li>
<li>存储：支持ElasticSearch，H2，MySQL，TiDB，InfluxDB存储SkyWalking数据</li>
<li>UI：是一个高度可定制的基于Web的界面，允许SkyWalking最终用户可视化和管理SkyWalking数据。<br><img src="http://static.zybuluo.com/a807257775/cycyxik980hvftuilinnb91b/image_1evop2dcg1eui14ki6j81s82q4dm.png" alt="image_1evop2dcg1eui14ki6j81s82q4dm.png-272.8kB"></li>
</ul>
<h2 id="3、为什么要使用SkyWalking？"><a href="#3、为什么要使用SkyWalking？" class="headerlink" title="3、为什么要使用SkyWalking？"></a>3、为什么要使用SkyWalking？</h2><ul>
<li>SkyWalking提供了用于在许多不同情况下观察和监视分布式系统的解决方案。首先，与传统方法一样，SkyWalking为服务提供自动仪器代理，例如Java，C＃，Node.js，Go，PHP和Nginx LUA。在多语言，持续部署的环境中，云本机基础架构变得越来越强大，但也越来越复杂。SkyWalking的服务网格接收器使SkyWalking能够从Istio / Envoy和Linkerd等服务网格框架接收遥测数据，从而使用户能够了解整个分布式系统，</li>
<li>SkyWalking使用服务名称，服务实例，端点提供可观察性功能，详细含义如下：<ul>
<li>服务名称：表示一组工作负载，SkyWalking也可以使用您在Istio等平台中定义的名称；</li>
<li>服务实例：服务组中的每个单独工作负载都称为实例，像pods在Kubernetes中的定义一样；</li>
<li>端点：服务中用于传入请求的路径，例如HTTP URI路径或gRPC服务类+方法签名；</li>
</ul>
</li>
</ul>
<h2 id="4、部署环境介绍"><a href="#4、部署环境介绍" class="headerlink" title="4、部署环境介绍"></a>4、部署环境介绍</h2><table>
<thead>
<tr>
<th>平台</th>
<th>IP</th>
<th>NGINX版本</th>
<th>Agent版本</th>
<th>SkyWalking版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS Linux release 7.7.1908</td>
<td>192.168.6.10</td>
<td>1.12.1</td>
<td>skywalking-nginx-lua-0.3.0</td>
<td>8.1.0</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="5、编译NGINX"><a href="#5、编译NGINX" class="headerlink" title="5、编译NGINX"></a>5、编译NGINX</h2><h3 id="5-1、安装luajit编译器"><a href="#5-1、安装luajit编译器" class="headerlink" title="5.1、安装luajit编译器"></a>5.1、安装luajit编译器</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#下载luajit编译器</span><br><span class="line">wget http://luajit.org/download/LuaJIT-2.1.0-beta3.tar.gz</span><br><span class="line">#解压源码包</span><br><span class="line">tar xzvf LuaJIT-2.1.0-beta3.tar.gz</span><br><span class="line">cd LuaJIT-2.1.0-beta3</span><br><span class="line">#安装路径：/usr/local/luajit</span><br><span class="line">make PREFIX=/usr/local/luajit</span><br><span class="line">make install PREFIX=/usr/local/luajit</span><br><span class="line">#构建库文件软连接</span><br><span class="line">ln -s /usr/local/luajit/lib/libluajit-5.1.so.2 /lib64/libluajit-5.1.so.2</span><br></pre></td></tr></table></figure>
<h3 id="5-2、增加环境变量"><a href="#5-2、增加环境变量" class="headerlink" title="5.2、增加环境变量"></a>5.2、增加环境变量</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#增加LUAJIT环境变量</span><br><span class="line">echo &apos;export LUAJIT_LIB=/usr/local/luajit/lib&apos; &gt;&gt; /etc/profile</span><br><span class="line">echo &apos;export LUAJIT_INC=/usr/local/luajit/include/luajit-2.1&apos; &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>
<h3 id="5-3、安装nginx-lua模块"><a href="#5-3、安装nginx-lua模块" class="headerlink" title="5.3、安装nginx lua模块"></a>5.3、安装nginx lua模块</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://github.com/simpl/ngx_devel_kit/archive/v0.3.0.tar.gz -O ngx_devel_kit-0.3.0.tar.gz</span><br><span class="line">wget https://github.com/openresty/lua-nginx-module/archive/v0.10.14.tar.gz -O lua-nginx-module-0.10.14.tar.gz</span><br><span class="line">tar xzvf ngx_devel_kit-0.3.0.tar.gz</span><br><span class="line">tar xzvf lua-nginx-module-0.10.14.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="5-4、Bulid-Nginx"><a href="#5-4、Bulid-Nginx" class="headerlink" title="5.4、Bulid Nginx"></a>5.4、Bulid Nginx</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#nginx编译参数如下（这里包含了其他模块，具体各个模块的安装这里不记录）：</span><br><span class="line">./configure --prefix=/usr/local/nginx --user=www --group=www --with-http_stub_status_module --with-http_ssl_module --without-mail_pop3_module --without-mail_smtp_module --without-mail_imap_module  --with-http_realip_module --add-module=/soft/naxsi-master/naxsi_src --add-module=/soft/nginx-limit-upstream-master --add-module=/soft/nginx-upstream-jvm-route-master --add-module=/soft/ngx_http_proxy_connect_module-0.0.2 --add-module=/soft/ngx_devel_kit-0.3.0 --add-module=/soft/lua-nginx-module-0.10.14 --with-http_v2_module &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<h3 id="5-5、Test-Nginx-Lua"><a href="#5-5、Test-Nginx-Lua" class="headerlink" title="5.5、Test Nginx Lua"></a>5.5、Test Nginx Lua</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#在nginx.conf，server段中增加如下配置</span><br><span class="line">location /lua &#123;</span><br><span class="line">    default_type text/html;</span><br><span class="line">    content_by_lua_block &#123;</span><br><span class="line">        ngx.say(&quot;Hello Lua!&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#重载nginx</span><br><span class="line">/usr/loca/nginx/sbin/nginx -s reload</span><br><span class="line">#访问测试</span><br><span class="line">curl http://127.0.0.1/lua</span><br><span class="line">#如下返回表示lua安装正常</span><br><span class="line">Hello Lua!</span><br></pre></td></tr></table></figure>
<h3 id="5-5、下载skywalking-lua脚本"><a href="#5-5、下载skywalking-lua脚本" class="headerlink" title="5.5、下载skywalking lua脚本"></a>5.5、下载skywalking lua脚本</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget https://github.com/apache/skywalking-nginx-lua/archive/v0.3.0.tar.gz</span><br><span class="line">tar xzvf v0.3.0.tar.gz -C /usr/local/</span><br></pre></td></tr></table></figure>
<h3 id="5-6、修改nginx-conf配置文件"><a href="#5-6、修改nginx-conf配置文件" class="headerlink" title="5.6、修改nginx.conf配置文件"></a>5.6、修改nginx.conf配置文件</h3><blockquote>
<p>提示：配置项（lua_package_path、metadata_buffer:set、startBackendTimer）要根据实际部署情况进行调整；<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#user  www;</span><br><span class="line">worker_processes  2;</span><br><span class="line">error_log  /usr/local/nginx/logs/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       /usr/local/nginx/conf/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line">    access_log  /usr/local/nginx/logs/access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    #gzip  on;</span><br><span class="line">    include /usr/local/nginx/conf/conf.d/*.conf;</span><br><span class="line">    ############################################################################################</span><br><span class="line">    #LUA脚本存放路径</span><br><span class="line">    lua_package_path &quot;/usr/local/skywalking-nginx-lua-0.3.0/lib/?.lua;;&quot;;</span><br><span class="line">    lua_shared_dict tracing_buffer 100m;</span><br><span class="line">    init_worker_by_lua_block &#123;</span><br><span class="line">        local metadata_buffer = ngx.shared.tracing_buffer</span><br><span class="line">        #服务名称</span><br><span class="line">        metadata_buffer:set(&apos;serviceName&apos;, &apos;szzt_nginx112&apos;)</span><br><span class="line">        #实例名称</span><br><span class="line">        metadata_buffer:set(&apos;serviceInstanceName&apos;, &apos;centos2009-858f6fcf97-m69tp&apos;)</span><br><span class="line">        #skywalking后端地址</span><br><span class="line">        require(&quot;skywalking.client&quot;):startBackendTimer(&quot;http://10.244.1.19:12800&quot;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 60000;</span><br><span class="line">        #lua_code_cache off;</span><br><span class="line">        location /ingress &#123;</span><br><span class="line">            default_type text/html;</span><br><span class="line">            rewrite_by_lua_block &#123;</span><br><span class="line">                require(&quot;skywalking.tracer&quot;):start(&quot;upstream service&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">            proxy_pass http://127.0.0.1:60000/tier2/lb;</span><br><span class="line">            body_filter_by_lua_block &#123;</span><br><span class="line">                if ngx.arg[2] then</span><br><span class="line">                    require(&quot;skywalking.tracer&quot;):finish()</span><br><span class="line">                end</span><br><span class="line">            &#125;</span><br><span class="line">            log_by_lua_block &#123;</span><br><span class="line">                require(&quot;skywalking.tracer&quot;):prepareForReport()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /tier2/lb &#123;</span><br><span class="line">            default_type text/html;</span><br><span class="line"></span><br><span class="line">            rewrite_by_lua_block &#123;</span><br><span class="line">                require(&quot;skywalking.tracer&quot;):start(&quot;backend service&quot;)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            proxy_pass http://127.0.0.1:60000/backend;</span><br><span class="line"></span><br><span class="line">            body_filter_by_lua_block &#123;</span><br><span class="line">                if ngx.arg[2] then</span><br><span class="line">                    require(&quot;skywalking.tracer&quot;):finish()</span><br><span class="line">                end</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            log_by_lua_block &#123;</span><br><span class="line">                require(&quot;skywalking.tracer&quot;):prepareForReport()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------------</span><br><span class="line">        # -- Mock backend business service as the upsteeam</span><br><span class="line">        # ------------------------------------------------------</span><br><span class="line">        location /backend &#123;</span><br><span class="line">            default_type text/html;</span><br><span class="line">            content_by_lua_block &#123;</span><br><span class="line">                ngx.say(&quot;&lt;p&gt;Backend service for testing only.&lt;/p&gt;&quot;)</span><br><span class="line">                ngx.say(&quot;&lt;p&gt;Backend sw8 received headers: &quot; .. ngx.req.get_headers()[&quot;sw8&quot;] .. &quot;&lt;/p&gt;&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        # ------------------------------------------------------</span><br><span class="line">        # -- Mock OAP server to provide register and trace collection</span><br><span class="line">        # ------------------------------------------------------</span><br><span class="line">        location /v3/management/reportProperties &#123;</span><br><span class="line">            default_type text/html;</span><br><span class="line">            lua_need_request_body on;</span><br><span class="line"></span><br><span class="line">            content_by_lua_block &#123;</span><br><span class="line">                local cjson = require(&apos;cjson&apos;)</span><br><span class="line"></span><br><span class="line">                ngx.log(ngx.DEBUG, &apos;Instance report request = &apos;, ngx.req.get_body_data())</span><br><span class="line"></span><br><span class="line">                local reportInfo = &#123;&#125;</span><br><span class="line">                ngx.say(cjson.encode(reportInfo))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /v3/management/keepAlive &#123;</span><br><span class="line">            default_type text/html;</span><br><span class="line">            lua_need_request_body on;</span><br><span class="line"></span><br><span class="line">            content_by_lua_block &#123;</span><br><span class="line">                local cjson = require(&apos;cjson&apos;)</span><br><span class="line">                ngx.log(ngx.DEBUG, &apos;KeepAlive request = &apos;, ngx.req.get_body_data())</span><br><span class="line"></span><br><span class="line">                local keepAliveInfo = &#123;&#125;</span><br><span class="line">                ngx.say(cjson.encode(keepAliveInfo))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /v3/segments &#123;</span><br><span class="line">            default_type text/html;</span><br><span class="line">            lua_need_request_body on;</span><br><span class="line"></span><br><span class="line">            content_by_lua_block &#123;</span><br><span class="line">                local cjson = require(&apos;cjson&apos;)</span><br><span class="line">                ngx.log(ngx.DEBUG, &apos;Received segment = &apos;, ngx.req.get_body_data())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="5-7、重载配置文件"><a href="#5-7、重载配置文件" class="headerlink" title="5.7、重载配置文件"></a>5.7、重载配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#重载nginx</span><br><span class="line">/usr/loca/nginx/sbin/nginx -s reload</span><br><span class="line">#访问测试</span><br><span class="line">curl http://127.0.0.1:60000/ingress</span><br><span class="line">#如下返回表示后端服务部署正常，登录UI查看链路数据</span><br><span class="line">&lt;p&gt;Backend service for testing only.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Backend sw8 received headers: 1-Y2JiMjk3YzAtMTRhOS00NmJjLWFkOTEtMWQwZWY5YjQyZGY5-NDY1YTc4YWQtOTNjYy00MzJlLWE4MzYtOTgyNGQ0OTUwNmQ2-1-c3p6dF9uZ2lueDExMg==-Y2VudG9zMjAwOS04NThmNmZjZjk3LW02OXRw-L3RpZXIyL2xi-YmFja2VuZCBzZXJ2aWNl&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<h3 id="5-8、进行简单压测"><a href="#5-8、进行简单压测" class="headerlink" title="5.8、进行简单压测"></a>5.8、进行简单压测</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ab -c 100 -n 1000 http://127.0.0.1:60000/ingress</span><br><span class="line">    Server Software:        nginx/1.12.1</span><br><span class="line">    Server Hostname:        127.0.0.1</span><br><span class="line">    Server Port:            60000</span><br><span class="line">    </span><br><span class="line">    Document Path:          /ingress</span><br><span class="line">    Document Length:        272 bytes</span><br><span class="line">    </span><br><span class="line">    Concurrency Level:      100</span><br><span class="line">    Time taken for tests:   0.423 seconds</span><br><span class="line">    Complete requests:      1000</span><br><span class="line">    Failed requests:        0</span><br><span class="line">    Write errors:           0</span><br><span class="line">    Total transferred:      415000 bytes</span><br><span class="line">    HTML transferred:       272000 bytes</span><br><span class="line">    Requests per second:    2363.95 [#/sec] (mean)</span><br><span class="line">    Time per request:       42.302 [ms] (mean)</span><br><span class="line">    Time per request:       0.423 [ms] (mean, across all concurrent requests)</span><br><span class="line">    Transfer rate:          958.05 [Kbytes/sec] received</span><br></pre></td></tr></table></figure>
<h3 id="5-7、登录skywalking-UI进行查看"><a href="#5-7、登录skywalking-UI进行查看" class="headerlink" title="5.7、登录skywalking UI进行查看"></a>5.7、登录skywalking UI进行查看</h3><blockquote>
<p>提示：实例名可看做是一个容器，一台服务器，一个OS进程，但必须唯一，用于区分和标识，具体UI使用详解，请阅读官方手册：<a href="https://skywalking.apache.org/docs/main/latest/en/concepts-and-designs/ui-overview/" target="_blank" rel="noopener">Visualization</a></p>
</blockquote>
<p><img src="http://static.zybuluo.com/a807257775/lvwcvx88jcs80i073g4xls3p/image_1evovi773c331r2v1nke1v3o1jpn16.png" alt="image_1evovi773c331r2v1nke1v3o1jpn16.png-136kB"></p>
<h2 id="6、使用K8S部署NGINX"><a href="#6、使用K8S部署NGINX" class="headerlink" title="6、使用K8S部署NGINX"></a>6、使用K8S部署NGINX</h2><blockquote>
<p>提示：使用k8s部署基于skywalking的nginx，存在如下几个关键点，1、必须保证服务实例唯一，服务名称根据项目来定 2、skywalking的地址使用coredns的域名出现无法识别，必须填写clusterIP 3、nginx.conf配置文件是不支持容器变量传递，则放弃使用configmap进行存储和挂载，使用envsubst实现</p>
</blockquote>
<h3 id="6-1、准备构建Docker镜像的所需资源文件"><a href="#6-1、准备构建Docker镜像的所需资源文件" class="headerlink" title="6.1、准备构建Docker镜像的所需资源文件"></a>6.1、准备构建Docker镜像的所需资源文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@centos2009-858f6fcf97-m69tp nginx112]# ll</span><br><span class="line">total 5820</span><br><span class="line">-rw-r--r-- 1 root root     152 Mar  2 10:13 docker-entrypoint.sh -- 容器入口文件</span><br><span class="line">-rw-r--r-- 1 root root     642 Mar  2 10:13 Dockerfile  -- 镜像构建文件</span><br><span class="line">-rw-r--r-- 1 root root  885212 Mar  2 09:55 luajit2.1.0.tar.gz -- 将编译好的luajit打包</span><br><span class="line">-rw-r--r-- 1 root root 5012833 Mar  2 09:51 nginx112_skywalking.tar.gz -- 将编译并配置好的nginx打包</span><br><span class="line">-rw-r--r-- 1 root root   45535 Mar  2 09:52 skywalking-nginx-lua-0.3.0.tar.gz -- skywalking lua脚本打包</span><br><span class="line">#镜像构建文件内容</span><br><span class="line">[root@centos2009-858f6fcf97-m69tp nginx112]# cat Dockerfile </span><br><span class="line"># Version 0.0.1</span><br><span class="line">FROM 192.168.6.10/szzt_production/centos:centos7.9.2009</span><br><span class="line">MAINTAINER lisir </span><br><span class="line">ENV LUAJIT_LIB /usr/local/luajit/lib</span><br><span class="line">ENV LUAJIT_INC /usr/local/luajit/include/luajit-2.1</span><br><span class="line">ENV PATH /usr/local/nginx/sbin:$PATH</span><br><span class="line">ADD ./nginx112_skywalking.tar.gz /usr/local/</span><br><span class="line">ADD ./luajit2.1.0.tar.gz /usr/local/</span><br><span class="line">ADD ./skywalking-nginx-lua-0.3.0.tar.gz /usr/local/</span><br><span class="line">COPY ./docker-entrypoint.sh /</span><br><span class="line">RUN useradd -s /sbin/nologin -M www &amp;&amp; ln -sf /dev/stdout /usr/local/nginx/logs/access.log &amp;&amp; ln -sf /dev/stderr /usr/local/nginx/logs/error.log &amp;&amp; chmod 777 /docker-entrypoint.sh</span><br><span class="line">ENTRYPOINT [&quot;/docker-entrypoint.sh&quot;]</span><br><span class="line">WORKDIR /usr/local/nginx</span><br><span class="line">EXPOSE 80</span><br><span class="line">CMD [&quot;nginx&quot;,&quot;-g&quot;,&quot;daemon off;&quot;]</span><br><span class="line">#重要：为保证实例名唯一，需提前制作好使nginx.conf.template文件，用envsubst将nginx.conf.template中的内容覆盖nginx.conf文件内容，实现读取环境变量</span><br><span class="line">[root@centos2009-858f6fcf97-m69tp nginx112]# cat docker-entrypoint.sh </span><br><span class="line">#!/usr/bin/env sh</span><br><span class="line">set -eu</span><br><span class="line">envsubst &apos;$&#123;SVC_NAME&#125; $&#123;HOSTNAME&#125;&apos; &lt; /usr/local/nginx/conf/nginx.conf.template &gt; /usr/local/nginx/conf/nginx.conf</span><br><span class="line">exec &quot;$@&quot;</span><br></pre></td></tr></table></figure>
<h3 id="6-2、构建基于skywalking的nginx生产镜像"><a href="#6-2、构建基于skywalking的nginx生产镜像" class="headerlink" title="6.2、构建基于skywalking的nginx生产镜像"></a>6.2、构建基于skywalking的nginx生产镜像</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#构建过程直接-t打上标签</span><br><span class="line">docker image build -t 192.168.6.33/szzt_production/nginx112:latest .</span><br><span class="line">#上传至私有仓库</span><br><span class="line">docker push 192.168.6.33/szzt_production/nginx112:latest</span><br></pre></td></tr></table></figure>
<h3 id="6-3、部署一个nginx容器进行测试"><a href="#6-3、部署一个nginx容器进行测试" class="headerlink" title="6.3、部署一个nginx容器进行测试"></a>6.3、部署一个nginx容器进行测试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#用制作好的镜像，create的一个容器</span><br><span class="line">docker container run -d --name nginx-lisir -p 83:60000 -e SVC_NAME=szzt-lisir-nginx -e SW_ADDR=http://10.244.1.19:12800 --restart always 192.168.6.33/szzt_production/nginx112:latest</span><br><span class="line">#访问测试</span><br><span class="line">curl http://127.0.0.1:83/ingress</span><br><span class="line">&lt;p&gt;Backend service for testing only.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;Backend sw8 received headers: 1-Y2JiMjk3YzAtMTRhOS00NmJjLWFkOTEtMWQwZWY5YjQyZGY5-Y2JiMjk3YzAtMTRhOS00NmJjLWFkOTEtMWQwZWY5YjQyZGY5-1-c3p6dC1saXNpci1uZ2lueA==-MGUyMTRlOTI3MGU0-L3RpZXIyL2xi-YmFja2VuZCBzZXJ2aWNl&lt;/p&gt;</span><br></pre></td></tr></table></figure>
<h3 id="6-4、使用k8s部署"><a href="#6-4、使用k8s部署" class="headerlink" title="6.4、使用k8s部署"></a>6.4、使用k8s部署</h3><blockquote>
<p>提示：k8s配置文件篇幅过长这里不展示，按照如下指令操作，可完成PVC存储、configmap配置中心、集群暴露端口svc及pod相关等资源的创建；<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#按照文件数据顺序，依次使用Kubectl apply -f xxx.yml，即可完成nginx集群部署，重点对6号文件进行调整，里面需增加SVC_NAME、SW_ADDR的ENV，用于配置文件变量替换</span><br><span class="line">[root@DEVOPSSRV01 nginx_deployment]# ll</span><br><span class="line">total 28</span><br><span class="line">-rw-r--r-- 1 root root  292 Jan  7 14:44 1.nginx_pv.yml</span><br><span class="line">-rw-r--r-- 1 root root  217 Jan  7 14:44 2.nginx_pvc_web1.yml</span><br><span class="line">-rw-r--r-- 1 root root 4653 Mar  2 11:04 3.nginx-config.yml</span><br><span class="line">-rw-r--r-- 1 root root  519 Mar  2 11:04 4.www-config.yml</span><br><span class="line">-rw-r--r-- 1 root root  354 Mar  2 11:39 5.nginx_svc.yml</span><br><span class="line">-rw-r--r-- 1 root root 1386 Mar  2 11:13 6.nginx_deployment_v3.yml</span><br><span class="line">#使用命令查看创建后的资源运行状态</span><br><span class="line">[root@DEVOPSSRV01 nginx_deployment]# kubectl get pod,svc -n nginx-production -o wide</span><br><span class="line">NAME                            READY   STATUS    RESTARTS   AGE     IP             NODE                NOMINATED NODE   READINESS GATES</span><br><span class="line">pod/nginx112-59fcbcbccc-5d7ms   1/1     Running   0          5h32m   10.244.1.24    tssrv02.novalocal   &lt;none&gt;           &lt;none&gt;</span><br><span class="line">pod/nginx112-59fcbcbccc-mfglm   1/1     Running   0          5h32m   10.244.2.195   dbsrv01.novalocal   &lt;none&gt;           &lt;none&gt;</span><br><span class="line"></span><br><span class="line">NAME                TYPE       CLUSTER-IP   EXTERNAL-IP   PORT(S)                        AGE     SELECTOR</span><br><span class="line">service/nginx-svc   NodePort   10.98.3.73   &lt;none&gt;        60000:30002/TCP,80:30006/TCP   5h36m   app=web_server</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="6-5、登录k8s-dashboard查看资源情况"><a href="#6-5、登录k8s-dashboard查看资源情况" class="headerlink" title="6.5、登录k8s dashboard查看资源情况"></a>6.5、登录k8s dashboard查看资源情况</h3><ul>
<li>pods资源<br><img src="http://static.zybuluo.com/a807257775/9vh9vk708i3a6syu702m6is9/image_1evovvggs1ujt6vv1js1e7rpgf1j.png" alt="image_1evovvggs1ujt6vv1js1e7rpgf1j.png-138.9kB"></li>
<li>configmaps资源<br><img src="http://static.zybuluo.com/a807257775/zmu8syto8q0j0wjefyn9ckzq/image_1evp244544vnfr6re01efg1qdum.png" alt="image_1evp244544vnfr6re01efg1qdum.png-126.5kB"></li>
</ul>
<h3 id="6-6、登录skywalking-UI查看资源情况"><a href="#6-6、登录skywalking-UI查看资源情况" class="headerlink" title="6.6、登录skywalking UI查看资源情况"></a>6.6、登录skywalking UI查看资源情况</h3><ul>
<li>可用简单的压测命令进行测试后，在登录查看，在k8s上创建了几个POD，这里应当看到对应的几个实例<br><img src="http://static.zybuluo.com/a807257775/q3pgp06401jqvt26ll5l0b61/image_1evp3e9m4ism1fr6v8cvhtl8b13.png" alt="image_1evp3e9m4ism1fr6v8cvhtl8b13.png-137.4kB"></li>
</ul>
<h2 id="7、打完收工"><a href="#7、打完收工" class="headerlink" title="7、打完收工"></a>7、打完收工</h2>]]></content>
      <categories>
        <category>SkyWalking</category>
      </categories>
      <tags>
        <tag>SkyWalking</tag>
      </tags>
  </entry>
  <entry>
    <title>基于openresty实现nginx+lua鉴权功能</title>
    <url>/2022/01/05/%E5%9F%BA%E4%BA%8Eopenresty%E5%AE%9E%E7%8E%B0nginx+lua%E9%89%B4%E6%9D%83%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="基于openresty实现nginx-lua鉴权功能"><a href="#基于openresty实现nginx-lua鉴权功能" class="headerlink" title="基于openresty实现nginx+lua鉴权功能"></a>基于openresty实现nginx+lua鉴权功能</h1><hr>
<h2 id="1、需求背景"><a href="#1、需求背景" class="headerlink" title="1、需求背景"></a>1、需求背景</h2><blockquote>
<p>客户请求我方接口，会带有token等参数，获取参数后，查询参数合法性与redis是否匹配，匹配则放行，不匹配则403访问拒绝，并对接口使用限流措施；</p>
</blockquote>
<h2 id="2、部署需知"><a href="#2、部署需知" class="headerlink" title="2、部署需知"></a>2、部署需知</h2><blockquote>
<p>目前最新版的OpenResty内置的lua_redis模块，只可用于单机版redis，这个并不复合架构的高可用性，网上也有相关开源的案例，但均不支持集群密码连接，这里就仅使用单机版进行部署，可以考虑替代方案：TwemProxy(nutcracker)集群方案</p>
</blockquote>
<h2 id="3、OpenResty简介"><a href="#3、OpenResty简介" class="headerlink" title="3、OpenResty简介"></a>3、OpenResty简介</h2><blockquote>
<p>OpenResty是基于Nginx和Lua的高性能Web平台，OpenResty通过汇聚各种设计精良的Nginx模块，从而将Nginx有效地变成一个强大的通用Web应用平台。根据需求，本次我们利用OpenResty的lua模块，将nginx与redis进行连接，客户方发起请求后，行请求拦截。</p>
</blockquote>
<h2 id="4、安装环境介绍"><a href="#4、安装环境介绍" class="headerlink" title="4、安装环境介绍"></a>4、安装环境介绍</h2><table>
<thead>
<tr>
<th>平台</th>
<th>IP</th>
<th>OpenResty版本</th>
<th>Redis版本</th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS 7.8 64Bit</td>
<td>192.168.2.245</td>
<td>openresty-1.19.9.1</td>
<td>redis-6.2.5</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="5、Openresty部署"><a href="#5、Openresty部署" class="headerlink" title="5、Openresty部署"></a>5、Openresty部署</h2><h3 id="5-1、下载源码包"><a href="#5-1、下载源码包" class="headerlink" title="5.1、下载源码包"></a>5.1、下载源码包</h3><ul>
<li><a href="http://openresty.org/cn/download.html" target="_blank" rel="noopener">官方下载地址</a></li>
<li><a href="http://openresty.org/cn/installation.html" target="_blank" rel="noopener">官方安装手册</a></li>
</ul>
<h3 id="5-2、编译编码包"><a href="#5-2、编译编码包" class="headerlink" title="5.2、编译编码包"></a>5.2、编译编码包</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -pv /home/ap/iflytek/yth-apps/system/openresty-1.19.9.1</span><br><span class="line">./configure --prefix=/home/ap/iflytek/yth-apps/system/openresty-1.19.9.1</span><br><span class="line">gmake</span><br><span class="line">gmake install</span><br></pre></td></tr></table></figure>
<h3 id="5-3、启动测试"><a href="#5-3、启动测试" class="headerlink" title="5.3、启动测试"></a>5.3、启动测试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd /home/ap/iflytek/yth-apps/system/openresty-1.19.9.1/nginx/sbin</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure>
<h3 id="5-3、lua测试"><a href="#5-3、lua测试" class="headerlink" title="5.3、lua测试"></a>5.3、lua测试</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#在nginx.conf，server段中增加如下配置</span><br><span class="line">location /lua &#123;</span><br><span class="line">    default_type text/html;</span><br><span class="line">    content_by_lua_block &#123;</span><br><span class="line">        ngx.say(&quot;Hello Lua!&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">#重载nginx</span><br><span class="line">./nginx -s reload</span><br><span class="line">#访问测试</span><br><span class="line">curl http://127.0.0.1/lua</span><br><span class="line">#如下返回表示lua安装正常</span><br><span class="line">Hello Lua!</span><br></pre></td></tr></table></figure>
<h2 id="6、Redis部署"><a href="#6、Redis部署" class="headerlink" title="6、Redis部署"></a>6、Redis部署</h2><blockquote>
<p>提示：源码安装这里不在展示，直接使用编译好的二进制文件进行启动，这里的二进制包是7下编译的，向下兼容6代系统</p>
</blockquote>
<h3 id="6-1、解压二进制文件包"><a href="#6-1、解压二进制文件包" class="headerlink" title="6.1、解压二进制文件包"></a>6.1、解压二进制文件包</h3><blockquote>
<p>提示：根据实际路径，注意logfile、pidfile、dir、requirepass等配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip -d redis_6.2.5_builder_auth.zip /home/ap/iflytek/yth-apps/system/</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="6-2、验证服务"><a href="#6-2、验证服务" class="headerlink" title="6.2、验证服务"></a>6.2、验证服务</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@ecs-403089 bin]# ./redis-server ../conf/redis.conf </span><br><span class="line">[root@ecs-403089 bin]# ./redis-cli -h 127.0.0.1 -p 6379 -a 123456</span><br><span class="line">Warning: Using a password with &apos;-a&apos; or &apos;-u&apos; option on the command line interface may not be safe.</span><br><span class="line">127.0.0.1:6379&gt; set lisir &quot;007&quot;</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get lisir</span><br><span class="line">&quot;007&quot;</span><br><span class="line">127.0.0.1:6379&gt; exit</span><br></pre></td></tr></table></figure>
<h2 id="7、OpenResty配置"><a href="#7、OpenResty配置" class="headerlink" title="7、OpenResty配置"></a>7、OpenResty配置</h2><ul>
<li><p>附主配置文件：nginx.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#user ccb-yth ccb-yth;</span><br><span class="line">worker_processes  6;</span><br><span class="line">worker_cpu_affinity 000001 000010 000100 001000 010000 100000;</span><br><span class="line">error_log  logs/error.log  error;</span><br><span class="line">#pid        conf/pidifle/nginx.pid;</span><br><span class="line">worker_rlimit_nofile 65535;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    use epoll;</span><br><span class="line">    worker_connections  65535;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    server_tokens off;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    add_header X-Frame-Options SAMEORIGIN;</span><br><span class="line">    underscores_in_headers on;</span><br><span class="line">    fastcgi_intercept_errors on;</span><br><span class="line">    </span><br><span class="line">    tcp_nopush     on;</span><br><span class="line">    tcp_nodelay on;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  60s;</span><br><span class="line">    server_names_hash_bucket_size 128;</span><br><span class="line">    </span><br><span class="line">    client_header_buffer_size 32k;</span><br><span class="line">    large_client_header_buffers 8 128k;</span><br><span class="line">    client_body_buffer_size  128k;</span><br><span class="line">    client_max_body_size 10m;</span><br><span class="line">    client_body_temp_path /tmp;</span><br><span class="line"></span><br><span class="line">    proxy_connect_timeout     100s;</span><br><span class="line">    proxy_read_timeout       100s;</span><br><span class="line">    proxy_send_timeout       100s;</span><br><span class="line">    proxy_buffer_size        64k;</span><br><span class="line">    proxy_buffers            4 64k;</span><br><span class="line">    proxy_busy_buffers_size  128k;</span><br><span class="line">    proxy_temp_file_write_size 128k;</span><br><span class="line">    </span><br><span class="line">#速率限制配置</span><br><span class="line">    limit_req_zone $server_name zone=perserver:10m rate=100r/s;</span><br><span class="line">    limit_req_zone $binary_remote_addr zone=perip:10m rate=100r/s;</span><br><span class="line">    limit_req_status 503;</span><br><span class="line">    limit_req_log_level error;</span><br><span class="line"></span><br><span class="line">#连接数限制配置</span><br><span class="line">    limit_conn_zone $binary_remote_addr zone=peripconn:10m;</span><br><span class="line">    limit_conn_zone $server_name zone=perserverconn:10m;</span><br><span class="line">    limit_conn_status 503;</span><br><span class="line">    limit_conn_log_level error;</span><br><span class="line"></span><br><span class="line">    log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$server_name&quot; &quot;$request&quot; &apos;</span><br><span class="line">        &apos;$status $body_bytes_sent &quot;$request_body&quot; &quot;$http_referer&quot; &apos;</span><br><span class="line">        &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &apos;</span><br><span class="line">        &apos;$connection $upstream_addr &apos;</span><br><span class="line">        &apos;$upstream_response_time $request_time&apos;;</span><br><span class="line"></span><br><span class="line">    access_log logs/access.log access;</span><br><span class="line"></span><br><span class="line">##########一体化负载组##########</span><br><span class="line">    upstream yth_load_balancing &#123;</span><br><span class="line">        server 128.196.124.222:8850;</span><br><span class="line">        server 128.196.124.224:8850;</span><br><span class="line">        #server 192.168.92.233:8850;</span><br><span class="line">        keepalive 10;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#lua模块路径，多个之间”;”分隔，其中”;;”表示默认搜索路径，默认到/usr/servers/nginx下找</span><br><span class="line">    lua_package_path &quot;/home/ap/iflytek/yth-apps/system/openresty-1.19.9.1/lualib/?.lua;;/home/ap/iflytek/yth-apps/system/openresty-1.19.9.1/nginx/conf/openResty/?.lua;;&quot;;</span><br><span class="line">    lua_package_cpath &quot;/home/ap/iflytek/yth-apps/system/openresty-1.19.9.1/lualib/?.so;&quot;;</span><br><span class="line">    include /home/ap/iflytek/yth-apps/system/openresty-1.19.9.1/nginx/conf/openResty/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>附虚拟主机配置文件：20000_auth.conf</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       20000;</span><br><span class="line">    server_name  0.0.0.0;</span><br><span class="line"></span><br><span class="line">    if ($request_method = GET) &#123;</span><br><span class="line">        return 405;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #p4接入</span><br><span class="line">    location  /yth/api/p4 &#123;</span><br><span class="line">        proxy_pass http://yth_load_balancing;</span><br><span class="line">        include proxyhttp.conf;</span><br><span class="line">        #允许1秒钟不超过100个请求，最大延迟请求数量不大于100. 如果请求不需要被延迟，添加nodelay参数，服务器会立刻返回503状态码。</span><br><span class="line">        limit_req zone=perip burst=100;</span><br><span class="line">        #针对服务进行连接限制，限制并发连接数为100</span><br><span class="line">        #limit_conn peripconn 100;</span><br><span class="line">        access_log logs/p4_access.log access;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    #redis鉴权接入</span><br><span class="line">    location  /yth/api &#123;</span><br><span class="line">        default_type &apos;application/json&apos;;</span><br><span class="line">        lua_code_cache off;</span><br><span class="line">        rewrite_by_lua_file  conf/openResty/lua/redis/redis-util.lua;</span><br><span class="line">        proxy_pass http://yth_load_balancing;</span><br><span class="line">        include proxyhttp.conf;</span><br><span class="line">        #允许1秒钟不超过100个请求，最大延迟请求数量不大于100. 如果请求不需要被延迟，添加nodelay参数，服务器会立刻返回503状态码。</span><br><span class="line">        limit_req zone=perip burst=100;</span><br><span class="line">        #针对服务进行连接限制，限制并发连接数为100</span><br><span class="line">        #limit_conn peripconn 100;</span><br><span class="line">        access_log logs/redis_access.log access;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="7、lua-redis脚本定制开发"><a href="#7、lua-redis脚本定制开发" class="headerlink" title="7、lua_redis脚本定制开发"></a>7、lua_redis脚本定制开发</h2><blockquote>
<p>开发逻辑：通过lua获取请求中的get或post参数，将参数json格式化，判断”appid”、”token”、”callid”三个参数不可缺少，则返回400报错，随后拼接参数”appid”和”token”后，去redis进行查询，如果token在redis中为空，则返回403报错，如果都满足，进入nginx location转发请求（rewrite_by_lua_file）</p>
</blockquote>
<ul>
<li>附连接redis的lua脚本：redis-util.lua<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">local function close_redes( red )</span><br><span class="line">  if not red then</span><br><span class="line">    return</span><br><span class="line">  end</span><br><span class="line">  -- 释放连接（连接池实现）</span><br><span class="line">  local pool_max_idle_time = 10000 -- 毫秒</span><br><span class="line">  local pool_size = 100 --连接池大小</span><br><span class="line">  local ok, err = red:set_keepalive(pool_max_idle_time, pool_size)</span><br><span class="line">  if not ok then</span><br><span class="line">    ngx.say(&quot;set keepalive error : &quot;, err)</span><br><span class="line">  end</span><br><span class="line">end</span><br><span class="line"> </span><br><span class="line">local redis = require(&quot;resty.redis&quot;)</span><br><span class="line"> </span><br><span class="line">-- 创建实例</span><br><span class="line">local red = redis:new()</span><br><span class="line">-- 设置超时(毫秒)</span><br><span class="line">red:set_timeout(2000)</span><br><span class="line">-- 建立连接</span><br><span class="line">local ip = &quot;128.196.124.222&quot;</span><br><span class="line">local port = 6379</span><br><span class="line">local ok, err = red:connect(ip, port)</span><br><span class="line">if not ok then</span><br><span class="line">  return</span><br><span class="line">end</span><br><span class="line">local res, err = red:auth(&quot;123456&quot;)</span><br><span class="line">if not res then</span><br><span class="line">  ngx.say(&quot;connect to redis error : &quot;, err)</span><br><span class="line">  return</span><br><span class="line">end</span><br><span class="line"> </span><br><span class="line">-- 选择db 0</span><br><span class="line">local ok, err = red:select(0)  </span><br><span class="line">if not ok then</span><br><span class="line">    ngx.say(&quot;failed to select db: &quot;, err)</span><br><span class="line">    return</span><br><span class="line">end</span><br><span class="line"> </span><br><span class="line">--Nginx服务器中使用lua获取get或post参数</span><br><span class="line">local request_method = ngx.var.request_method</span><br><span class="line">local args = nil</span><br><span class="line">local param = nil</span><br><span class="line"> </span><br><span class="line">--获取url参数的值</span><br><span class="line">if &quot;GET&quot; == request_method then</span><br><span class="line">    args = ngx.req.get_uri_args()</span><br><span class="line">elseif &quot;POST&quot; == request_method then</span><br><span class="line">    ngx.req.read_body()</span><br><span class="line">    args = ngx.req.get_post_args()</span><br><span class="line">end</span><br><span class="line">cjson = require &quot;cjson&quot;</span><br><span class="line">if ( args[&quot;appid&quot;] == nil or args[&quot;token&quot;] == nil or args[&quot;callid&quot;] == nil ) then</span><br><span class="line">       -- 如果输入参数缺少appi or token or callid，，则返回400报错</span><br><span class="line">       local loginfailobj = &#123;success = false,message = &quot;Bad request&quot;,code = 400,timestamp = os.time()&#125;</span><br><span class="line">       local loginfailjson = cjson.encode(loginfailobj)</span><br><span class="line">       ngx.say(loginfailjson)</span><br><span class="line">else</span><br><span class="line">       -- ngx.print(args[&quot;appid&quot;]..&quot;:&quot;..args[&quot;token&quot;])</span><br><span class="line">       param = (&quot;yth:&quot;..args[&quot;appid&quot;]..&quot;:&quot;..args[&quot;token&quot;])</span><br><span class="line">       local key_value = red:get(param)</span><br><span class="line">       local key_name = red:keys(param)</span><br><span class="line">       local res, errs = red:exists(param)</span><br><span class="line">       if ( res ~= 1 ) then</span><br><span class="line">        -- 如果token，在redis中为空，则返回403报错</span><br><span class="line">             local loginfailobj = &#123;success = false,message = &quot;Unauthorized&quot;,code = 403,timestamp = os.time()&#125;</span><br><span class="line">             local loginfailjson = cjson.encode(loginfailobj)</span><br><span class="line">             ngx.say(loginfailjson)</span><br><span class="line">      end</span><br><span class="line">end</span><br><span class="line">-- ngx.say(cjson.encode(key_value))</span><br><span class="line">-- ngx.say(cjson.encode(res))</span><br><span class="line">-- ngx.say(cjson.encode(key_name))</span><br><span class="line">red:close()</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>NGINX文档</category>
      </categories>
      <tags>
        <tag>NGINX代理</tag>
      </tags>
  </entry>
  <entry>
    <title>生产NGINX配置手册</title>
    <url>/2019/10/14/%E7%94%9F%E4%BA%A7NGINX%E9%85%8D%E7%BD%AE%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h1 id="生产NGINX配置手册"><a href="#生产NGINX配置手册" class="headerlink" title="生产NGINX配置手册"></a>生产NGINX配置手册</h1><h3 id="日志格式配置规范："><a href="#日志格式配置规范：" class="headerlink" title="日志格式配置规范："></a><strong>日志格式配置规范：</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">log_format access &apos;$remote_addr - $remote_user [$time_local] &quot;$server_name&quot; &quot;$request&quot; &apos;</span><br><span class="line">     &apos;$status $body_bytes_sent &quot;$request_body&quot; &quot;$http_referer&quot; &apos;</span><br><span class="line">     &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &apos;</span><br><span class="line">     &apos;$connection $upstream_addr &apos;</span><br><span class="line">     &apos;$upstream_response_time $request_time &apos;;</span><br></pre></td></tr></table></figure>
<h3 id="商业单向HTTPS配置规范："><a href="#商业单向HTTPS配置规范：" class="headerlink" title="商业单向HTTPS配置规范："></a><strong>商业单向HTTPS配置规范：</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">   listen       443;</span><br><span class="line">   server_name  xxx.ejf123.com;</span><br><span class="line">   ssl                  on;</span><br><span class="line">   #请根据不同的根域名加载对应的商业证书</span><br><span class="line">   ssl_certificate      /usr/local/nginx/ca/xxx/ejf123.com.crt;</span><br><span class="line">   ssl_certificate_key  /usr/local/nginx/ca/xxx/ejf123.com.key;</span><br><span class="line">   ssl_session_timeout  5m;</span><br><span class="line">   ssl_protocols  TLSv1 TLSv1.1 TLSv1.2 ;</span><br><span class="line">   ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-RC4-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:DHERSA-AES128-SHA:RC4-SHA:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!DSS:!PKS;</span><br><span class="line">   ssl_prefer_server_ciphers   off;</span><br><span class="line">   ssl_session_cache shared:SSL:10m;</span><br></pre></td></tr></table></figure>
<h3 id="私有双向HTTPS配置规范："><a href="#私有双向HTTPS配置规范：" class="headerlink" title="私有双向HTTPS配置规范："></a><strong>私有双向HTTPS配置规范：</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443;</span><br><span class="line">    server_name  xxx.ejf123.com;</span><br><span class="line">    ssl                  on;</span><br><span class="line">    #请根据不同的根域名加载对应的自制证书</span><br><span class="line">    ssl_certificate      /usr/local/nginx/ca/xxx/ccbmngserver.crt;</span><br><span class="line">    ssl_certificate_key  /usr/local/nginx/ca/xxx/ccbmngserver.key.unsecure;</span><br><span class="line">    ssl_client_certificate /usr/local/nginx/ca/ccbmng/RongLianCA.crt;</span><br><span class="line">    ssl_session_timeout  5m;</span><br><span class="line">    ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-RC4-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES256-SHA:DHERSA-AES128-SHA:RC4-SHA:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!DSS:!PKS;</span><br><span class="line">    ssl_prefer_server_ciphers   on;</span><br><span class="line">    ssl_session_cache builtin:1000 shared:SSL:10m;</span><br><span class="line">    ssl_verify_client on;</span><br></pre></td></tr></table></figure>
<h3 id="强制HTTPS调整配置规范："><a href="#强制HTTPS调整配置规范：" class="headerlink" title="强制HTTPS调整配置规范："></a><strong>强制HTTPS调整配置规范：</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if ( $request_uri ~ / ) &#123;</span><br><span class="line">   rewrite ^(.*) https://$server_name$1 redirect;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="访问日志配置规范："><a href="#访问日志配置规范：" class="headerlink" title="访问日志配置规范："></a><strong>访问日志配置规范：</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">access_log  /usr/local/nginx/logs/access/$&#123;二级域名&#125;$&#123;顶级域名&#125;_access.log  access;</span><br><span class="line">error_log   /usr/local/nginx/logs/error/$&#123;二级域名&#125;$&#123;顶级域名&#125;_error.log;</span><br></pre></td></tr></table></figure>
<h3 id="错误信息提示配置规范："><a href="#错误信息提示配置规范：" class="headerlink" title="错误信息提示配置规范："></a><strong>错误信息提示配置规范：</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#请注意域名配置文件中根（location /）目录中root的配置路径，需要将40x、50x等错误提示页放置其中才可引用</span><br><span class="line">    error_page      404 401 404 405 406 407 408 409 410 411 412 413 414 415 416 417 /400.html;</span><br><span class="line">    error_page      500 501 502 503 504 505 /500.html;</span><br><span class="line">    error_page      403 /403.html;</span><br><span class="line"></span><br><span class="line">    location = /500.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">    location /RequestDenied&#123;</span><br><span class="line">        return 403;</span><br><span class="line">    &#125;</span><br><span class="line">    location = /400.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">    location = /403.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="维护页配置示例："><a href="#维护页配置示例：" class="headerlink" title="维护页配置示例："></a><strong>维护页配置示例：</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	if ( $request_uri ~ /gjj ) &#123;</span><br><span class="line">       rewrite ^(.*) http://hall.xazfgjj.gov.cn/tongzhi.html break;</span><br><span class="line">    &#125;</span><br><span class="line">    location = /tongzhi.html &#123;</span><br><span class="line">        root   html/xagjj;</span><br><span class="line">    &#125;</span><br><span class="line">    location = /bg.png &#123;</span><br><span class="line">        root   html/xagjj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#根据url参数中包含appid=6468的请求，进行rewrite拦截跳转，?表示跳转后不接参数</span><br><span class="line">    if ( $args ~ appid=6468 ) &#123;</span><br><span class="line">        rewrite ^ http://dlwx.ejf123.com/tongzhi.html? last;</span><br><span class="line">    &#125;</span><br><span class="line">    location = /tongzhi.html &#123;</span><br><span class="line">        root   html/dlwx;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="if指令配置示例："><a href="#if指令配置示例：" class="headerlink" title="if指令配置示例："></a><strong>if指令配置示例：</strong></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#判断如果请求为/jfpt_common/logon!toAdminlogon.action?appid=(6|2760|5117|251|7259)$结尾，则rewrite为：https://$server_name/jfpt_common_sw/jfpt_common/logon!toAdminlogon.action?appid=(6|2760|5117|251|7259)</span><br><span class="line"></span><br><span class="line">    if ( $request_uri ~ /jfpt_common/logon!toAdminlogon.action\?appid=(6|2760|5117|251|7259)$ ) &#123;</span><br><span class="line">           rewrite ^/jfpt_common/(.*) https://$server_name/jfpt_common_sw/$1 redirect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#判断如果请求为/xxdkdf/login!toLogon.action，则rewrite为：https://$server_name/xxdkdf/login!toLogon.action</span><br><span class="line"></span><br><span class="line">    if ( $request_uri ~ /xxdkdf/logon\!toLogon\.action ) &#123;</span><br><span class="line">           rewrite ^(.*) https://$server_name$1 redirect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#如果提交方法为POST，则返回状态405（Method not allowed）。return不能返回301,302</span><br><span class="line"></span><br><span class="line">    if ($request_method = POST) &#123;</span><br><span class="line">        return 405;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#如果URL请求为.(php|aspx|asp|txt|zip|tar|rar|gz|exe)结尾的访问，则返回状态403</span><br><span class="line"></span><br><span class="line">    location ~* .*\.(php|aspx|asp|txt|zip|tar|rar|gz|exe)$ &#123;</span><br><span class="line">        return 403;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="location正则表达式匹配："><a href="#location正则表达式匹配：" class="headerlink" title="location正则表达式匹配："></a><strong>location正则表达式匹配：</strong></h3><blockquote>
<p><strong>匹配顺序</strong>：<br>(location =) &gt; (location 完整路径) &gt; (location ^~ 路径) &gt; (location ~,~* 正则顺序) &gt; (location 部分起始路径) &gt; (/)</p>
</blockquote>
<ul>
<li style="list-style: none"><input type="checkbox" checked> <code>~</code> 为区分大小写匹配</li>
<li style="list-style: none"><input type="checkbox" checked> <code>~*</code> 为不区分大小写匹配</li>
<li style="list-style: none"><input type="checkbox" checked> <code>!~</code> 和 <code>!~*</code> 分别为区分大小写不匹配及不区分大小写不匹配</li>
<li style="list-style: none"><input type="checkbox" checked> <code>^</code> 以什么开头的匹配</li>
<li style="list-style: none"><input type="checkbox" checked> <code>$</code> 以什么结尾的匹配</li>
<li style="list-style: none"><input type="checkbox" checked> <code>\</code> 转义字符。可以转. * ?等</li>
<li style="list-style: none"><input type="checkbox" checked> <code>*</code> 代表任意字符</li>
<li style="list-style: none"><input type="checkbox" checked> <code>=</code> 开头表示精确匹配</li>
<li style="list-style: none"><input type="checkbox" checked> <code>^~</code> 开头表示uri以某个常规字符串开头，不是正则匹配</li>
<li style="list-style: none"><input type="checkbox" checked> <code>/</code> 通用匹配, 如果没有其它匹配,任何请求都会匹配到</li>
</ul>
]]></content>
      <categories>
        <category>NGINX文档</category>
      </categories>
      <tags>
        <tag>NGINX代理</tag>
      </tags>
  </entry>
  <entry>
    <title>解决k8s dashboard 部分浏览器无法访问的问题</title>
    <url>/2020/09/22/%E8%A7%A3%E5%86%B3k8s%20dashboard%20%E9%83%A8%E5%88%86%E6%B5%8F%E8%A7%88%E5%99%A8%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h1 id="解决k8s-dashboard-部分浏览器无法访问的问题"><a href="#解决k8s-dashboard-部分浏览器无法访问的问题" class="headerlink" title="解决k8s dashboard 部分浏览器无法访问的问题"></a>解决k8s dashboard 部分浏览器无法访问的问题</h1><h2 id="1、查看证书资源"><a href="#1、查看证书资源" class="headerlink" title="1、查看证书资源"></a>1、查看证书资源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@k8s-master http_ssl]# kubectl get secrets -n kubernetes-dashboard</span><br><span class="line">#创建证书生成目录</span><br><span class="line">[root@k8s-master http_ssl]# pwd</span><br><span class="line">/soft/http_ssl</span><br><span class="line">#生成结束后会产生如下文件</span><br><span class="line">[root@k8s-master http_ssl]# ll</span><br><span class="line">total 36</span><br><span class="line">-rw-r--r-- 1 root root 2078 Sep 17 16:32 dashboard.lisirk8s.com.crt</span><br><span class="line">-rw-r--r-- 1 root root 1683 Sep 17 16:32 dashboard.lisirk8s.com.csr</span><br><span class="line">-rw-r--r-- 1 root root 3243 Sep 17 16:32 dashboard.lisirk8s.com.key</span><br><span class="line">-rw-r--r-- 1 root root  140 Sep 17 16:31 root-ca.cnf</span><br><span class="line">-rw-r--r-- 1 root root 1939 Sep 17 16:31 root-ca.crt</span><br><span class="line">-rw-r--r-- 1 root root 1667 Sep 17 16:31 root-ca.csr</span><br><span class="line">-rw-r--r-- 1 root root 3243 Sep 17 16:31 root-ca.key</span><br><span class="line">-rw-r--r-- 1 root root   17 Sep 17 16:32 root-ca.srl</span><br><span class="line">-rw-r--r-- 1 root root  253 Sep 17 16:32 site.cnf</span><br></pre></td></tr></table></figure>
<h2 id="2、生成自签证书"><a href="#2、生成自签证书" class="headerlink" title="2、生成自签证书"></a>2、生成自签证书</h2><h3 id="2-1、openssl生成ca根证书-生成root-ca的key"><a href="#2-1、openssl生成ca根证书-生成root-ca的key" class="headerlink" title="2.1、openssl生成ca根证书,生成root-ca的key"></a>2.1、openssl生成ca根证书,生成root-ca的key</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out &quot;root-ca.key&quot; 4096</span><br></pre></td></tr></table></figure>
<h3 id="2-2、通过ca的key生成csr文件"><a href="#2-2、通过ca的key生成csr文件" class="headerlink" title="2.2、通过ca的key生成csr文件"></a>2.2、通过ca的key生成csr文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl req -new -key &quot;root-ca.key&quot; -out &quot;root-ca.csr&quot; -sha256 -subj &quot;/C=CN/ST=SC/L=CD/O=lisirGroup/CN=lisirRootCA&quot;</span><br></pre></td></tr></table></figure>
<h3 id="2-2、配置ca证书"><a href="#2-2、配置ca证书" class="headerlink" title="2.2、配置ca证书"></a>2.2、配置ca证书</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; root-ca.cnf &lt;&lt; EOF</span><br><span class="line">[root_ca]</span><br><span class="line">basicConstraints = critical,CA:TRUE,pathlen:1</span><br><span class="line">keyUsage = critical, nonRepudiation, cRLSign, keyCertSign</span><br><span class="line">subjectKeyIdentifier=hash</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<h3 id="2-3、签发根证书"><a href="#2-3、签发根证书" class="headerlink" title="2.3、签发根证书"></a>2.3、签发根证书</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl x509 -req -days 3650 -in &quot;root-ca.csr&quot; -signkey &quot;root-ca.key&quot; -sha256 -out &quot;root-ca.crt&quot; -extfile &quot;root-ca.cnf&quot; -extensions root_ca</span><br></pre></td></tr></table></figure>
<h2 id="3、ca根证书颁发server端证书"><a href="#3、ca根证书颁发server端证书" class="headerlink" title="3、ca根证书颁发server端证书"></a>3、ca根证书颁发server端证书</h2><h3 id="3-1、生成站点-SSL-私钥"><a href="#3-1、生成站点-SSL-私钥" class="headerlink" title="3.1、生成站点 SSL 私钥"></a>3.1、生成站点 SSL 私钥</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl genrsa -out &quot;dashboard.lisirk8s.com.key&quot; 4096</span><br></pre></td></tr></table></figure>
<h3 id="3-2、使用私钥生成证书请求文件"><a href="#3-2、使用私钥生成证书请求文件" class="headerlink" title="3.2、使用私钥生成证书请求文件"></a>3.2、使用私钥生成证书请求文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl req -new -key &quot;dashboard.lisirk8s.com.key&quot; -out &quot;dashboard.lisirk8s.com.csr&quot; -sha256 -subj &quot;/C=CN/ST=SC/L=CD/O=lisirGroup/CN=dashboard.lisirk8s.com&quot;</span><br></pre></td></tr></table></figure>
<h3 id="3-3、配置证书，新建-site-cnf-文件"><a href="#3-3、配置证书，新建-site-cnf-文件" class="headerlink" title="3.3、配置证书，新建 site.cnf 文件"></a>3.3、配置证书，新建 site.cnf 文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; site.cnf &lt;&lt; EOF</span><br><span class="line">[server]</span><br><span class="line">authorityKeyIdentifier=keyid,issuer</span><br><span class="line">basicConstraints = critical,CA:FALSE</span><br><span class="line">extendedKeyUsage=serverAuth</span><br><span class="line">keyUsage = critical, digitalSignature, keyEncipherment</span><br><span class="line">subjectAltName = DNS:dashboard.lisirk8s.com, IP:192.168.1.201</span><br><span class="line">subjectKeyIdentifier=hash</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：上面的DNS和IP为选填部分，需要填写为server端的域名或ip</p>
</blockquote>
<h3 id="3-4、签署站点-SSL-证书"><a href="#3-4、签署站点-SSL-证书" class="headerlink" title="3.4、签署站点 SSL 证书"></a>3.4、签署站点 SSL 证书</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openssl x509 -req -days 750 -in &quot;dashboard.lisirk8s.com.csr&quot; -sha256 -CA &quot;root-ca.crt&quot; -CAkey &quot;root-ca.key&quot; -CAcreateserial -out &quot;dashboard.lisirk8s.com.crt&quot; -extfile &quot;site.cnf&quot; -extensions server</span><br></pre></td></tr></table></figure>
<h2 id="4、替换https证书"><a href="#4、替换https证书" class="headerlink" title="4、替换https证书"></a>4、替换https证书</h2><h3 id="4-1、删除原来的证书"><a href="#4-1、删除原来的证书" class="headerlink" title="4.1、删除原来的证书"></a>4.1、删除原来的证书</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl delete secret kubernetes-dashboard-certs -n kubernetes-dashboard</span><br></pre></td></tr></table></figure>
<h3 id="4-2、生成新的证书"><a href="#4-2、生成新的证书" class="headerlink" title="4.2、生成新的证书"></a>4.2、生成新的证书</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl create secret generic kubernetes-dashboard-certs -n kubernetes-dashboard --from-file=dashboard.crt=./dashboard.lisirk8s.com.crt --from-file=dashboard.key=./dashboard.lisirk8s.com.key</span><br></pre></td></tr></table></figure>
<h3 id="4-3、删除原kubernetes-dashboard，让其自动重启加载新的证书"><a href="#4-3、删除原kubernetes-dashboard，让其自动重启加载新的证书" class="headerlink" title="4.3、删除原kubernetes-dashboard，让其自动重启加载新的证书"></a>4.3、删除原kubernetes-dashboard，让其自动重启加载新的证书</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl delete pod kubernetes-dashboard-7d8466d688-7zq6z -n kubernetes-dashboard</span><br><span class="line">kubectl get pod,svc -n kubernetes-dashboard -o wide</span><br></pre></td></tr></table></figure>
<h2 id="5、查看dashboard-admin用户token"><a href="#5、查看dashboard-admin用户token" class="headerlink" title="5、查看dashboard-admin用户token"></a>5、查看dashboard-admin用户token</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk &apos;/dashboard-admin/&#123;print $1&#125;&apos;)</span><br></pre></td></tr></table></figure>
<h2 id="6、导入ca证书到信任的根证书机构"><a href="#6、导入ca证书到信任的根证书机构" class="headerlink" title="6、导入ca证书到信任的根证书机构"></a>6、导入ca证书到信任的根证书机构</h2><blockquote>
<p>从操作的服务器上将root-ca.crt下载下来，导入到需要访问的电脑中，并添加到受信任的颁发机构</p>
</blockquote>
<h2 id="7、各大浏览器进行测试"><a href="#7、各大浏览器进行测试" class="headerlink" title="7、各大浏览器进行测试"></a>7、各大浏览器进行测试</h2><p><img src="http://static.zybuluo.com/a807257775/jrrnv8iztdmwm7qcx9addp3b/image_1eire0ugteg912dh1805hg6b889.png" alt="image_1eire0ugteg912dh1805hg6b889.png-147.4kB"></p>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>解决kubelet get cs 状态不健康</title>
    <url>/2020/09/21/%E8%A7%A3%E5%86%B3kubelet%20get%20cs%20%E7%8A%B6%E6%80%81%E4%B8%8D%E5%81%A5%E5%BA%B7/</url>
    <content><![CDATA[<h1 id="解决kubelet-get-cs-状态不健康"><a href="#解决kubelet-get-cs-状态不健康" class="headerlink" title="解决kubelet get cs 状态不健康"></a>解决kubelet get cs 状态不健康</h1><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><ol>
<li>编辑/etc/kubernetes/manifests/kube-controller-manager.yaml 及 kube-scheduler.yaml，将–port=0这行删掉;</li>
<li>重启kubelet，<code>systemctl restart kubelet</code>;</li>
<li>测试，<code>kubectl get cs</code>，STATUS已变为<code>Healthy</code>;</li>
</ol>
]]></content>
      <categories>
        <category>Kubernetes</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>运维墨菲定律</title>
    <url>/2020/03/21/%E8%BF%90%E7%BB%B4%E5%A2%A8%E8%8F%B2%E5%AE%9A%E5%BE%8B/</url>
    <content><![CDATA[<h1 id="运维墨菲定律"><a href="#运维墨菲定律" class="headerlink" title="运维墨菲定律"></a>运维墨菲定律</h1><hr>
<h1 id="请每天读一遍以下的内容，以达自省。"><a href="#请每天读一遍以下的内容，以达自省。" class="headerlink" title="请每天读一遍以下的内容，以达自省。"></a>请每天读一遍以下的内容，以达自省。</h1><h3 id="1、任何事情都没有表面看起来那么简单"><a href="#1、任何事情都没有表面看起来那么简单" class="headerlink" title="1、任何事情都没有表面看起来那么简单"></a>1、任何事情都没有表面看起来那么简单</h3><h3 id="2、所有的事情都会比你预计的时间长"><a href="#2、所有的事情都会比你预计的时间长" class="headerlink" title="2、所有的事情都会比你预计的时间长"></a>2、所有的事情都会比你预计的时间长</h3><h3 id="3、会出错的事总会出错"><a href="#3、会出错的事总会出错" class="headerlink" title="3、会出错的事总会出错"></a>3、会出错的事总会出错</h3><h3 id="4、如果你担心某种事情会发生，那么它更有可能发生"><a href="#4、如果你担心某种事情会发生，那么它更有可能发生" class="headerlink" title="4、如果你担心某种事情会发生，那么它更有可能发生"></a>4、如果你担心某种事情会发生，那么它更有可能发生</h3><h3 id="5、如果第一次便成功，显然你已经做错某事"><a href="#5、如果第一次便成功，显然你已经做错某事" class="headerlink" title="5、如果第一次便成功，显然你已经做错某事"></a>5、如果第一次便成功，显然你已经做错某事</h3><h3 id="6、当一切都朝着一个方向进行，最好朝着相反的方向深深的看一眼"><a href="#6、当一切都朝着一个方向进行，最好朝着相反的方向深深的看一眼" class="headerlink" title="6、当一切都朝着一个方向进行，最好朝着相反的方向深深的看一眼"></a>6、当一切都朝着一个方向进行，最好朝着相反的方向深深的看一眼</h3><h3 id="7、自动消失的问题会自动回来"><a href="#7、自动消失的问题会自动回来" class="headerlink" title="7、自动消失的问题会自动回来"></a>7、自动消失的问题会自动回来</h3><h3 id="8、若大家的想法都差不多，显然没有一个人是在认真的思考"><a href="#8、若大家的想法都差不多，显然没有一个人是在认真的思考" class="headerlink" title="8、若大家的想法都差不多，显然没有一个人是在认真的思考"></a>8、若大家的想法都差不多，显然没有一个人是在认真的思考</h3><h3 id="9、好的开始，未必就有好的结果，坏的开始，结果往往会更坏"><a href="#9、好的开始，未必就有好的结果，坏的开始，结果往往会更坏" class="headerlink" title="9、好的开始，未必就有好的结果，坏的开始，结果往往会更坏"></a>9、好的开始，未必就有好的结果，坏的开始，结果往往会更坏</h3><h3 id="10、必须永远假设你的假设无效"><a href="#10、必须永远假设你的假设无效" class="headerlink" title="10、必须永远假设你的假设无效"></a>10、必须永远假设你的假设无效</h3>]]></content>
      <categories>
        <category>其他资料</category>
      </categories>
      <tags>
        <tag>其他资料</tag>
      </tags>
  </entry>
  <entry>
    <title>通用模板机安装手册</title>
    <url>/2019/11/05/%E9%80%9A%E7%94%A8%E6%A8%A1%E6%9D%BF%E6%9C%BA%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h1 id="通用模板机安装手册"><a href="#通用模板机安装手册" class="headerlink" title="通用模板机安装手册"></a>通用模板机安装手册</h1><h2 id="1、模板机环境"><a href="#1、模板机环境" class="headerlink" title="1、模板机环境"></a>1、模板机环境</h2><table>
<thead>
<tr>
<th>平台</th>
<th>IP</th>
<th>系统类型</th>
<th>适用场景</th>
</tr>
</thead>
<tbody>
<tr>
<td>CentOS 6.7 64Bit</td>
<td>192.168.2.245</td>
<td>最小化</td>
<td>APP/DB/PX/HA</td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="2、基础软件安装"><a href="#2、基础软件安装" class="headerlink" title="2、基础软件安装"></a>2、基础软件安装</h2><h3 id="2-1、安装EPEL源"><a href="#2-1、安装EPEL源" class="headerlink" title="2.1、安装EPEL源"></a>2.1、安装EPEL源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install nss curl ca-certificates -y</span><br><span class="line">[root@localhost ~]# rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/Packages/e/epel-release-6-8.noarch.rpm</span><br></pre></td></tr></table></figure>
<h3 id="2-2、安装系统工具"><a href="#2-2、安装系统工具" class="headerlink" title="2.2、安装系统工具"></a>2.2、安装系统工具</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install vim telnet wget nethogs htop glances dstat traceroute lrzsz goaccess ntpdate dos2unix openssl-devel tcpdump lrzsz fio nss curl ca-certificates socat -y</span><br></pre></td></tr></table></figure>
<h3 id="2-3、安装编译开发组件"><a href="#2-3、安装编译开发组件" class="headerlink" title="2.3、安装编译开发组件"></a>2.3、安装编译开发组件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum groupinstall &quot;Development Tools&quot; -y</span><br></pre></td></tr></table></figure>
<h3 id="2-4、（可选）安装NGINX各项依赖组件"><a href="#2-4、（可选）安装NGINX各项依赖组件" class="headerlink" title="2.4、（可选）安装NGINX各项依赖组件"></a>2.4、（可选）安装NGINX各项依赖组件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install pcre-devel zlib-devel libjpeg-devel libpng-devel freetype-devel   	openssl-devel curl curl-devel libxml2 libxml2-devel libjpeg libjpeg-devel libpng libpng-devel libmcrypt libmcrypt-devel openldap openldap-devel openssh-client -y</span><br></pre></td></tr></table></figure>
<h3 id="2-5、（可选）安装JAVA环境"><a href="#2-5、（可选）安装JAVA环境" class="headerlink" title="2.5、（可选）安装JAVA环境"></a>2.5、（可选）安装JAVA环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# wget http://192.168.1.231/soft/jdk-8u131-linux-x64.tar.gz</span><br><span class="line">[root@localhost ~]# mkdir -pv /usr/java/</span><br><span class="line">[root@localhost ~]# tar xzvf jdk-8u131-linux-x64.tar.gz -C /usr/java/</span><br><span class="line">[root@localhost ~]# ln -s /usr/java/jdk1.8.0_131/bin/java /usr/sbin/</span><br><span class="line">[root@localhost ~]# cat /etc/profile</span><br><span class="line">JAVA_HOME=/usr/java/jdk1.8.0_131</span><br><span class="line">export JAVA_HOME</span><br><span class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export CLASSPATH</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH:$HOME/bin:$JAVA_HOME/bin</span><br><span class="line">export PATH</span><br><span class="line">export LANG=zh_CN.UTF-8</span><br></pre></td></tr></table></figure>
<h2 id="3、系统优化"><a href="#3、系统优化" class="headerlink" title="3、系统优化"></a>3、系统优化</h2><h3 id="3-1、防火墙"><a href="#3-1、防火墙" class="headerlink" title="3.1、防火墙"></a>3.1、防火墙</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# iptables -F</span><br><span class="line">[root@localhost ~]# iptables -X</span><br><span class="line">[root@localhost ~]# iptables -Z</span><br><span class="line">[root@localhost ~]# service iptables save</span><br><span class="line">iptables：将防火墙规则保存到 /etc/sysconfig/iptables：     [确定]</span><br><span class="line">[root@localhost ~]# cat /etc/sysconfig/iptables</span><br><span class="line"># Generated by iptables-save v1.4.7 on Tue Nov  5 15:28:54 2019</span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [139:39694]</span><br><span class="line">:FORWARD ACCEPT [0:0]</span><br><span class="line">:OUTPUT ACCEPT [113:27701]</span><br><span class="line">COMMIT</span><br><span class="line"># Completed on Tue Nov  5 15:28:54 2019</span><br></pre></td></tr></table></figure>
<h3 id="3-2、SELINUX"><a href="#3-2、SELINUX" class="headerlink" title="3.2、SELINUX"></a>3.2、SELINUX</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/selinux/config </span><br><span class="line"># This file controls the state of SELinux on the system.</span><br><span class="line"># SELINUX= can take one of these three values:</span><br><span class="line">#     enforcing - SELinux security policy is enforced.</span><br><span class="line">#     permissive - SELinux prints warnings instead of enforcing.</span><br><span class="line">#     disabled - No SELinux policy is loaded.</span><br><span class="line">SELINUX=disabled</span><br><span class="line"># SELINUXTYPE= can take one of these two values:</span><br><span class="line">#     targeted - Targeted processes are protected,</span><br><span class="line">#     mls - Multi Level Security protection.</span><br><span class="line">SELINUXTYPE=targeted </span><br><span class="line">[root@localhost ~]# setenforce 0</span><br><span class="line">setenforce: SELinux is disabled</span><br></pre></td></tr></table></figure>
<h3 id="3-3、系统内核参数"><a href="#3-3、系统内核参数" class="headerlink" title="3.3、系统内核参数"></a>3.3、系统内核参数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/sysctl.conf </span><br><span class="line">fs.file-max = 65535</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">net.ipv4.conf.default.rp_filter = 1</span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line">kernel.sysrq = 0</span><br><span class="line">kernel.core_uses_pid = 1</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">kernel.msgmnb = 65536</span><br><span class="line">kernel.msgmax = 65536</span><br><span class="line">kernel.shmmax = 68719476736</span><br><span class="line">kernel.shmall = 4294967296</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 20000</span><br><span class="line">net.ipv4.tcp_sack = 1</span><br><span class="line">net.ipv4.tcp_window_scaling = 1</span><br><span class="line">net.ipv4.tcp_rmem = 4096        87380   4194304</span><br><span class="line">net.ipv4.tcp_wmem = 4096        16384   4194304</span><br><span class="line">net.core.wmem_default = 8388608</span><br><span class="line">net.core.rmem_default = 8388608</span><br><span class="line">net.core.rmem_max = 16777216</span><br><span class="line">net.core.wmem_max = 16777216</span><br><span class="line">net.core.netdev_max_backlog = 262144</span><br><span class="line">net.core.somaxconn = 262144</span><br><span class="line">net.ipv4.tcp_max_orphans = 3276800</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 262144</span><br><span class="line">net.ipv4.tcp_timestamps = 0</span><br><span class="line">net.ipv4.tcp_synack_retries = 1</span><br><span class="line">net.ipv4.tcp_syn_retries = 1</span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_mem = 94500000 915000000 927000000</span><br><span class="line">net.ipv4.tcp_fin_timeout = 1</span><br><span class="line">net.ipv4.tcp_keepalive_time = 30</span><br><span class="line">net.ipv4.ip_local_port_range = 1024    65000</span><br><span class="line">net.ipv6.conf.all.disable_ipv6 = 1</span><br></pre></td></tr></table></figure>
<h3 id="3-4、解除Ulimit限制"><a href="#3-4、解除Ulimit限制" class="headerlink" title="3.4、解除Ulimit限制"></a>3.4、解除Ulimit限制</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# sed -i &quot;s/1024/65536/g&quot; /etc/security/limits.d/90-nproc.conf</span><br><span class="line">[root@localhost ~]# cat /etc/security/limits.d/90-nproc.conf</span><br><span class="line"># Default limit for number of user&apos;s processes to prevent</span><br><span class="line"># accidental fork bombs.</span><br><span class="line"># See rhbz #432903 for reasoning.</span><br><span class="line"></span><br><span class="line">*          soft    nproc     65535</span><br><span class="line">root       soft    nproc     unlimited</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# echo &quot;* - nofile 65536&quot; &gt;&gt; /etc/security/limits.conf</span><br><span class="line">[root@localhost ~]# cat /etc/security/limits.conf</span><br><span class="line"># End of file</span><br><span class="line">* - nofile 65535</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux系统</category>
      </categories>
      <tags>
        <tag>Linux系统</tag>
      </tags>
  </entry>
</search>
